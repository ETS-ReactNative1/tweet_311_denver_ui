{"version":3,"sources":["useFocusedListenersChildrenAdapter.tsx"],"names":["focusedListeners","addFocusedListener","React","NavigationBuilderContext","listener","callback","navigation","result","handled"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,yBAAA,GAAA,sBAAA,CAAA,OAAA,8BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAce,SAAA,kCAAA,CAAA,IAAA,EAGH;AAAA,MAH+C,UAG/C,GAAA,IAAA,CAH+C,UAG/C;AAAA,MADVA,gBACU,GAAA,IAAA,CADVA,gBACU;;AAAA,0BACqBE,KAAK,CAALA,UAAAA,CAAiBC,yBAAAA,CAAhD,OAA+BD,CADrB;AAAA,MACFD,kBADE,qBACFA,kBADE;;AAGV,MAAMG,QAAQ,GAAG,KAAK,CAAL,WAAA,CACdC,UAAAA,QAAD,EAA8C;AAC5C,QAAIC,UAAU,CAAd,SAAIA,EAAJ,EAA4B;AAC1B,2BAAA,gBAAA,gKAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAzC,UAAyC;;AAAA,yBACXF,UAAQ,CAApC,QAAoC,CADG;AAAA,YACjC,QADiC,cACjC,OADiC;AAAA,YACtBG,OADsB,cACtBA,MADsB;;AAGvC,YAAA,QAAA,EAAa;AACX,iBAAO;AAAEC,YAAAA,OAAF,EAAEA,QAAF;AAAWD,YAAAA,MAAAA,EAAAA;AAAX,WAAP;AACD;AACF;;AAED,aAAO;AAAEC,QAAAA,OAAO,EAAT,IAAA;AAAiBD,QAAAA,MAAM,EAAEF,QAAQ,CAAA,UAAA;AAAjC,OAAP;AATF,KAAA,MAUO;AACL,aAAO;AAAEG,QAAAA,OAAO,EAAT,KAAA;AAAkBD,QAAAA,MAAM,EAAE;AAA1B,OAAP;AACD;AAdY,GAAA,EAgBf,CAAA,gBAAA,EAhBF,UAgBE,CAhBe,CAAjB;AAmBAL,EAAAA,KAAK,CAALA,SAAAA,CAAgB;AAAA,WAAMD,kBAAN,KAAA,IAAMA,IAAAA,kBAAN,KAAA,KAAA,CAAMA,GAAN,KAAA,CAAMA,GAAAA,kBAAkB,CAAxCC,QAAwC,CAAxB;AAAA,GAAhBA,EAAsD,CAAA,kBAAA,EAAtDA,QAAsD,CAAtDA;AAID","sourcesContent":["import * as React from 'react';\nimport { ParamListBase } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addFocusedListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(() => addFocusedListener?.(listener), [\n    addFocusedListener,\n    listener,\n  ]);\n}\n"]}