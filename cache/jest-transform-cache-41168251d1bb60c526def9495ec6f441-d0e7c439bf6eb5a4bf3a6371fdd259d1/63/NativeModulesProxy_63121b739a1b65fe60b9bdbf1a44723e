a31e03d26a4406a9b143561f6a90838e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _reactNative = require("react-native");

var NativeProxy = _reactNative.NativeModules.NativeUnimoduleProxy;
var modulesConstantsKey = 'modulesConstants';
var exportedMethodsKey = 'exportedMethods';
var NativeModulesProxy = {};

if (NativeProxy) {
  Object.keys(NativeProxy[exportedMethodsKey]).forEach(function (moduleName) {
    NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};
    NativeProxy[exportedMethodsKey][moduleName].forEach(function (methodInfo) {
      NativeModulesProxy[moduleName][methodInfo.name] = function _callee() {
        var key,
            argumentsCount,
            _len,
            args,
            _key,
            _args = arguments;

        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                key = methodInfo.key, argumentsCount = methodInfo.argumentsCount;

                for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = _args[_key];
                }

                if (!(argumentsCount !== args.length)) {
                  _context.next = 4;
                  break;
                }

                throw new Error("Native method " + moduleName + "." + methodInfo.name + " expects " + argumentsCount + " " + (argumentsCount === 1 ? 'argument' : 'arguments') + " but received " + args.length);

              case 4:
                _context.next = 6;
                return _regenerator.default.awrap(NativeProxy.callMethod(moduleName, key, args));

              case 6:
                return _context.abrupt("return", _context.sent);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        });
      };
    });

    NativeModulesProxy[moduleName].addListener = function () {
      var _NativeModules$UMReac;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return (_NativeModules$UMReac = _reactNative.NativeModules.UMReactNativeEventEmitter).addProxiedListener.apply(_NativeModules$UMReac, [moduleName].concat(args));
    };

    NativeModulesProxy[moduleName].removeListeners = function () {
      var _NativeModules$UMReac2;

      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return (_NativeModules$UMReac2 = _reactNative.NativeModules.UMReactNativeEventEmitter).removeProxiedListeners.apply(_NativeModules$UMReac2, [moduleName].concat(args));
    };
  });
} else {
  console.warn("The \"UMNativeModulesProxy\" native module is not exported through NativeModules; verify that @unimodules/react-native-adapter's native code is linked properly");
}

var _default = NativeModulesProxy;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9OYXRpdmVNb2R1bGVzUHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUEsSUFBTSxXQUFXLEdBQUcsMkJBQWMsb0JBQWxDO0FBQ0EsSUFBTSxtQkFBbUIsR0FBRyxrQkFBNUI7QUFDQSxJQUFNLGtCQUFrQixHQUFHLGlCQUEzQjtBQVFBLElBQU0sa0JBQWtCLEdBQWdELEVBQXhFOztBQUVBLElBQUksV0FBSixFQUFpQjtBQUNmLEVBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxXQUFXLENBQUMsa0JBQUQsQ0FBdkIsRUFBNkMsT0FBN0MsQ0FBcUQsVUFBQSxVQUFVLEVBQUc7QUFDaEUsSUFBQSxrQkFBa0IsQ0FBQyxVQUFELENBQWxCLEdBQWlDLFdBQVcsQ0FBQyxtQkFBRCxDQUFYLENBQWlDLFVBQWpDLEtBQWdELEVBQWpGO0FBQ0EsSUFBQSxXQUFXLENBQUMsa0JBQUQsQ0FBWCxDQUFnQyxVQUFoQyxFQUE0QyxPQUE1QyxDQUFvRCxVQUFBLFVBQVUsRUFBRztBQUMvRCxNQUFBLGtCQUFrQixDQUFDLFVBQUQsQ0FBbEIsQ0FBK0IsVUFBVSxDQUFDLElBQTFDLElBQWtEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR3hDLGdCQUFBLEdBSHdDLEdBR2hCLFVBSGdCLENBR3hDLEdBSHdDLEVBR25DLGNBSG1DLEdBR2hCLFVBSGdCLENBR25DLGNBSG1DOztBQUFBLDBDQUM3QyxJQUQ2QztBQUM3QyxrQkFBQSxJQUQ2QztBQUFBOztBQUFBLHNCQUk1QyxjQUFjLEtBQUssSUFBSSxDQUFDLE1BSm9CO0FBQUE7QUFBQTtBQUFBOztBQUFBLHNCQUt4QyxJQUFJLEtBQUosb0JBQ2EsVUFEYixTQUMyQixVQUFVLENBQUMsSUFEdEMsaUJBQ3NELGNBRHRELFVBRUYsY0FBYyxLQUFLLENBQW5CLEdBQXVCLFVBQXZCLEdBQW9DLFdBRmxDLHVCQUdhLElBQUksQ0FBQyxNQUhsQixDQUx3Qzs7QUFBQTtBQUFBO0FBQUEsa0RBV25DLFdBQVcsQ0FBQyxVQUFaLENBQXVCLFVBQXZCLEVBQW1DLEdBQW5DLEVBQXdDLElBQXhDLENBWG1DOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBbEQ7QUFhRCxLQWREOztBQXFCQSxJQUFBLGtCQUFrQixDQUFDLFVBQUQsQ0FBbEIsQ0FBK0IsV0FBL0IsR0FBNkM7QUFBQTs7QUFBQSx5Q0FBSSxJQUFKO0FBQUksUUFBQSxJQUFKO0FBQUE7O0FBQUEsYUFDM0Msb0RBQWMseUJBQWQsRUFBd0Msa0JBQXhDLCtCQUEyRCxVQUEzRCxTQUEwRSxJQUExRSxFQUQyQztBQUFBLEtBQTdDOztBQUVBLElBQUEsa0JBQWtCLENBQUMsVUFBRCxDQUFsQixDQUErQixlQUEvQixHQUFpRDtBQUFBOztBQUFBLHlDQUFJLElBQUo7QUFBSSxRQUFBLElBQUo7QUFBQTs7QUFBQSxhQUMvQyxxREFBYyx5QkFBZCxFQUF3QyxzQkFBeEMsZ0NBQStELFVBQS9ELFNBQThFLElBQTlFLEVBRCtDO0FBQUEsS0FBakQ7QUFFRCxHQTNCRDtBQTRCRCxDQTdCRCxNQTZCTztBQUNMLEVBQUEsT0FBTyxDQUFDLElBQVI7QUFHRDs7ZUFFYyxrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5hdGl2ZU1vZHVsZXMgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5jb25zdCBOYXRpdmVQcm94eSA9IE5hdGl2ZU1vZHVsZXMuTmF0aXZlVW5pbW9kdWxlUHJveHk7XG5jb25zdCBtb2R1bGVzQ29uc3RhbnRzS2V5ID0gJ21vZHVsZXNDb25zdGFudHMnO1xuY29uc3QgZXhwb3J0ZWRNZXRob2RzS2V5ID0gJ2V4cG9ydGVkTWV0aG9kcyc7XG5cbnR5cGUgUHJveHlOYXRpdmVNb2R1bGUgPSB7XG4gIFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IGFueTtcbiAgYWRkTGlzdGVuZXI6IChldmVudE5hbWU6IHN0cmluZykgPT4gdm9pZDtcbiAgcmVtb3ZlTGlzdGVuZXJzOiAoY291bnQ6IG51bWJlcikgPT4gdm9pZDtcbn07XG5cbmNvbnN0IE5hdGl2ZU1vZHVsZXNQcm94eTogeyBbbW9kdWxlTmFtZTogc3RyaW5nXTogUHJveHlOYXRpdmVNb2R1bGUgfSA9IHt9O1xuXG5pZiAoTmF0aXZlUHJveHkpIHtcbiAgT2JqZWN0LmtleXMoTmF0aXZlUHJveHlbZXhwb3J0ZWRNZXRob2RzS2V5XSkuZm9yRWFjaChtb2R1bGVOYW1lID0+IHtcbiAgICBOYXRpdmVNb2R1bGVzUHJveHlbbW9kdWxlTmFtZV0gPSBOYXRpdmVQcm94eVttb2R1bGVzQ29uc3RhbnRzS2V5XVttb2R1bGVOYW1lXSB8fCB7fTtcbiAgICBOYXRpdmVQcm94eVtleHBvcnRlZE1ldGhvZHNLZXldW21vZHVsZU5hbWVdLmZvckVhY2gobWV0aG9kSW5mbyA9PiB7XG4gICAgICBOYXRpdmVNb2R1bGVzUHJveHlbbW9kdWxlTmFtZV1bbWV0aG9kSW5mby5uYW1lXSA9IGFzeW5jIChcbiAgICAgICAgLi4uYXJnczogdW5rbm93bltdXG4gICAgICApOiBQcm9taXNlPGFueT4gPT4ge1xuICAgICAgICBjb25zdCB7IGtleSwgYXJndW1lbnRzQ291bnQgfSA9IG1ldGhvZEluZm87XG4gICAgICAgIGlmIChhcmd1bWVudHNDb3VudCAhPT0gYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgTmF0aXZlIG1ldGhvZCAke21vZHVsZU5hbWV9LiR7bWV0aG9kSW5mby5uYW1lfSBleHBlY3RzICR7YXJndW1lbnRzQ291bnR9ICR7XG4gICAgICAgICAgICAgIGFyZ3VtZW50c0NvdW50ID09PSAxID8gJ2FyZ3VtZW50JyA6ICdhcmd1bWVudHMnXG4gICAgICAgICAgICB9IGJ1dCByZWNlaXZlZCAke2FyZ3MubGVuZ3RofWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBOYXRpdmVQcm94eS5jYWxsTWV0aG9kKG1vZHVsZU5hbWUsIGtleSwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gVGhlc2UgYXJlIGNhbGxlZCBieSBFdmVudEVtaXR0ZXIgKHdoaWNoIGlzIGEgd3JhcHBlciBmb3IgTmF0aXZlRXZlbnRFbWl0dGVyKVxuICAgIC8vIG9ubHkgb24gaU9TIGFuZCB0aGV5IHVzZSBpT1Mtc3BlY2lmaWMgbmF0aXZlIG1vZHVsZSwgRVhSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlci5cbiAgICAvL1xuICAgIC8vIE9uIEFuZHJvaWQgb25seSB7c3RhcnQsc3RvcH1PYnNlcnZpbmcgYXJlIGNhbGxlZCBvbiB0aGUgbmF0aXZlIG1vZHVsZVxuICAgIC8vIGFuZCB0aGVzZSBzaG91bGQgYmUgZXhwb3J0ZWQgYXMgRXhwbyBtZXRob2RzLlxuICAgIE5hdGl2ZU1vZHVsZXNQcm94eVttb2R1bGVOYW1lXS5hZGRMaXN0ZW5lciA9ICguLi5hcmdzKSA9PlxuICAgICAgTmF0aXZlTW9kdWxlcy5VTVJlYWN0TmF0aXZlRXZlbnRFbWl0dGVyLmFkZFByb3hpZWRMaXN0ZW5lcihtb2R1bGVOYW1lLCAuLi5hcmdzKTtcbiAgICBOYXRpdmVNb2R1bGVzUHJveHlbbW9kdWxlTmFtZV0ucmVtb3ZlTGlzdGVuZXJzID0gKC4uLmFyZ3MpID0+XG4gICAgICBOYXRpdmVNb2R1bGVzLlVNUmVhY3ROYXRpdmVFdmVudEVtaXR0ZXIucmVtb3ZlUHJveGllZExpc3RlbmVycyhtb2R1bGVOYW1lLCAuLi5hcmdzKTtcbiAgfSk7XG59IGVsc2Uge1xuICBjb25zb2xlLndhcm4oXG4gICAgYFRoZSBcIlVNTmF0aXZlTW9kdWxlc1Byb3h5XCIgbmF0aXZlIG1vZHVsZSBpcyBub3QgZXhwb3J0ZWQgdGhyb3VnaCBOYXRpdmVNb2R1bGVzOyB2ZXJpZnkgdGhhdCBAdW5pbW9kdWxlcy9yZWFjdC1uYXRpdmUtYWRhcHRlcidzIG5hdGl2ZSBjb2RlIGlzIGxpbmtlZCBwcm9wZXJseWBcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmF0aXZlTW9kdWxlc1Byb3h5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==