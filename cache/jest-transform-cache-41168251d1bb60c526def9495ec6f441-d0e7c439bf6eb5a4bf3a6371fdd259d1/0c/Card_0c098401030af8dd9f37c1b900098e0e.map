{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","Card","React","overlayEnabled","shadowEnabled","gestureEnabled","gestureVelocityImpact","closing","height","width","prevProps","gestureDirection","Animated","velocity","onTransitionStart","toValue","spec","transitionSpec","animation","clearTimeout","isInteraction","finished","onClose","onOpen","enabled","pointerEvents","InteractionManager","nativeEvent","GestureState","onGestureBegin","onGestureCanceled","distance","layout","translation","Math","setTimeout","onGestureEnd","styleInterpolator","index","current","progress","next","swiping","inverted","layouts","screen","insets","top","right","bottom","left","insetLeft","gestureResponseDistance","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","containerStyle","contentStyle","interpolatedStyle","animationContext","shadowStyle","handleGestureEvent","translationY","gesture","translationX","backgroundColor","StyleSheet","isTransparent","styles","handleGestureStateChange","gestureRef","container","flex","content","overflow","overlay","shadow","position","shadowRadius","shadowColor","shadowOpacity","shadowHorizontal","shadowOffset","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  State as GestureState,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\nimport StackGestureRefContext from '../../utils/GestureHandlerRefContext';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransitionStart?: (props: { closing: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    if (\n      this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleEndInteraction();\n  }\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransitionStart,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransitionStart?.({ closing });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED:\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n        onGestureCanceled?.();\n        break;\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          Math.abs(translation + velocity * gestureVelocityImpact) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : false;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(\n            onClose,\n            32\n          ) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private gestureRef = React.createRef<PanGestureHandler>();\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = backgroundColor\n      ? Color(backgroundColor).alpha() === 0\n      : false;\n\n    return (\n      <View pointerEvents=\"box-none\" {...rest}>\n        {overlayEnabled && overlayStyle ? (\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[styles.overlay, overlayStyle]}\n          />\n        ) : null}\n        <Animated.View\n          style={[styles.container, containerStyle, customContainerStyle]}\n          pointerEvents=\"box-none\"\n        >\n          <PanGestureHandler\n            ref={this.gestureRef}\n            enabled={layout.width !== 0 && gestureEnabled}\n            onGestureEvent={handleGestureEvent}\n            onHandlerStateChange={this.handleGestureStateChange}\n            {...this.gestureActivationCriteria()}\n          >\n            <Animated.View style={[styles.container, cardStyle]}>\n              {shadowEnabled && shadowStyle && !isTransparent ? (\n                <Animated.View\n                  style={[\n                    styles.shadow,\n                    gestureDirection === 'horizontal'\n                      ? [styles.shadowHorizontal, styles.shadowLeft]\n                      : gestureDirection === 'horizontal-inverted'\n                      ? [styles.shadowHorizontal, styles.shadowRight]\n                      : gestureDirection === 'vertical'\n                      ? [styles.shadowVertical, styles.shadowTop]\n                      : [styles.shadowVertical, styles.shadowBottom],\n                    shadowStyle,\n                  ]}\n                  pointerEvents=\"none\"\n                />\n              ) : null}\n              <View\n                ref={this.contentRef}\n                style={[styles.content, contentStyle]}\n              >\n                <StackGestureRefContext.Provider value={this.gestureRef}>\n                  <CardAnimationContext.Provider value={animationContext}>\n                    {children}\n                  </CardAnimationContext.Provider>\n                </StackGestureRefContext.Provider>\n              </View>\n            </Animated.View>\n          </PanGestureHandler>\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]}