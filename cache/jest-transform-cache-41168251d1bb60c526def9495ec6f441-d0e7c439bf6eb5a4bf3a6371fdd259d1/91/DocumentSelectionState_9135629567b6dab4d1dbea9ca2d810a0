caa67c11400523495d7bd6a770c30e35
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var mixInEventEmitter = require("../../emitter/mixInEventEmitter");

var DocumentSelectionState = function () {
  function DocumentSelectionState(anchor, focus) {
    (0, _classCallCheck2.default)(this, DocumentSelectionState);
    this._anchorOffset = anchor;
    this._focusOffset = focus;
    this._hasFocus = false;
  }

  (0, _createClass2.default)(DocumentSelectionState, [{
    key: "update",
    value: function update(anchor, focus) {
      if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
        this._anchorOffset = anchor;
        this._focusOffset = focus;
        this.emit('update');
      }
    }
  }, {
    key: "constrainLength",
    value: function constrainLength(maxLength) {
      this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
    }
  }, {
    key: "focus",
    value: function focus() {
      if (!this._hasFocus) {
        this._hasFocus = true;
        this.emit('focus');
      }
    }
  }, {
    key: "blur",
    value: function blur() {
      if (this._hasFocus) {
        this._hasFocus = false;
        this.emit('blur');
      }
    }
  }, {
    key: "hasFocus",
    value: function hasFocus() {
      return this._hasFocus;
    }
  }, {
    key: "isCollapsed",
    value: function isCollapsed() {
      return this._anchorOffset === this._focusOffset;
    }
  }, {
    key: "isBackward",
    value: function isBackward() {
      return this._anchorOffset > this._focusOffset;
    }
  }, {
    key: "getAnchorOffset",
    value: function getAnchorOffset() {
      return this._hasFocus ? this._anchorOffset : null;
    }
  }, {
    key: "getFocusOffset",
    value: function getFocusOffset() {
      return this._hasFocus ? this._focusOffset : null;
    }
  }, {
    key: "getStartOffset",
    value: function getStartOffset() {
      return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
    }
  }, {
    key: "getEndOffset",
    value: function getEndOffset() {
      return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
    }
  }, {
    key: "overlaps",
    value: function overlaps(start, end) {
      return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
    }
  }]);
  return DocumentSelectionState;
}();

mixInEventEmitter(DocumentSelectionState, {
  blur: true,
  focus: true,
  update: true
});
module.exports = DocumentSelectionState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRvY3VtZW50U2VsZWN0aW9uU3RhdGUuanMiXSwibmFtZXMiOlsibWl4SW5FdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiRG9jdW1lbnRTZWxlY3Rpb25TdGF0ZSIsImFuY2hvciIsImZvY3VzIiwiX2FuY2hvck9mZnNldCIsIl9mb2N1c09mZnNldCIsIl9oYXNGb2N1cyIsImVtaXQiLCJtYXhMZW5ndGgiLCJ1cGRhdGUiLCJNYXRoIiwibWluIiwibWF4Iiwic3RhcnQiLCJlbmQiLCJoYXNGb2N1cyIsImdldFN0YXJ0T2Zmc2V0IiwiZ2V0RW5kT2Zmc2V0IiwiYmx1ciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7OztBQUVBLElBQU1BLGlCQUFpQixHQUFHQyxPQUFPLG1DQUFqQzs7SUFXTUMsc0I7QUFLSixrQ0FBWUMsTUFBWixFQUFvQkMsS0FBcEIsRUFBMkI7QUFBQTtBQUN6QixTQUFLQyxhQUFMLEdBQXFCRixNQUFyQjtBQUNBLFNBQUtHLFlBQUwsR0FBb0JGLEtBQXBCO0FBQ0EsU0FBS0csU0FBTCxHQUFpQixLQUFqQjtBQUNEOzs7OzJCQVNNSixNLEVBQVFDLEssRUFBTztBQUNwQixVQUFJLEtBQUtDLGFBQUwsS0FBdUJGLE1BQXZCLElBQWlDLEtBQUtHLFlBQUwsS0FBc0JGLEtBQTNELEVBQWtFO0FBQ2hFLGFBQUtDLGFBQUwsR0FBcUJGLE1BQXJCO0FBQ0EsYUFBS0csWUFBTCxHQUFvQkYsS0FBcEI7QUFDQSxhQUFLSSxJQUFMLENBQVUsUUFBVjtBQUNEO0FBQ0Y7OztvQ0FRZUMsUyxFQUFXO0FBQ3pCLFdBQUtDLE1BQUwsQ0FDRUMsSUFBSSxDQUFDQyxHQUFMLENBQVMsS0FBS1AsYUFBZCxFQUE2QkksU0FBN0IsQ0FERixFQUVFRSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxLQUFLTixZQUFkLEVBQTRCRyxTQUE1QixDQUZGO0FBSUQ7Ozs0QkFFTztBQUNOLFVBQUksQ0FBQyxLQUFLRixTQUFWLEVBQXFCO0FBQ25CLGFBQUtBLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxhQUFLQyxJQUFMLENBQVUsT0FBVjtBQUNEO0FBQ0Y7OzsyQkFFTTtBQUNMLFVBQUksS0FBS0QsU0FBVCxFQUFvQjtBQUNsQixhQUFLQSxTQUFMLEdBQWlCLEtBQWpCO0FBQ0EsYUFBS0MsSUFBTCxDQUFVLE1BQVY7QUFDRDtBQUNGOzs7K0JBS1U7QUFDVCxhQUFPLEtBQUtELFNBQVo7QUFDRDs7O2tDQUthO0FBQ1osYUFBTyxLQUFLRixhQUFMLEtBQXVCLEtBQUtDLFlBQW5DO0FBQ0Q7OztpQ0FLWTtBQUNYLGFBQU8sS0FBS0QsYUFBTCxHQUFxQixLQUFLQyxZQUFqQztBQUNEOzs7c0NBS2lCO0FBQ2hCLGFBQU8sS0FBS0MsU0FBTCxHQUFpQixLQUFLRixhQUF0QixHQUFzQyxJQUE3QztBQUNEOzs7cUNBS2dCO0FBQ2YsYUFBTyxLQUFLRSxTQUFMLEdBQWlCLEtBQUtELFlBQXRCLEdBQXFDLElBQTVDO0FBQ0Q7OztxQ0FLZ0I7QUFDZixhQUFPLEtBQUtDLFNBQUwsR0FDSEksSUFBSSxDQUFDQyxHQUFMLENBQVMsS0FBS1AsYUFBZCxFQUE2QixLQUFLQyxZQUFsQyxDQURHLEdBRUgsSUFGSjtBQUdEOzs7bUNBS2M7QUFDYixhQUFPLEtBQUtDLFNBQUwsR0FDSEksSUFBSSxDQUFDRSxHQUFMLENBQVMsS0FBS1IsYUFBZCxFQUE2QixLQUFLQyxZQUFsQyxDQURHLEdBRUgsSUFGSjtBQUdEOzs7NkJBT1FRLEssRUFBT0MsRyxFQUFLO0FBQ25CLGFBQ0UsS0FBS0MsUUFBTCxNQUNBLEtBQUtDLGNBQUwsTUFBeUJGLEdBRHpCLElBRUFELEtBQUssSUFBSSxLQUFLSSxZQUFMLEVBSFg7QUFLRDs7Ozs7QUFHSGxCLGlCQUFpQixDQUFDRSxzQkFBRCxFQUF5QjtBQUN4Q2lCLEVBQUFBLElBQUksRUFBRSxJQURrQztBQUV4Q2YsRUFBQUEsS0FBSyxFQUFFLElBRmlDO0FBR3hDTSxFQUFBQSxNQUFNLEVBQUU7QUFIZ0MsQ0FBekIsQ0FBakI7QUFNQVUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbkIsc0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgbWl4SW5FdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuLi8uLi9lbWl0dGVyL21peEluRXZlbnRFbWl0dGVyJyk7XG5cbi8qKlxuICogRG9jdW1lbnRTZWxlY3Rpb25TdGF0ZSBpcyByZXNwb25zaWJsZSBmb3IgbWFpbnRhaW5pbmcgc2VsZWN0aW9uIGluZm9ybWF0aW9uXG4gKiBmb3IgYSBkb2N1bWVudC5cbiAqXG4gKiBJdCBpcyBpbnRlbmRlZCBmb3IgdXNlIGJ5IEFic3RyYWN0VGV4dEVkaXRvci1iYXNlZCBjb21wb25lbnRzIGZvclxuICogaWRlbnRpZnlpbmcgdGhlIGFwcHJvcHJpYXRlIHN0YXJ0L2VuZCBwb3NpdGlvbnMgdG8gbW9kaWZ5IHRoZVxuICogRG9jdW1lbnRDb250ZW50LCBhbmQgZm9yIHByb2dyYW1tYXRpY2FsbHkgc2V0dGluZyBicm93c2VyIHNlbGVjdGlvbiB3aGVuXG4gKiBjb21wb25lbnRzIHJlLXJlbmRlci5cbiAqL1xuY2xhc3MgRG9jdW1lbnRTZWxlY3Rpb25TdGF0ZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gYW5jaG9yXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmb2N1c1xuICAgKi9cbiAgY29uc3RydWN0b3IoYW5jaG9yLCBmb2N1cykge1xuICAgIHRoaXMuX2FuY2hvck9mZnNldCA9IGFuY2hvcjtcbiAgICB0aGlzLl9mb2N1c09mZnNldCA9IGZvY3VzO1xuICAgIHRoaXMuX2hhc0ZvY3VzID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgYW4gdXBkYXRlIHRvIHRoZSBzdGF0ZS4gSWYgZWl0aGVyIG9mZnNldCB2YWx1ZSBoYXMgY2hhbmdlZCxcbiAgICogc2V0IHRoZSB2YWx1ZXMgYW5kIGVtaXQgdGhlIGBjaGFuZ2VgIGV2ZW50LiBPdGhlcndpc2Ugbm8tb3AuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmNob3JcbiAgICogQHBhcmFtIHtudW1iZXJ9IGZvY3VzXG4gICAqL1xuICB1cGRhdGUoYW5jaG9yLCBmb2N1cykge1xuICAgIGlmICh0aGlzLl9hbmNob3JPZmZzZXQgIT09IGFuY2hvciB8fCB0aGlzLl9mb2N1c09mZnNldCAhPT0gZm9jdXMpIHtcbiAgICAgIHRoaXMuX2FuY2hvck9mZnNldCA9IGFuY2hvcjtcbiAgICAgIHRoaXMuX2ZvY3VzT2Zmc2V0ID0gZm9jdXM7XG4gICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIG1heCB0ZXh0IGxlbmd0aCwgY29uc3RyYWluIG91ciBzZWxlY3Rpb24gb2Zmc2V0cyB0byBlbnN1cmVcbiAgICogdGhhdCB0aGUgc2VsZWN0aW9uIHJlbWFpbnMgc3RyaWN0bHkgd2l0aGluIHRoZSB0ZXh0IHJhbmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4TGVuZ3RoXG4gICAqL1xuICBjb25zdHJhaW5MZW5ndGgobWF4TGVuZ3RoKSB7XG4gICAgdGhpcy51cGRhdGUoXG4gICAgICBNYXRoLm1pbih0aGlzLl9hbmNob3JPZmZzZXQsIG1heExlbmd0aCksXG4gICAgICBNYXRoLm1pbih0aGlzLl9mb2N1c09mZnNldCwgbWF4TGVuZ3RoKSxcbiAgICApO1xuICB9XG5cbiAgZm9jdXMoKSB7XG4gICAgaWYgKCF0aGlzLl9oYXNGb2N1cykge1xuICAgICAgdGhpcy5faGFzRm9jdXMgPSB0cnVlO1xuICAgICAgdGhpcy5lbWl0KCdmb2N1cycpO1xuICAgIH1cbiAgfVxuXG4gIGJsdXIoKSB7XG4gICAgaWYgKHRoaXMuX2hhc0ZvY3VzKSB7XG4gICAgICB0aGlzLl9oYXNGb2N1cyA9IGZhbHNlO1xuICAgICAgdGhpcy5lbWl0KCdibHVyJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBoYXNGb2N1cygpIHtcbiAgICByZXR1cm4gdGhpcy5faGFzRm9jdXM7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ29sbGFwc2VkKCkge1xuICAgIHJldHVybiB0aGlzLl9hbmNob3JPZmZzZXQgPT09IHRoaXMuX2ZvY3VzT2Zmc2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0JhY2t3YXJkKCkge1xuICAgIHJldHVybiB0aGlzLl9hbmNob3JPZmZzZXQgPiB0aGlzLl9mb2N1c09mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/bnVtYmVyfVxuICAgKi9cbiAgZ2V0QW5jaG9yT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9oYXNGb2N1cyA/IHRoaXMuX2FuY2hvck9mZnNldCA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P251bWJlcn1cbiAgICovXG4gIGdldEZvY3VzT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9oYXNGb2N1cyA/IHRoaXMuX2ZvY3VzT2Zmc2V0IDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/bnVtYmVyfVxuICAgKi9cbiAgZ2V0U3RhcnRPZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hhc0ZvY3VzXG4gICAgICA/IE1hdGgubWluKHRoaXMuX2FuY2hvck9mZnNldCwgdGhpcy5fZm9jdXNPZmZzZXQpXG4gICAgICA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7P251bWJlcn1cbiAgICovXG4gIGdldEVuZE9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5faGFzRm9jdXNcbiAgICAgID8gTWF0aC5tYXgodGhpcy5fYW5jaG9yT2Zmc2V0LCB0aGlzLl9mb2N1c09mZnNldClcbiAgICAgIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgb3ZlcmxhcHMoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmhhc0ZvY3VzKCkgJiZcbiAgICAgIHRoaXMuZ2V0U3RhcnRPZmZzZXQoKSA8PSBlbmQgJiZcbiAgICAgIHN0YXJ0IDw9IHRoaXMuZ2V0RW5kT2Zmc2V0KClcbiAgICApO1xuICB9XG59XG5cbm1peEluRXZlbnRFbWl0dGVyKERvY3VtZW50U2VsZWN0aW9uU3RhdGUsIHtcbiAgYmx1cjogdHJ1ZSxcbiAgZm9jdXM6IHRydWUsXG4gIHVwZGF0ZTogdHJ1ZSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERvY3VtZW50U2VsZWN0aW9uU3RhdGU7XG4iXX0=