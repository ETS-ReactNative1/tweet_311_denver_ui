8f599260c39295c834e29a582e07ef47
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SafeAreaProvider = SafeAreaProvider;
exports.useSafeArea = useSafeArea;
exports.SafeAreaView = SafeAreaView;
exports.SafeAreaConsumer = exports.SafeAreaContext = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _NativeSafeAreaView = _interopRequireDefault(require("./NativeSafeAreaView"));

var _jsxFileName = "/Users/janic/Developer/react-native-safe-area-context/src/index.tsx";
var SafeAreaContext = React.createContext(null);
exports.SafeAreaContext = SafeAreaContext;

function SafeAreaProvider(_ref) {
  var children = _ref.children,
      initialSafeAreaInsets = _ref.initialSafeAreaInsets;
  var parentInsets = useParentSafeArea();

  var _React$useState = React.useState(initialSafeAreaInsets || parentInsets),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      insets = _React$useState2[0],
      setInsets = _React$useState2[1];

  var onInsetsChange = React.useCallback(function (event) {
    setInsets(event.nativeEvent.insets);
  }, []);
  return React.createElement(_NativeSafeAreaView.default, {
    style: styles.fill,
    onInsetsChange: onInsetsChange,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 26
    }
  }, insets != null ? React.createElement(SafeAreaContext.Provider, {
    value: insets,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 28
    }
  }, children) : null);
}

var styles = _reactNative.StyleSheet.create({
  fill: {
    flex: 1
  }
});

var SafeAreaConsumer = SafeAreaContext.Consumer;
exports.SafeAreaConsumer = SafeAreaConsumer;

function useParentSafeArea() {
  return React.useContext(SafeAreaContext);
}

function useSafeArea() {
  var safeArea = React.useContext(SafeAreaContext);

  if (safeArea == null) {
    throw new Error('No safe area value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.');
  }

  return safeArea;
}

function SafeAreaView(_ref2) {
  var style = _ref2.style,
      rest = (0, _objectWithoutProperties2.default)(_ref2, ["style"]);
  var insets = useSafeArea();
  return React.createElement(_reactNative.View, (0, _extends2.default)({
    style: [{
      paddingTop: insets.top,
      paddingRight: insets.right,
      paddingBottom: insets.bottom,
      paddingLeft: insets.left
    }, style]
  }, rest, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 63
    }
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzeCJdLCJuYW1lcyI6WyJTYWZlQXJlYUNvbnRleHQiLCJSZWFjdCIsImNoaWxkcmVuIiwiaW5pdGlhbFNhZmVBcmVhSW5zZXRzIiwicGFyZW50SW5zZXRzIiwidXNlUGFyZW50U2FmZUFyZWEiLCJpbnNldHMiLCJzZXRJbnNldHMiLCJvbkluc2V0c0NoYW5nZSIsImV2ZW50Iiwic3R5bGVzIiwiU3R5bGVTaGVldCIsImZpbGwiLCJmbGV4IiwiU2FmZUFyZWFDb25zdW1lciIsInNhZmVBcmVhIiwic3R5bGUiLCJyZXN0IiwidXNlU2FmZUFyZWEiLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUVBLElBQUEsbUJBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsd0JBQUEsQ0FBQTs7O0FBRU8sSUFBTUEsZUFBZSxHQUFHQyxLQUFLLENBQUxBLGFBQUFBLENBQXhCLElBQXdCQSxDQUF4Qjs7O0FBT0EsU0FBQSxnQkFBQSxDQUFBLElBQUEsRUFHZTtBQUZwQkMsTUFBQUEsUUFFb0IsR0FBQSxJQUFBLENBRnBCQSxRQUFBQTtBQUFBQSxNQUNBQyxxQkFDb0IsR0FBQSxJQUFBLENBRHBCQSxxQkFEQUQ7QUFHQSxNQUFNRSxZQUFZLEdBQUdDLGlCQUFyQixFQUFBOztBQURvQixNQUFBLGVBQUEsR0FFUUosS0FBSyxDQUFMQSxRQUFBQSxDQUMxQkUscUJBQXFCLElBSEgsWUFFUUYsQ0FGUjtBQUFBLE1BQUEsZ0JBQUEsR0FBQSxDQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsRUFBQSxlQUFBLEVBQUEsQ0FBQSxDQUFBO0FBQUEsTUFFYkssTUFGYSxHQUFBLGdCQUFBLENBQUEsQ0FBQSxDQUFBO0FBQUEsTUFFTEMsU0FGSyxHQUFBLGdCQUFBLENBQUEsQ0FBQSxDQUFBOztBQUtwQixNQUFNQyxjQUFjLEdBQUdQLEtBQUssQ0FBTEEsV0FBQUEsQ0FBa0IsVUFBQSxLQUFBLEVBQThCO0FBQ3JFTSxJQUFBQSxTQUFTLENBQUNFLEtBQUssQ0FBTEEsV0FBQUEsQ0FBVkYsTUFBUyxDQUFUQTtBQURxQk4sR0FBQUEsRUFBdkIsRUFBdUJBLENBQXZCO0FBSUEsU0FDRSxLQUFBLENBQUEsYUFBQSxDQUFDLG1CQUFBLENBQUQsT0FBQSxFQUFBO0FBQW9CLElBQUEsS0FBSyxFQUFFUyxNQUFNLENBQWpDLElBQUE7QUFBd0MsSUFBQSxjQUFjLEVBQXRELGNBQUE7QUFBQSxJQUFBLFFBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxFQUFBLFlBQUE7QUFBQSxNQUFBLFVBQUEsRUFBQTtBQUFBO0FBQUEsR0FBQSxFQUNHSixNQUFNLElBQU5BLElBQUFBLEdBQ0MsS0FBQSxDQUFBLGFBQUEsQ0FBQyxlQUFELENBQUEsUUFBQSxFQUFBO0FBQTBCLElBQUEsS0FBSyxFQUEvQixNQUFBO0FBQUEsSUFBQSxRQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsRUFBQSxZQUFBO0FBQUEsTUFBQSxVQUFBLEVBQUE7QUFBQTtBQUFBLEdBQUEsRUFEREEsUUFDQyxDQUREQSxHQUZMLElBQ0UsQ0FERjtBQVdGOztBQUFBLElBQU1JLE1BQU0sR0FBR0MsWUFBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsTUFBQUEsQ0FBa0I7QUFDL0JDLEVBQUFBLElBQUksRUFBRTtBQUFFQyxJQUFBQSxJQUFJLEVBRGQ7QUFDUTtBQUR5QixDQUFsQkYsQ0FBZjs7QUFJTyxJQUFNRyxnQkFBZ0IsR0FBR2QsZUFBZSxDQUF4QyxRQUFBOzs7QUFFUCxTQUFBLGlCQUFBLEdBQXdFO0FBQ3RFLFNBQU9DLEtBQUssQ0FBTEEsVUFBQUEsQ0FBUCxlQUFPQSxDQUFQO0FBR0s7O0FBQUEsU0FBQSxXQUFBLEdBQW9DO0FBQ3pDLE1BQU1jLFFBQVEsR0FBR2QsS0FBSyxDQUFMQSxVQUFBQSxDQUFqQixlQUFpQkEsQ0FBakI7O0FBQ0EsTUFBSWMsUUFBUSxJQUFaLElBQUEsRUFBc0I7QUFDcEIsVUFBTSxJQUFBLEtBQUEsQ0FBTix3R0FBTSxDQUFOO0FBSUY7O0FBQUEsU0FBQSxRQUFBO0FBR0s7O0FBQUEsU0FBQSxZQUFBLENBQUEsS0FBQSxFQUd1QztBQUY1Q0MsTUFBQUEsS0FFNEMsR0FBQSxLQUFBLENBRjVDQSxLQUFBQTtBQUFBQSxNQUNHQyxJQUN5QyxHQUFBLENBQUEsR0FBQSx5QkFBQSxDQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxPQUFBLENBQUEsQ0FGNUNEO0FBR0EsTUFBTVYsTUFBTSxHQUFHWSxXQUFmLEVBQUE7QUFFQSxTQUNFLEtBQUEsQ0FBQSxhQUFBLENBQUMsWUFBQSxDQUFELElBQUEsRUFBQSxDQUFBLEdBQUEsU0FBQSxDQUFBLE9BQUEsRUFBQTtBQUNFLElBQUEsS0FBSyxFQUFFLENBQ0w7QUFDRUMsTUFBQUEsVUFBVSxFQUFFYixNQUFNLENBRHBCLEdBQUE7QUFFRWMsTUFBQUEsWUFBWSxFQUFFZCxNQUFNLENBRnRCLEtBQUE7QUFHRWUsTUFBQUEsYUFBYSxFQUFFZixNQUFNLENBSHZCLE1BQUE7QUFJRWdCLE1BQUFBLFdBQVcsRUFBRWhCLE1BQU0sQ0FMaEI7QUFDTCxLQURLLEVBRFQsS0FDUztBQURULEdBQUEsRUFBQSxJQUFBLEVBQUE7QUFBQSxJQUFBLFFBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxFQUFBLFlBQUE7QUFBQSxNQUFBLFVBQUEsRUFERjtBQUNFO0FBQUEsR0FBQSxDQUFBLENBREY7QUFjRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIFZpZXcsIFZpZXdQcm9wcyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBFZGdlSW5zZXRzIGFzIEVkZ2VJbnNldHNULCBJbnNldENoYW5nZWRFdmVudCB9IGZyb20gJy4vU2FmZUFyZWEudHlwZXMnO1xuaW1wb3J0IE5hdGl2ZVNhZmVBcmVhVmlldyBmcm9tICcuL05hdGl2ZVNhZmVBcmVhVmlldyc7XG5cbmV4cG9ydCBjb25zdCBTYWZlQXJlYUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEVkZ2VJbnNldHNUIHwgbnVsbD4obnVsbCk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FmZUFyZWFWaWV3UHJvcHMge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgaW5pdGlhbFNhZmVBcmVhSW5zZXRzPzogRWRnZUluc2V0c1QgfCBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2FmZUFyZWFQcm92aWRlcih7XG4gIGNoaWxkcmVuLFxuICBpbml0aWFsU2FmZUFyZWFJbnNldHMsXG59OiBTYWZlQXJlYVZpZXdQcm9wcykge1xuICBjb25zdCBwYXJlbnRJbnNldHMgPSB1c2VQYXJlbnRTYWZlQXJlYSgpO1xuICBjb25zdCBbaW5zZXRzLCBzZXRJbnNldHNdID0gUmVhY3QudXNlU3RhdGU8RWRnZUluc2V0c1QgfCBudWxsIHwgdW5kZWZpbmVkPihcbiAgICBpbml0aWFsU2FmZUFyZWFJbnNldHMgfHwgcGFyZW50SW5zZXRzLFxuICApO1xuICBjb25zdCBvbkluc2V0c0NoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudDogSW5zZXRDaGFuZ2VkRXZlbnQpID0+IHtcbiAgICBzZXRJbnNldHMoZXZlbnQubmF0aXZlRXZlbnQuaW5zZXRzKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPE5hdGl2ZVNhZmVBcmVhVmlldyBzdHlsZT17c3R5bGVzLmZpbGx9IG9uSW5zZXRzQ2hhbmdlPXtvbkluc2V0c0NoYW5nZX0+XG4gICAgICB7aW5zZXRzICE9IG51bGwgPyAoXG4gICAgICAgIDxTYWZlQXJlYUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2luc2V0c30+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L1NhZmVBcmVhQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICkgOiBudWxsfVxuICAgIDwvTmF0aXZlU2FmZUFyZWFWaWV3PlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGZpbGw6IHsgZmxleDogMSB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBTYWZlQXJlYUNvbnN1bWVyID0gU2FmZUFyZWFDb250ZXh0LkNvbnN1bWVyO1xuXG5mdW5jdGlvbiB1c2VQYXJlbnRTYWZlQXJlYSgpOiBSZWFjdC5Db250ZXh0VHlwZTx0eXBlb2YgU2FmZUFyZWFDb250ZXh0PiB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KFNhZmVBcmVhQ29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTYWZlQXJlYSgpOiBFZGdlSW5zZXRzVCB7XG4gIGNvbnN0IHNhZmVBcmVhID0gUmVhY3QudXNlQ29udGV4dChTYWZlQXJlYUNvbnRleHQpO1xuICBpZiAoc2FmZUFyZWEgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdObyBzYWZlIGFyZWEgdmFsdWUgYXZhaWxhYmxlLiBNYWtlIHN1cmUgeW91IGFyZSByZW5kZXJpbmcgYDxTYWZlQXJlYVByb3ZpZGVyPmAgYXQgdGhlIHRvcCBvZiB5b3VyIGFwcC4nLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHNhZmVBcmVhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2FmZUFyZWFWaWV3KHtcbiAgc3R5bGUsXG4gIC4uLnJlc3Rcbn06IFZpZXdQcm9wcyAmIHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gIGNvbnN0IGluc2V0cyA9IHVzZVNhZmVBcmVhKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Vmlld1xuICAgICAgc3R5bGU9e1tcbiAgICAgICAge1xuICAgICAgICAgIHBhZGRpbmdUb3A6IGluc2V0cy50b3AsXG4gICAgICAgICAgcGFkZGluZ1JpZ2h0OiBpbnNldHMucmlnaHQsXG4gICAgICAgICAgcGFkZGluZ0JvdHRvbTogaW5zZXRzLmJvdHRvbSxcbiAgICAgICAgICBwYWRkaW5nTGVmdDogaW5zZXRzLmxlZnQsXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlLFxuICAgICAgXX1cbiAgICAgIHsuLi5yZXN0fVxuICAgIC8+XG4gICk7XG59XG5cbmV4cG9ydCB0eXBlIEVkZ2VJbnNldHMgPSBFZGdlSW5zZXRzVDtcbiJdfQ==