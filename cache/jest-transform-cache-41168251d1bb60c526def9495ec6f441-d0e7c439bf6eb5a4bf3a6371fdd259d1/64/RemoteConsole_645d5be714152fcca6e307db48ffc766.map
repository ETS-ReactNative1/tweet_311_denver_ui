{"version":3,"sources":["../../src/logs/RemoteConsole.ts"],"names":[],"mappings":"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","sourcesContent":["import RemoteLogging, { LogEntryFields, LogLevel } from './RemoteLogging';\n\n/**\n * Creates a console object that delegates calls to the specified underlying console and also sends\n * the messages to the development environment over a remote connection.\n */\nfunction createRemoteConsole(originalConsole: Console): Console {\n  let groupDepth = 0;\n\n  const enhancedConsole: typeof originalConsole = Object.create(originalConsole);\n\n  // https://console.spec.whatwg.org/#debug\n  // Don't use a level below \"info\" because \"debug\" is intended for messages that shouldn't be shown\n  // to the developer\n  _defineConsoleLogMethod('debug', 'info');\n\n  // https://console.spec.whatwg.org/#log\n  _defineConsoleLogMethod('log', 'info');\n\n  // https://console.spec.whatwg.org/#info\n  _defineConsoleLogMethod('info', 'info');\n\n  // https://console.spec.whatwg.org/#warn\n  _defineConsoleLogMethod('warn', 'warn');\n\n  // https://console.spec.whatwg.org/#error\n  _defineConsoleLogMethod('error', 'error');\n\n  // https://console.spec.whatwg.org/#assert\n  enhancedConsole.assert = function assert(condition: unknown, ...data: unknown[]): void {\n    if (originalConsole.assert) {\n      // @ts-ignore\n      originalConsole.assert(!!condition, ...data);\n    }\n\n    if (condition) {\n      return;\n    }\n\n    const assertionMessage = 'Assertion failed';\n    if (!data.length) {\n      data.push(assertionMessage);\n    } else {\n      if (typeof data[0] !== 'string') {\n        data.unshift(assertionMessage);\n      } else {\n        data[0] = `${assertionMessage}: ${data[0]}`;\n      }\n    }\n\n    _enqueueRemoteLog('error', {}, data);\n  };\n\n  // https://console.spec.whatwg.org/#group\n  enhancedConsole.group = function group(...data: unknown[]): void {\n    if (originalConsole.group) {\n      // @ts-ignore\n      originalConsole.group(...data);\n    }\n\n    _enqueueRemoteLog('info', {}, data);\n    groupDepth++;\n  };\n\n  // https://console.spec.whatwg.org/#groupcollapsed\n  enhancedConsole.groupCollapsed = function groupCollapsed(...data: unknown[]): void {\n    if (originalConsole.groupCollapsed) {\n      // @ts-ignore\n      originalConsole.groupCollapsed(...data);\n    }\n\n    _enqueueRemoteLog('info', { groupCollapsed: true }, data);\n    groupDepth++;\n  };\n\n  // https://console.spec.whatwg.org/#groupend\n  enhancedConsole.groupEnd = function groupEnd(): void {\n    if (originalConsole.groupEnd) {\n      originalConsole.groupEnd();\n    }\n\n    if (groupDepth > 0) {\n      groupDepth--;\n    }\n\n    _enqueueRemoteLog('info', { shouldHide: true }, []);\n  };\n\n  /**\n   * Defines a method in the `console.log()` family on the enhanced console\n   * instance\n   */\n  function _defineConsoleLogMethod(name: keyof typeof console, level: LogLevel): void {\n    enhancedConsole[name] = function __expoConsoleLog(...data: unknown[]): void {\n      let originalMethod = originalConsole[name];\n      if (typeof originalMethod === 'function') {\n        originalMethod.apply(originalConsole, data);\n      }\n\n      _enqueueRemoteLog(level, {}, data);\n    };\n  }\n\n  /**\n   * Schedules the given log entry to be sent remotely in a safe way that handles all errors. This\n   * function is responsible for error handling because the console methods are synchronous but\n   * sending log messages is asynchronous, so this code (instead of the console methods) needs to be\n   * responsible for asynchronous errors.\n   */\n  function _enqueueRemoteLog(\n    level: LogLevel,\n    additionalFields: LogEntryFields,\n    data: unknown[]\n  ): void {\n    RemoteLogging.enqueueRemoteLogAsync(level, { groupDepth, ...additionalFields }, data).catch(\n      error => {\n        originalConsole.error(\n          `There was a problem sending log messages to your development environment`,\n          error\n        );\n      }\n    );\n  }\n\n  return enhancedConsole;\n}\n\nexport default {\n  createRemoteConsole,\n};\n"],"sourceRoot":""}