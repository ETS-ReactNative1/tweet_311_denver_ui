98d83d6d445071c8eaf0162539c0f2b0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useOnAction;

var React = _interopRequireWildcard(require("react"));

var _NavigationBuilderContext = _interopRequireDefault(require("./NavigationBuilderContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function useOnAction(_ref) {
  var router = _ref.router,
      getState = _ref.getState,
      setState = _ref.setState,
      key = _ref.key,
      listeners = _ref.listeners,
      routerConfigOptions = _ref.routerConfigOptions;

  var _React$useContext = React.useContext(_NavigationBuilderContext.default),
      onActionParent = _React$useContext.onAction,
      onRouteFocusParent = _React$useContext.onRouteFocus,
      addActionListenerParent = _React$useContext.addActionListener,
      trackAction = _React$useContext.trackAction;

  var routerConfigOptionsRef = React.useRef(routerConfigOptions);
  React.useEffect(function () {
    routerConfigOptionsRef.current = routerConfigOptions;
  });
  var onAction = React.useCallback(function (action) {
    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();
    var state = getState();

    if (visitedNavigators.has(state.key)) {
      return false;
    }

    visitedNavigators.add(state.key);

    if (typeof action.target === 'string' && action.target !== state.key) {
      return false;
    }

    var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);
    result = result === null && action.target === state.key ? state : result;

    if (result !== null) {
      trackAction(action);

      if (state !== result) {
        setState(result);
      }

      if (onRouteFocusParent !== undefined) {
        var shouldFocus = router.shouldActionChangeFocus(action);

        if (shouldFocus && key !== undefined) {
          onRouteFocusParent(key);
        }
      }

      return true;
    }

    if (onActionParent !== undefined) {
      if (onActionParent(action, visitedNavigators)) {
        return true;
      }
    }

    for (var i = listeners.length - 1; i >= 0; i--) {
      var listener = listeners[i];

      if (listener(action, visitedNavigators)) {
        return true;
      }
    }

    return false;
  }, [getState, router, onActionParent, trackAction, onRouteFocusParent, setState, key, listeners]);
  React.useEffect(function () {
    return addActionListenerParent === null || addActionListenerParent === void 0 ? void 0 : addActionListenerParent(onAction);
  }, [addActionListenerParent, onAction]);
  return onAction;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,