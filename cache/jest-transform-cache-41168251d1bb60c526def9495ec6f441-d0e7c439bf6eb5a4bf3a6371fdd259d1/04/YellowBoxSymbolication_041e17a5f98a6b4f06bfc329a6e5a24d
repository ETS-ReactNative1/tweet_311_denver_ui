8901de841974a80aeb3471634ab66004
'use strict';

var symbolicateStackTrace = require("../../Core/Devtools/symbolicateStackTrace");

var cache = new Map();
var YellowBoxSymbolication = {
  delete: function _delete(stack) {
    cache.delete(getCacheKey(stack));
  },
  symbolicate: function symbolicate(stack) {
    var key = getCacheKey(stack);
    var promise = cache.get(key);

    if (promise == null) {
      promise = symbolicateStackTrace(stack).then(sanitize);
      cache.set(key, promise);
    }

    return promise;
  }
};

var getCacheKey = function getCacheKey(stack) {
  return JSON.stringify(stack);
};

var sanitize = function sanitize(maybeStack) {
  if (!Array.isArray(maybeStack)) {
    throw new Error('Expected stack to be an array.');
  }

  var stack = [];

  for (var _iterator = maybeStack, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var _maybeFrame = _ref;

    if (typeof _maybeFrame !== 'object' || _maybeFrame == null) {
      throw new Error('Expected each stack frame to be an object.');
    }

    if (typeof _maybeFrame.column !== 'number' && _maybeFrame.column != null) {
      throw new Error('Expected stack frame `column` to be a nullable number.');
    }

    if (typeof _maybeFrame.file !== 'string') {
      throw new Error('Expected stack frame `file` to be a string.');
    }

    if (typeof _maybeFrame.lineNumber !== 'number') {
      throw new Error('Expected stack frame `lineNumber` to be a number.');
    }

    if (typeof _maybeFrame.methodName !== 'string') {
      throw new Error('Expected stack frame `methodName` to be a string.');
    }

    stack.push({
      column: _maybeFrame.column,
      file: _maybeFrame.file,
      lineNumber: _maybeFrame.lineNumber,
      methodName: _maybeFrame.methodName
    });
  }

  return stack;
};

module.exports = YellowBoxSymbolication;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveFN5bWJvbGljYXRpb24uanMiXSwibmFtZXMiOlsic3ltYm9saWNhdGVTdGFja1RyYWNlIiwicmVxdWlyZSIsImNhY2hlIiwiTWFwIiwiWWVsbG93Qm94U3ltYm9saWNhdGlvbiIsImRlbGV0ZSIsInN0YWNrIiwiZ2V0Q2FjaGVLZXkiLCJzeW1ib2xpY2F0ZSIsImtleSIsInByb21pc2UiLCJnZXQiLCJ0aGVuIiwic2FuaXRpemUiLCJzZXQiLCJKU09OIiwic3RyaW5naWZ5IiwibWF5YmVTdGFjayIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwibWF5YmVGcmFtZSIsImNvbHVtbiIsImZpbGUiLCJsaW5lTnVtYmVyIiwibWV0aG9kTmFtZSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFFQSxJQUFNQSxxQkFBcUIsR0FBR0MsT0FBTyw2Q0FBckM7O0FBUUEsSUFBTUMsS0FBb0MsR0FBRyxJQUFJQyxHQUFKLEVBQTdDO0FBRUEsSUFBTUMsc0JBQXNCLEdBQUc7QUFDN0JDLEVBQUFBLE1BRDZCLG1CQUN0QkMsS0FEc0IsRUFDRjtBQUN6QkosSUFBQUEsS0FBSyxDQUFDRyxNQUFOLENBQWFFLFdBQVcsQ0FBQ0QsS0FBRCxDQUF4QjtBQUNELEdBSDRCO0FBSzdCRSxFQUFBQSxXQUw2Qix1QkFLakJGLEtBTGlCLEVBS2E7QUFDeEMsUUFBTUcsR0FBRyxHQUFHRixXQUFXLENBQUNELEtBQUQsQ0FBdkI7QUFFQSxRQUFJSSxPQUFPLEdBQUdSLEtBQUssQ0FBQ1MsR0FBTixDQUFVRixHQUFWLENBQWQ7O0FBQ0EsUUFBSUMsT0FBTyxJQUFJLElBQWYsRUFBcUI7QUFDbkJBLE1BQUFBLE9BQU8sR0FBR1YscUJBQXFCLENBQUNNLEtBQUQsQ0FBckIsQ0FBNkJNLElBQTdCLENBQWtDQyxRQUFsQyxDQUFWO0FBQ0FYLE1BQUFBLEtBQUssQ0FBQ1ksR0FBTixDQUFVTCxHQUFWLEVBQWVDLE9BQWY7QUFDRDs7QUFFRCxXQUFPQSxPQUFQO0FBQ0Q7QUFmNEIsQ0FBL0I7O0FBa0JBLElBQU1ILFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUNELEtBQUQsRUFBNEI7QUFDOUMsU0FBT1MsSUFBSSxDQUFDQyxTQUFMLENBQWVWLEtBQWYsQ0FBUDtBQUNELENBRkQ7O0FBT0EsSUFBTU8sUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0ksVUFBRCxFQUE4QjtBQUM3QyxNQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixVQUFkLENBQUwsRUFBZ0M7QUFDOUIsVUFBTSxJQUFJRyxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNEOztBQUNELE1BQU1kLEtBQUssR0FBRyxFQUFkOztBQUNBLHVCQUF5QlcsVUFBekIsZ0tBQXFDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxRQUExQkksV0FBMEI7O0FBQ25DLFFBQUksT0FBT0EsV0FBUCxLQUFzQixRQUF0QixJQUFrQ0EsV0FBVSxJQUFJLElBQXBELEVBQTBEO0FBQ3hELFlBQU0sSUFBSUQsS0FBSixDQUFVLDRDQUFWLENBQU47QUFDRDs7QUFDRCxRQUFJLE9BQU9DLFdBQVUsQ0FBQ0MsTUFBbEIsS0FBNkIsUUFBN0IsSUFBeUNELFdBQVUsQ0FBQ0MsTUFBWCxJQUFxQixJQUFsRSxFQUF3RTtBQUN0RSxZQUFNLElBQUlGLEtBQUosQ0FBVSx3REFBVixDQUFOO0FBQ0Q7O0FBQ0QsUUFBSSxPQUFPQyxXQUFVLENBQUNFLElBQWxCLEtBQTJCLFFBQS9CLEVBQXlDO0FBQ3ZDLFlBQU0sSUFBSUgsS0FBSixDQUFVLDZDQUFWLENBQU47QUFDRDs7QUFDRCxRQUFJLE9BQU9DLFdBQVUsQ0FBQ0csVUFBbEIsS0FBaUMsUUFBckMsRUFBK0M7QUFDN0MsWUFBTSxJQUFJSixLQUFKLENBQVUsbURBQVYsQ0FBTjtBQUNEOztBQUNELFFBQUksT0FBT0MsV0FBVSxDQUFDSSxVQUFsQixLQUFpQyxRQUFyQyxFQUErQztBQUM3QyxZQUFNLElBQUlMLEtBQUosQ0FBVSxtREFBVixDQUFOO0FBQ0Q7O0FBQ0RkLElBQUFBLEtBQUssQ0FBQ29CLElBQU4sQ0FBVztBQUNUSixNQUFBQSxNQUFNLEVBQUVELFdBQVUsQ0FBQ0MsTUFEVjtBQUVUQyxNQUFBQSxJQUFJLEVBQUVGLFdBQVUsQ0FBQ0UsSUFGUjtBQUdUQyxNQUFBQSxVQUFVLEVBQUVILFdBQVUsQ0FBQ0csVUFIZDtBQUlUQyxNQUFBQSxVQUFVLEVBQUVKLFdBQVUsQ0FBQ0k7QUFKZCxLQUFYO0FBTUQ7O0FBQ0QsU0FBT25CLEtBQVA7QUFDRCxDQTdCRDs7QUErQkFxQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QixzQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3ltYm9saWNhdGVTdGFja1RyYWNlID0gcmVxdWlyZSgnLi4vLi4vQ29yZS9EZXZ0b29scy9zeW1ib2xpY2F0ZVN0YWNrVHJhY2UnKTtcblxuaW1wb3J0IHR5cGUge1N0YWNrRnJhbWV9IGZyb20gJy4uLy4uL0NvcmUvTmF0aXZlRXhjZXB0aW9uc01hbmFnZXInO1xuXG50eXBlIENhY2hlS2V5ID0gc3RyaW5nO1xuXG5leHBvcnQgdHlwZSBTdGFjayA9IEFycmF5PFN0YWNrRnJhbWU+O1xuXG5jb25zdCBjYWNoZTogTWFwPENhY2hlS2V5LCBQcm9taXNlPFN0YWNrPj4gPSBuZXcgTWFwKCk7XG5cbmNvbnN0IFllbGxvd0JveFN5bWJvbGljYXRpb24gPSB7XG4gIGRlbGV0ZShzdGFjazogU3RhY2spOiB2b2lkIHtcbiAgICBjYWNoZS5kZWxldGUoZ2V0Q2FjaGVLZXkoc3RhY2spKTtcbiAgfSxcblxuICBzeW1ib2xpY2F0ZShzdGFjazogU3RhY2spOiBQcm9taXNlPFN0YWNrPiB7XG4gICAgY29uc3Qga2V5ID0gZ2V0Q2FjaGVLZXkoc3RhY2spO1xuXG4gICAgbGV0IHByb21pc2UgPSBjYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAocHJvbWlzZSA9PSBudWxsKSB7XG4gICAgICBwcm9taXNlID0gc3ltYm9saWNhdGVTdGFja1RyYWNlKHN0YWNrKS50aGVuKHNhbml0aXplKTtcbiAgICAgIGNhY2hlLnNldChrZXksIHByb21pc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9LFxufTtcblxuY29uc3QgZ2V0Q2FjaGVLZXkgPSAoc3RhY2s6IFN0YWNrKTogQ2FjaGVLZXkgPT4ge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RhY2spO1xufTtcblxuLyoqXG4gKiBTYW5pdGl6ZSBiZWNhdXNlIHNvbWV0aW1lcywgYHN5bWJvbGljYXRlU3RhY2tUcmFjZWAgZ2l2ZXMgdXMgaW52YWxpZCB2YWx1ZXMuXG4gKi9cbmNvbnN0IHNhbml0aXplID0gKG1heWJlU3RhY2s6IG1peGVkKTogU3RhY2sgPT4ge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobWF5YmVTdGFjaykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHN0YWNrIHRvIGJlIGFuIGFycmF5LicpO1xuICB9XG4gIGNvbnN0IHN0YWNrID0gW107XG4gIGZvciAoY29uc3QgbWF5YmVGcmFtZSBvZiBtYXliZVN0YWNrKSB7XG4gICAgaWYgKHR5cGVvZiBtYXliZUZyYW1lICE9PSAnb2JqZWN0JyB8fCBtYXliZUZyYW1lID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZWFjaCBzdGFjayBmcmFtZSB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWF5YmVGcmFtZS5jb2x1bW4gIT09ICdudW1iZXInICYmIG1heWJlRnJhbWUuY29sdW1uICE9IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc3RhY2sgZnJhbWUgYGNvbHVtbmAgdG8gYmUgYSBudWxsYWJsZSBudW1iZXIuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWF5YmVGcmFtZS5maWxlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBzdGFjayBmcmFtZSBgZmlsZWAgdG8gYmUgYSBzdHJpbmcuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWF5YmVGcmFtZS5saW5lTnVtYmVyICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBzdGFjayBmcmFtZSBgbGluZU51bWJlcmAgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWF5YmVGcmFtZS5tZXRob2ROYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBzdGFjayBmcmFtZSBgbWV0aG9kTmFtZWAgdG8gYmUgYSBzdHJpbmcuJyk7XG4gICAgfVxuICAgIHN0YWNrLnB1c2goe1xuICAgICAgY29sdW1uOiBtYXliZUZyYW1lLmNvbHVtbixcbiAgICAgIGZpbGU6IG1heWJlRnJhbWUuZmlsZSxcbiAgICAgIGxpbmVOdW1iZXI6IG1heWJlRnJhbWUubGluZU51bWJlcixcbiAgICAgIG1ldGhvZE5hbWU6IG1heWJlRnJhbWUubWV0aG9kTmFtZSxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3RhY2s7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFllbGxvd0JveFN5bWJvbGljYXRpb247XG4iXX0=