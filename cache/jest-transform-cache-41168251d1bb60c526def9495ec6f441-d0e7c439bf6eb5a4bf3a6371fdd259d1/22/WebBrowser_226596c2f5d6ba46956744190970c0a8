799987c46133c5dd04715ff692f62302
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCustomTabsSupportingBrowsersAsync = getCustomTabsSupportingBrowsersAsync;
exports.warmUpAsync = warmUpAsync;
exports.mayInitWithUrlAsync = mayInitWithUrlAsync;
exports.coolDownAsync = coolDownAsync;
exports.openBrowserAsync = openBrowserAsync;
exports.dismissBrowser = dismissBrowser;
exports.openAuthSessionAsync = openAuthSessionAsync;
exports.dismissAuthSession = dismissAuthSession;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _reactNative = require("react-native");

var _core = require("@unimodules/core");

var _ExpoWebBrowser = _interopRequireDefault(require("./ExpoWebBrowser"));

var emptyCustomTabsPackages = {
  defaultBrowserPackage: undefined,
  preferredBrowserPackage: undefined,
  browserPackages: [],
  servicePackages: []
};

function getCustomTabsSupportingBrowsersAsync() {
  return _regenerator.default.async(function getCustomTabsSupportingBrowsersAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (_ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync) {
            _context.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');

        case 2:
          if (!(_reactNative.Platform.OS !== 'android')) {
            _context.next = 6;
            break;
          }

          return _context.abrupt("return", emptyCustomTabsPackages);

        case 6:
          _context.next = 8;
          return _regenerator.default.awrap(_ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync());

        case 8:
          return _context.abrupt("return", _context.sent);

        case 9:
        case "end":
          return _context.stop();
      }
    }
  });
}

function warmUpAsync(browserPackage) {
  return _regenerator.default.async(function warmUpAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (_ExpoWebBrowser.default.warmUpAsync) {
            _context2.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('WebBrowser', 'warmUpAsync');

        case 2:
          if (!(_reactNative.Platform.OS !== 'android')) {
            _context2.next = 6;
            break;
          }

          return _context2.abrupt("return", {});

        case 6:
          _context2.next = 8;
          return _regenerator.default.awrap(_ExpoWebBrowser.default.warmUpAsync(browserPackage));

        case 8:
          return _context2.abrupt("return", _context2.sent);

        case 9:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function mayInitWithUrlAsync(url, browserPackage) {
  return _regenerator.default.async(function mayInitWithUrlAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (_ExpoWebBrowser.default.mayInitWithUrlAsync) {
            _context3.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');

        case 2:
          if (!(_reactNative.Platform.OS !== 'android')) {
            _context3.next = 6;
            break;
          }

          return _context3.abrupt("return", {});

        case 6:
          _context3.next = 8;
          return _regenerator.default.awrap(_ExpoWebBrowser.default.mayInitWithUrlAsync(url, browserPackage));

        case 8:
          return _context3.abrupt("return", _context3.sent);

        case 9:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function coolDownAsync(browserPackage) {
  return _regenerator.default.async(function coolDownAsync$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          if (_ExpoWebBrowser.default.coolDownAsync) {
            _context4.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('WebBrowser', 'coolDownAsync');

        case 2:
          if (!(_reactNative.Platform.OS !== 'android')) {
            _context4.next = 6;
            break;
          }

          return _context4.abrupt("return", {});

        case 6:
          _context4.next = 8;
          return _regenerator.default.awrap(_ExpoWebBrowser.default.coolDownAsync(browserPackage));

        case 8:
          return _context4.abrupt("return", _context4.sent);

        case 9:
        case "end":
          return _context4.stop();
      }
    }
  });
}

function openBrowserAsync(url) {
  var browserParams,
      _args5 = arguments;
  return _regenerator.default.async(function openBrowserAsync$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          browserParams = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};

          if (_ExpoWebBrowser.default.openBrowserAsync) {
            _context5.next = 3;
            break;
          }

          throw new _core.UnavailabilityError('WebBrowser', 'openBrowserAsync');

        case 3:
          _context5.next = 5;
          return _regenerator.default.awrap(_ExpoWebBrowser.default.openBrowserAsync(url, browserParams));

        case 5:
          return _context5.abrupt("return", _context5.sent);

        case 6:
        case "end":
          return _context5.stop();
      }
    }
  });
}

function dismissBrowser() {
  if (!_ExpoWebBrowser.default.dismissBrowser) {
    throw new _core.UnavailabilityError('WebBrowser', 'dismissBrowser');
  }

  _ExpoWebBrowser.default.dismissBrowser();
}

function openAuthSessionAsync(url, redirectUrl) {
  return _regenerator.default.async(function openAuthSessionAsync$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          if (!_authSessionIsNativelySupported()) {
            _context6.next = 6;
            break;
          }

          if (_ExpoWebBrowser.default.openAuthSessionAsync) {
            _context6.next = 3;
            break;
          }

          throw new _core.UnavailabilityError('WebBrowser', 'openAuthSessionAsync');

        case 3:
          return _context6.abrupt("return", _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl));

        case 6:
          return _context6.abrupt("return", _openAuthSessionPolyfillAsync(url, redirectUrl));

        case 7:
        case "end":
          return _context6.stop();
      }
    }
  });
}

function dismissAuthSession() {
  if (_authSessionIsNativelySupported()) {
    if (!_ExpoWebBrowser.default.dismissAuthSession) {
      throw new _core.UnavailabilityError('WebBrowser', 'dismissAuthSession');
    }

    _ExpoWebBrowser.default.dismissAuthSession();
  } else {
    if (!_ExpoWebBrowser.default.dismissBrowser) {
      throw new _core.UnavailabilityError('WebBrowser', 'dismissAuthSession');
    }

    _ExpoWebBrowser.default.dismissBrowser();
  }
}

function _authSessionIsNativelySupported() {
  if (_reactNative.Platform.OS === 'android') {
    return false;
  }

  var versionNumber = parseInt(String(_reactNative.Platform.Version), 10);
  return versionNumber >= 11;
}

var _redirectHandler = null;
var _onWebBrowserCloseAndroid = null;

function _onAppStateChangeAndroid(state) {
  if (state === 'active' && _onWebBrowserCloseAndroid) {
    _onWebBrowserCloseAndroid();
  }
}

function _openBrowserAndWaitAndroidAsync(startUrl) {
  var appStateChangedToActive, result, _ref, type;

  return _regenerator.default.async(function _openBrowserAndWaitAndroidAsync$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          appStateChangedToActive = new Promise(function (resolve) {
            _onWebBrowserCloseAndroid = resolve;

            _reactNative.AppState.addEventListener('change', _onAppStateChangeAndroid);
          });
          result = {
            type: 'cancel'
          };
          _context7.next = 4;
          return _regenerator.default.awrap(openBrowserAsync(startUrl));

        case 4:
          _ref = _context7.sent;
          type = _ref.type;

          if (!(type === 'opened')) {
            _context7.next = 10;
            break;
          }

          _context7.next = 9;
          return _regenerator.default.awrap(appStateChangedToActive);

        case 9:
          result = {
            type: 'dismiss'
          };

        case 10:
          _reactNative.AppState.removeEventListener('change', _onAppStateChangeAndroid);

          _onWebBrowserCloseAndroid = null;
          return _context7.abrupt("return", result);

        case 13:
        case "end":
          return _context7.stop();
      }
    }
  });
}

function _openAuthSessionPolyfillAsync(startUrl, returnUrl) {
  return _regenerator.default.async(function _openAuthSessionPolyfillAsync$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          if (!_redirectHandler) {
            _context8.next = 2;
            break;
          }

          throw new Error("The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be");

        case 2:
          if (!_onWebBrowserCloseAndroid) {
            _context8.next = 4;
            break;
          }

          throw new Error("WebBrowser is already open, only one can be open at a time");

        case 4:
          _context8.prev = 4;

          if (!(_reactNative.Platform.OS === 'android')) {
            _context8.next = 11;
            break;
          }

          _context8.next = 8;
          return _regenerator.default.awrap(Promise.race([_openBrowserAndWaitAndroidAsync(startUrl), _waitForRedirectAsync(returnUrl)]));

        case 8:
          return _context8.abrupt("return", _context8.sent);

        case 11:
          _context8.next = 13;
          return _regenerator.default.awrap(Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]));

        case 13:
          return _context8.abrupt("return", _context8.sent);

        case 14:
          _context8.prev = 14;

          if (_ExpoWebBrowser.default.dismissBrowser) {
            _ExpoWebBrowser.default.dismissBrowser();
          }

          _stopWaitingForRedirect();

          return _context8.finish(14);

        case 18:
        case "end":
          return _context8.stop();
      }
    }
  }, null, null, [[4,, 14, 18]]);
}

function _stopWaitingForRedirect() {
  if (!_redirectHandler) {
    throw new Error("The WebBrowser auth session is in an invalid state with no redirect handler when one should be set");
  }

  _reactNative.Linking.removeEventListener('url', _redirectHandler);

  _redirectHandler = null;
}

function _waitForRedirectAsync(returnUrl) {
  return new Promise(function (resolve) {
    _redirectHandler = function _redirectHandler(event) {
      if (event.url.startsWith(returnUrl)) {
        resolve({
          url: event.url,
          type: 'success'
        });
      }
    };

    _reactNative.Linking.addEventListener('url', _redirectHandler);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,