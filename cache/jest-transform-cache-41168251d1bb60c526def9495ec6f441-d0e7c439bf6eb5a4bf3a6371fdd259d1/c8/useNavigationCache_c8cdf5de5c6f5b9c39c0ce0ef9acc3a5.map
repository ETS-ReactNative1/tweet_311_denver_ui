{"version":3,"sources":["useNavigationCache.tsx"],"names":["setOptions","emitter","parentNavigation","React","NavigationContext","cache","current","actions","router","CommonActions","previous","route","acc","emit","dispatch","action","payload","getState","navigation","source","key","helpers","dangerouslyGetParent","dangerouslyGetState","options","o","isFocused","state","index"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport NavigationContext from './NavigationContext';\n\nimport { NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends object\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends object\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const parentNavigation = React.useContext(NavigationContext);\n\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter, parentNavigation]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route, index) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-ignore\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dangerouslyGetParent: () => parentNavigation as any,\n          dangerouslyGetState: getState,\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions(o => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (index !== state.index) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]}