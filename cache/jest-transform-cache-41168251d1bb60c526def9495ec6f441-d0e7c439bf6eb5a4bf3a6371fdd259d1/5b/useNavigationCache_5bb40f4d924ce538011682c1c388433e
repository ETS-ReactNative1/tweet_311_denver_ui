85a77e258ed5b044f676dc1cc6e7f4c2
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty3 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useNavigationCache;

var React = _interopRequireWildcard(require("react"));

var _routers = require("@react-navigation/routers");

var _NavigationContext = _interopRequireDefault(require("./NavigationContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function useNavigationCache(_ref) {
  var state = _ref.state,
      getState = _ref.getState,
      navigation = _ref.navigation,
      _setOptions = _ref.setOptions,
      router = _ref.router,
      emitter = _ref.emitter;
  var parentNavigation = React.useContext(_NavigationContext.default);
  var cache = React.useMemo(function () {
    return {
      current: {}
    };
  }, [getState, navigation, _setOptions, router, emitter, parentNavigation]);

  var actions = _objectSpread({}, router.actionCreators, {}, _routers.CommonActions);

  cache.current = state.routes.reduce(function (acc, route, index) {
    var previous = cache.current[route.key];

    if (previous) {
      acc[route.key] = previous;
    } else {
      var emit = navigation.emit,
          rest = _objectWithoutProperties(navigation, ["emit"]);

      var dispatch = function dispatch(action) {
        var payload = typeof action === 'function' ? action(getState()) : action;
        navigation.dispatch(typeof payload === 'object' && payload != null ? _objectSpread({
          source: route.key
        }, payload) : payload);
      };

      var helpers = Object.keys(actions).reduce(function (acc, name) {
        acc[name] = function () {
          return dispatch(actions[name].apply(actions, arguments));
        };

        return acc;
      }, {});
      acc[route.key] = _objectSpread({}, rest, {}, helpers, {}, emitter.create(route.key), {
        dangerouslyGetParent: function dangerouslyGetParent() {
          return parentNavigation;
        },
        dangerouslyGetState: getState,
        dispatch: dispatch,
        setOptions: function setOptions(options) {
          return _setOptions(function (o) {
            return _objectSpread({}, o, (0, _defineProperty3.default)({}, route.key, _objectSpread({}, o[route.key], {}, options)));
          });
        },
        isFocused: function isFocused() {
          var state = getState();

          if (index !== state.index) {
            return false;
          }

          return navigation ? navigation.isFocused() : true;
        }
      });
    }

    return acc;
  }, {});
  return cache.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,