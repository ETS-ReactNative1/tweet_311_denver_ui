06bdf3bae97c554f58c0c124920dbe66
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _AppLoading = require("./AppLoading");

var ExponentAppLoadingManager = _reactNative.NativeModules.ExponentAppLoadingManager;

function finishedAsync() {
  return _regenerator.default.async(function finishedAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(ExponentAppLoadingManager && ExponentAppLoadingManager.finishedAsync)) {
            _context.next = 4;
            break;
          }

          _context.next = 3;
          return _regenerator.default.awrap(ExponentAppLoadingManager.finishedAsync());

        case 3:
          return _context.abrupt("return", _context.sent);

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
}

var RootErrorBoundary = function (_React$Component) {
  (0, _inherits2.default)(RootErrorBoundary, _React$Component);

  function RootErrorBoundary(props) {
    var _this;

    (0, _classCallCheck2.default)(this, RootErrorBoundary);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RootErrorBoundary).call(this, props));
    _this._appLoadingIsMounted = false;

    _this._subscribeToGlobalErrors = function () {
      _this._appLoadingIsMounted = true;
      var ErrorUtils = global.ErrorUtils;
      if (!ErrorUtils) return;
      var originalErrorHandler = ErrorUtils.getGlobalHandler();
      ErrorUtils.setGlobalHandler(function (error, isFatal) {
        if (_this._appLoadingIsMounted) {
          finishedAsync();

          if (isFatal) {
            _this.setState({
              error: error
            });
          }
        }

        originalErrorHandler(error, isFatal);
      });
    };

    _this._unsubscribeFromGlobalErrors = function () {
      _this._appLoadingIsMounted = false;
    };

    if (__DEV__) {
      (0, _AppLoading.getAppLoadingLifecycleEmitter)().once('componentDidMount', _this._subscribeToGlobalErrors);
      (0, _AppLoading.getAppLoadingLifecycleEmitter)().once('componentWillUnmount', _this._unsubscribeFromGlobalErrors);
    }

    _this.state = {
      error: null
    };
    return _this;
  }

  (0, _createClass2.default)(RootErrorBoundary, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error) {
      if (this._appLoadingIsMounted) {
        finishedAsync();
        this.setState({
          error: error
        });
      }

      console.error(error);
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.error) {
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.warningIcon
        }, "\u26A0\uFE0F"), _react.default.createElement(_reactNative.Text, {
          style: [styles.paragraph, {
            color: '#000'
          }]
        }, "A fatal error was encountered while rendering the root component."), _react.default.createElement(_reactNative.Text, {
          style: styles.paragraph
        }, "Review your application logs for more information, and reload the app when the issue is resolved. In production, your app would have crashed."));
      } else {
        return this.props.children;
      }
    }
  }]);
  return RootErrorBoundary;
}(_react.default.Component);

exports.default = RootErrorBoundary;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  paragraph: {
    marginBottom: 10,
    textAlign: 'center',
    marginHorizontal: 30,
    maxWidth: 350,
    fontSize: 15,
    color: '#888'
  },
  warningIcon: {
    fontSize: 40,
    marginBottom: 20
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYXVuY2gvUm9vdEVycm9yQm91bmRhcnkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7SUFFUSx5QixHQUE4QiwwQixDQUE5Qix5Qjs7QUFFUixTQUFlLGFBQWY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGdCQUNNLHlCQUF5QixJQUFJLHlCQUF5QixDQUFDLGFBRDdEO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUEsNENBRWlCLHlCQUF5QixDQUFDLGFBQTFCLEVBRmpCOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0lBY3FCLGlCOzs7QUFDbkIsNkJBQVksS0FBWixFQUF3QjtBQUFBOztBQUFBO0FBQ3RCLHVIQUFNLEtBQU47QUFrQkYsVUFBQSxvQkFBQSxHQUF1QixLQUF2Qjs7QUFFQSxVQUFBLHdCQUFBLEdBQTJCLFlBQUs7QUFDOUIsWUFBSyxvQkFBTCxHQUE0QixJQUE1QjtBQUdBLFVBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUF4QjtBQUVBLFVBQUksQ0FBQyxVQUFMLEVBQWlCO0FBRWpCLFVBQUksb0JBQW9CLEdBQUcsVUFBVSxDQUFDLGdCQUFYLEVBQTNCO0FBRUEsTUFBQSxVQUFVLENBQUMsZ0JBQVgsQ0FBNEIsVUFBQyxLQUFELEVBQVEsT0FBUixFQUFtQjtBQUM3QyxZQUFJLE1BQUssb0JBQVQsRUFBK0I7QUFDN0IsVUFBQSxhQUFhOztBQUViLGNBQUksT0FBSixFQUFhO0FBQ1gsa0JBQUssUUFBTCxDQUFjO0FBQUUsY0FBQSxLQUFLLEVBQUw7QUFBRixhQUFkO0FBQ0Q7QUFDRjs7QUFFRCxRQUFBLG9CQUFvQixDQUFDLEtBQUQsRUFBUSxPQUFSLENBQXBCO0FBQ0QsT0FWRDtBQVdELEtBckJEOztBQXVCQSxVQUFBLDRCQUFBLEdBQStCLFlBQUs7QUFJbEMsWUFBSyxvQkFBTCxHQUE0QixLQUE1QjtBQUNELEtBTEQ7O0FBdENFLFFBQUksT0FBSixFQUFhO0FBQ1gsdURBQWdDLElBQWhDLENBQXFDLG1CQUFyQyxFQUEwRCxNQUFLLHdCQUEvRDtBQUNBLHVEQUFnQyxJQUFoQyxDQUNFLHNCQURGLEVBRUUsTUFBSyw0QkFGUDtBQUlEOztBQUVELFVBQUssS0FBTCxHQUFhO0FBQ1gsTUFBQSxLQUFLLEVBQUU7QUFESSxLQUFiO0FBZHNCO0FBaUJ2Qjs7OztzQ0FtQ2lCLEssRUFBWTtBQUM1QixVQUFJLEtBQUssb0JBQVQsRUFBK0I7QUFDN0IsUUFBQSxhQUFhO0FBRWIsYUFBSyxRQUFMLENBQWM7QUFBRSxVQUFBLEtBQUssRUFBTDtBQUFGLFNBQWQ7QUFDRDs7QUFFRCxNQUFBLE9BQU8sQ0FBQyxLQUFSLENBQWMsS0FBZDtBQUNEOzs7NkJBRUs7QUFDSixVQUFJLEtBQUssS0FBTCxDQUFXLEtBQWYsRUFBc0I7QUFDcEIsZUFDRSw2QkFBQyxpQkFBRDtBQUFNLFVBQUEsS0FBSyxFQUFFLE1BQU0sQ0FBQztBQUFwQixXQUNFLDZCQUFDLGlCQUFEO0FBQU0sVUFBQSxLQUFLLEVBQUUsTUFBTSxDQUFDO0FBQXBCLDBCQURGLEVBRUUsNkJBQUMsaUJBQUQ7QUFBTSxVQUFBLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFSLEVBQW1CO0FBQUUsWUFBQSxLQUFLLEVBQUU7QUFBVCxXQUFuQjtBQUFiLCtFQUZGLEVBS0UsNkJBQUMsaUJBQUQ7QUFBTSxVQUFBLEtBQUssRUFBRSxNQUFNLENBQUM7QUFBcEIsMkpBTEYsQ0FERjtBQVlELE9BYkQsTUFhTztBQUNMLGVBQU8sS0FBSyxLQUFMLENBQVcsUUFBbEI7QUFDRDtBQUNGOzs7RUFoRjRDLGVBQU0sUzs7OztBQW1GckQsSUFBTSxNQUFNLEdBQUcsd0JBQVcsTUFBWCxDQUFrQjtBQUMvQixFQUFBLFNBQVMsRUFBRTtBQUNULElBQUEsSUFBSSxFQUFFLENBREc7QUFFVCxJQUFBLFVBQVUsRUFBRSxRQUZIO0FBR1QsSUFBQSxjQUFjLEVBQUU7QUFIUCxHQURvQjtBQU0vQixFQUFBLFNBQVMsRUFBRTtBQUNULElBQUEsWUFBWSxFQUFFLEVBREw7QUFFVCxJQUFBLFNBQVMsRUFBRSxRQUZGO0FBR1QsSUFBQSxnQkFBZ0IsRUFBRSxFQUhUO0FBSVQsSUFBQSxRQUFRLEVBQUUsR0FKRDtBQUtULElBQUEsUUFBUSxFQUFFLEVBTEQ7QUFNVCxJQUFBLEtBQUssRUFBRTtBQU5FLEdBTm9CO0FBYy9CLEVBQUEsV0FBVyxFQUFFO0FBQ1gsSUFBQSxRQUFRLEVBQUUsRUFEQztBQUVYLElBQUEsWUFBWSxFQUFFO0FBRkg7QUFka0IsQ0FBbEIsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOYXRpdmVNb2R1bGVzLCBTdHlsZVNoZWV0LCBUZXh0LCBWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IHsgZ2V0QXBwTG9hZGluZ0xpZmVjeWNsZUVtaXR0ZXIgfSBmcm9tICcuL0FwcExvYWRpbmcnO1xuXG5jb25zdCB7IEV4cG9uZW50QXBwTG9hZGluZ01hbmFnZXIgfSA9IE5hdGl2ZU1vZHVsZXM7XG5cbmFzeW5jIGZ1bmN0aW9uIGZpbmlzaGVkQXN5bmMoKTogUHJvbWlzZTxhbnk+IHtcbiAgaWYgKEV4cG9uZW50QXBwTG9hZGluZ01hbmFnZXIgJiYgRXhwb25lbnRBcHBMb2FkaW5nTWFuYWdlci5maW5pc2hlZEFzeW5jKSB7XG4gICAgcmV0dXJuIGF3YWl0IEV4cG9uZW50QXBwTG9hZGluZ01hbmFnZXIuZmluaXNoZWRBc3luYygpO1xuICB9XG59XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG59O1xuXG50eXBlIFN0YXRlID0ge1xuICBlcnJvcjogRXJyb3IgfCBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9vdEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIC8vIEluIHByb2R1Y3Rpb24gdGhlIGFwcCB3aWxsIGp1c3QgaGFyZCBjcmFzaCBvbiBlcnJvcnMsIHVubGVzcyB0aGUgZGV2ZWxvcGVyIGRlY2lkZXMgdG8gaGFuZGxlXG4gICAgLy8gdGhlbSBieSBvdmVycmlkaW5nIHRoZSBnbG9iYWwgZXJyb3IgaGFuZGxlciBhbmQgc3dhbGxvd2luZyB0aGUgZXJyb3IsIGluIHdoaWNoIGNhc2UgdGhleSBhcmVcbiAgICAvLyByZXNwb25zaWJsZSBmb3IgZGV0ZXJtaW5pbmcgaG93IHRvIHJlY292ZXIgZnJvbSB0aGlzIHN0YXRlLlxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBnZXRBcHBMb2FkaW5nTGlmZWN5Y2xlRW1pdHRlcigpLm9uY2UoJ2NvbXBvbmVudERpZE1vdW50JywgdGhpcy5fc3Vic2NyaWJlVG9HbG9iYWxFcnJvcnMpO1xuICAgICAgZ2V0QXBwTG9hZGluZ0xpZmVjeWNsZUVtaXR0ZXIoKS5vbmNlKFxuICAgICAgICAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgICAgICB0aGlzLl91bnN1YnNjcmliZUZyb21HbG9iYWxFcnJvcnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVycm9yOiBudWxsLFxuICAgIH07XG4gIH1cblxuICBfYXBwTG9hZGluZ0lzTW91bnRlZCA9IGZhbHNlO1xuXG4gIF9zdWJzY3JpYmVUb0dsb2JhbEVycm9ycyA9ICgpID0+IHtcbiAgICB0aGlzLl9hcHBMb2FkaW5nSXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIC8vIEJhY29uOiBUaGlzIGlzbid0IHN1cHBvcnRlZCBpbiBSTldlYiB5ZXRcbiAgICBsZXQgRXJyb3JVdGlscyA9IGdsb2JhbC5FcnJvclV0aWxzO1xuXG4gICAgaWYgKCFFcnJvclV0aWxzKSByZXR1cm47XG5cbiAgICBsZXQgb3JpZ2luYWxFcnJvckhhbmRsZXIgPSBFcnJvclV0aWxzLmdldEdsb2JhbEhhbmRsZXIoKTtcblxuICAgIEVycm9yVXRpbHMuc2V0R2xvYmFsSGFuZGxlcigoZXJyb3IsIGlzRmF0YWwpID0+IHtcbiAgICAgIGlmICh0aGlzLl9hcHBMb2FkaW5nSXNNb3VudGVkKSB7XG4gICAgICAgIGZpbmlzaGVkQXN5bmMoKTtcblxuICAgICAgICBpZiAoaXNGYXRhbCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvciB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvcmlnaW5hbEVycm9ySGFuZGxlcihlcnJvciwgaXNGYXRhbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Vuc3Vic2NyaWJlRnJvbUdsb2JhbEVycm9ycyA9ICgpID0+IHtcbiAgICAvLyBXZSBkb24ndCByZW1vdmUgdGhlIGdsb2JhbCBlcnJvciBoYW5kbGVyIHRoYXQgd2Ugc2V0IGhlcmUgYmVjYXVzZSBpdCBpcyBjb25jZWl2YWJsZSB0aGF0IHRoZVxuICAgIC8vIHVzZXIgbWF5IGFkZCBlcnJvciBoYW5kbGVycyAqYWZ0ZXIqIHdlIHN1YnNjcmliZSwgYW5kIHdlIGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhvc2UsIHNvXG4gICAgLy8gaW5zdGVhZCB3ZSBqdXN0IGdhdGUgdGhlIGNhbGxcbiAgICB0aGlzLl9hcHBMb2FkaW5nSXNNb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgLy8gVGVzdCB0aGlzIGJ5IGFkZGluZyBgdGhyb3cgbmV3IEVycm9yKCdleGFtcGxlJylgIHRvIHlvdXIgcm9vdCBjb21wb25lbnRcbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3I6IEVycm9yKSB7XG4gICAgaWYgKHRoaXMuX2FwcExvYWRpbmdJc01vdW50ZWQpIHtcbiAgICAgIGZpbmlzaGVkQXN5bmMoKTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yIH0pO1xuICAgIH1cblxuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmVycm9yKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy53YXJuaW5nSWNvbn0+4pqg77iPPC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLnBhcmFncmFwaCwgeyBjb2xvcjogJyMwMDAnIH1dfT5cbiAgICAgICAgICAgIEEgZmF0YWwgZXJyb3Igd2FzIGVuY291bnRlcmVkIHdoaWxlIHJlbmRlcmluZyB0aGUgcm9vdCBjb21wb25lbnQuXG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMucGFyYWdyYXBofT5cbiAgICAgICAgICAgIFJldmlldyB5b3VyIGFwcGxpY2F0aW9uIGxvZ3MgZm9yIG1vcmUgaW5mb3JtYXRpb24sIGFuZCByZWxvYWQgdGhlIGFwcCB3aGVuIHRoZSBpc3N1ZSBpc1xuICAgICAgICAgICAgcmVzb2x2ZWQuIEluIHByb2R1Y3Rpb24sIHlvdXIgYXBwIHdvdWxkIGhhdmUgY3Jhc2hlZC5cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgIDwvVmlldz5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGZsZXg6IDEsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICB9LFxuICBwYXJhZ3JhcGg6IHtcbiAgICBtYXJnaW5Cb3R0b206IDEwLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgbWFyZ2luSG9yaXpvbnRhbDogMzAsXG4gICAgbWF4V2lkdGg6IDM1MCxcbiAgICBmb250U2l6ZTogMTUsXG4gICAgY29sb3I6ICcjODg4JyxcbiAgfSxcbiAgd2FybmluZ0ljb246IHtcbiAgICBmb250U2l6ZTogNDAsXG4gICAgbWFyZ2luQm90dG9tOiAyMCxcbiAgfSxcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==