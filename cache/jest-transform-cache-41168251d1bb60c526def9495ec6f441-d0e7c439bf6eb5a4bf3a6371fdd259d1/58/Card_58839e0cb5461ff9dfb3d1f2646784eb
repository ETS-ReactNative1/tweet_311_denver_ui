7290ca9dd6522498d3272ec6bdfcbd14
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _color = _interopRequireDefault(require("color"));

var _GestureHandlerRefContext = _interopRequireDefault(require("../../utils/GestureHandlerRefContext"));

var _CardAnimationContext = _interopRequireDefault(require("../../utils/CardAnimationContext"));

var _getDistanceForDirection = _interopRequireDefault(require("../../utils/getDistanceForDirection"));

var _getInvertedMultiplier = _interopRequireDefault(require("../../utils/getInvertedMultiplier"));

var _memoize = _interopRequireDefault(require("../../utils/memoize"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var GESTURE_VELOCITY_IMPACT = 0.3;
var TRUE = 1;
var FALSE = 0;
var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;
var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;
var useNativeDriver = _reactNative.Platform.OS !== 'web';

var Card = function (_React$Component) {
  (0, _inherits2.default)(Card, _React$Component);

  function Card() {
    var _this;

    (0, _classCallCheck2.default)(this, Card);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Card).apply(this, arguments));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "isClosing", new _reactNative.Animated.Value(FALSE));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "inverted", new _reactNative.Animated.Value((0, _getInvertedMultiplier.default)(_this.props.gestureDirection)));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "layout", {
      width: new _reactNative.Animated.Value(_this.props.layout.width),
      height: new _reactNative.Animated.Value(_this.props.layout.height)
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "isSwiping", new _reactNative.Animated.Value(FALSE));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "interactionHandle", void 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "pendingGestureCallback", void 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "animate", function (_ref) {
      var closing = _ref.closing,
          velocity = _ref.velocity;
      var _this$props2 = _this.props,
          gesture = _this$props2.gesture,
          transitionSpec = _this$props2.transitionSpec,
          onOpen = _this$props2.onOpen,
          onClose = _this$props2.onClose,
          onTransitionStart = _this$props2.onTransitionStart;

      var toValue = _this.getAnimateToValue(_objectSpread({}, _this.props, {
        closing: closing
      }));

      var spec = closing ? transitionSpec.close : transitionSpec.open;
      var animation = spec.animation === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;

      _this.setPointerEventsEnabled(!closing);

      _this.handleStartInteraction();

      clearTimeout(_this.pendingGestureCallback);
      onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({
        closing: closing
      });
      animation(gesture, _objectSpread({}, spec.config, {
        velocity: velocity,
        toValue: toValue,
        useNativeDriver: useNativeDriver,
        isInteraction: false
      })).start(function (_ref2) {
        var finished = _ref2.finished;

        _this.handleEndInteraction();

        clearTimeout(_this.pendingGestureCallback);

        if (finished) {
          if (closing) {
            onClose();
          } else {
            onOpen();
          }
        }
      });
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "getAnimateToValue", function (_ref3) {
      var closing = _ref3.closing,
          layout = _ref3.layout,
          gestureDirection = _ref3.gestureDirection;

      if (!closing) {
        return 0;
      }

      return (0, _getDistanceForDirection.default)(layout, gestureDirection);
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "setPointerEventsEnabled", function (enabled) {
      var _this$contentRef$curr;

      var pointerEvents = enabled ? 'box-none' : 'none';
      (_this$contentRef$curr = _this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({
        pointerEvents: pointerEvents
      });
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleStartInteraction", function () {
      if (_this.interactionHandle === undefined) {
        _this.interactionHandle = _reactNative.InteractionManager.createInteractionHandle();
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleEndInteraction", function () {
      if (_this.interactionHandle !== undefined) {
        _reactNative.InteractionManager.clearInteractionHandle(_this.interactionHandle);

        _this.interactionHandle = undefined;
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleGestureStateChange", function (_ref4) {
      var nativeEvent = _ref4.nativeEvent;
      var _this$props3 = _this.props,
          layout = _this$props3.layout,
          onClose = _this$props3.onClose,
          onGestureBegin = _this$props3.onGestureBegin,
          onGestureCanceled = _this$props3.onGestureCanceled,
          onGestureEnd = _this$props3.onGestureEnd,
          gestureDirection = _this$props3.gestureDirection,
          gestureVelocityImpact = _this$props3.gestureVelocityImpact;

      switch (nativeEvent.state) {
        case _reactNativeGestureHandler.State.BEGAN:
          _this.isSwiping.setValue(TRUE);

          _this.handleStartInteraction();

          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();
          break;

        case _reactNativeGestureHandler.State.CANCELLED:
          _this.isSwiping.setValue(FALSE);

          _this.handleEndInteraction();

          onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();
          break;

        case _reactNativeGestureHandler.State.END:
          {
            _this.isSwiping.setValue(FALSE);

            var distance;
            var translation;
            var velocity;

            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {
              distance = layout.height;
              translation = nativeEvent.translationY;
              velocity = nativeEvent.velocityY;
            } else {
              distance = layout.width;
              translation = nativeEvent.translationX;
              velocity = nativeEvent.velocityX;
            }

            var closing = Math.abs(translation + velocity * gestureVelocityImpact) > distance / 2 ? velocity !== 0 || translation !== 0 : false;

            _this.animate({
              closing: closing,
              velocity: velocity
            });

            if (closing) {
              _this.pendingGestureCallback = setTimeout(onClose, 32);
            }

            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();
            break;
          }
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "getInterpolatedStyle", (0, _memoize.default)(function (styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {
      return styleInterpolator({
        index: index,
        current: {
          progress: current
        },
        next: next && {
          progress: next
        },
        closing: _this.isClosing,
        swiping: _this.isSwiping,
        inverted: _this.inverted,
        layouts: {
          screen: layout
        },
        insets: {
          top: insetTop,
          right: insetRight,
          bottom: insetBottom,
          left: insetLeft
        }
      });
    }));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "getCardAnimationContext", (0, _memoize.default)(function (index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {
      return {
        index: index,
        current: {
          progress: current
        },
        next: next && {
          progress: next
        },
        closing: _this.isClosing,
        swiping: _this.isSwiping,
        inverted: _this.inverted,
        layouts: {
          screen: layout
        },
        insets: {
          top: insetTop,
          right: insetRight,
          bottom: insetBottom,
          left: insetLeft
        }
      };
    }));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "gestureRef", React.createRef());

    _defineProperty((0, _assertThisInitialized2.default)(_this), "contentRef", React.createRef());

    return _this;
  }

  (0, _createClass2.default)(Card, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.animate({
        closing: this.props.closing
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props4 = this.props,
          layout = _this$props4.layout,
          gestureDirection = _this$props4.gestureDirection,
          closing = _this$props4.closing;
      var width = layout.width,
          height = layout.height;

      if (width !== prevProps.layout.width) {
        this.layout.width.setValue(width);
      }

      if (height !== prevProps.layout.height) {
        this.layout.height.setValue(height);
      }

      if (gestureDirection !== prevProps.gestureDirection) {
        this.inverted.setValue((0, _getInvertedMultiplier.default)(gestureDirection));
      }

      if (this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)) {
        this.animate({
          closing: closing
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.handleEndInteraction();
    }
  }, {
    key: "gestureActivationCriteria",
    value: function gestureActivationCriteria() {
      var _this$props5 = this.props,
          layout = _this$props5.layout,
          gestureDirection = _this$props5.gestureDirection,
          gestureResponseDistance = _this$props5.gestureResponseDistance;
      var distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;

      if (gestureDirection === 'vertical') {
        return {
          maxDeltaX: 15,
          minOffsetY: 5,
          hitSlop: {
            bottom: -layout.height + distance
          }
        };
      } else if (gestureDirection === 'vertical-inverted') {
        return {
          maxDeltaX: 15,
          minOffsetY: -5,
          hitSlop: {
            top: -layout.height + distance
          }
        };
      } else {
        var hitSlop = -layout.width + distance;
        var invertedMultiplier = (0, _getInvertedMultiplier.default)(gestureDirection);

        if (invertedMultiplier === 1) {
          return {
            minOffsetX: 5,
            maxDeltaY: 20,
            hitSlop: {
              right: hitSlop
            }
          };
        } else {
          return {
            minOffsetX: -5,
            maxDeltaY: 20,
            hitSlop: {
              left: hitSlop
            }
          };
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          styleInterpolator = _this$props.styleInterpolator,
          index = _this$props.index,
          current = _this$props.current,
          gesture = _this$props.gesture,
          next = _this$props.next,
          layout = _this$props.layout,
          insets = _this$props.insets,
          overlayEnabled = _this$props.overlayEnabled,
          shadowEnabled = _this$props.shadowEnabled,
          gestureEnabled = _this$props.gestureEnabled,
          gestureDirection = _this$props.gestureDirection,
          children = _this$props.children,
          customContainerStyle = _this$props.containerStyle,
          contentStyle = _this$props.contentStyle,
          rest = _objectWithoutProperties(_this$props, ["styleInterpolator", "index", "current", "gesture", "next", "layout", "insets", "overlayEnabled", "shadowEnabled", "gestureEnabled", "gestureDirection", "children", "containerStyle", "contentStyle"]);

      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);
      var animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);
      var containerStyle = interpolatedStyle.containerStyle,
          cardStyle = interpolatedStyle.cardStyle,
          overlayStyle = interpolatedStyle.overlayStyle,
          shadowStyle = interpolatedStyle.shadowStyle;
      var handleGestureEvent = gestureEnabled ? _reactNative.Animated.event([{
        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {
          translationY: gesture
        } : {
          translationX: gesture
        }
      }], {
        useNativeDriver: useNativeDriver
      }) : undefined;

      var _reactNative$StyleShe = _reactNative.StyleSheet.flatten(contentStyle || {}),
          backgroundColor = _reactNative$StyleShe.backgroundColor;

      var isTransparent = backgroundColor ? (0, _color.default)(backgroundColor).alpha() === 0 : false;
      return React.createElement(_reactNative.View, _extends({
        pointerEvents: "box-none"
      }, rest), overlayEnabled && overlayStyle ? React.createElement(_reactNative.Animated.View, {
        pointerEvents: "none",
        style: [styles.overlay, overlayStyle]
      }) : null, React.createElement(_reactNative.Animated.View, {
        style: [styles.container, containerStyle, customContainerStyle],
        pointerEvents: "box-none"
      }, React.createElement(_reactNativeGestureHandler.PanGestureHandler, _extends({
        ref: this.gestureRef,
        enabled: layout.width !== 0 && gestureEnabled,
        onGestureEvent: handleGestureEvent,
        onHandlerStateChange: this.handleGestureStateChange
      }, this.gestureActivationCriteria()), React.createElement(_reactNative.Animated.View, {
        style: [styles.container, cardStyle]
      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(_reactNative.Animated.View, {
        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], shadowStyle],
        pointerEvents: "none"
      }) : null, React.createElement(_reactNative.View, {
        ref: this.contentRef,
        style: [styles.content, contentStyle]
      }, React.createElement(_GestureHandlerRefContext.default.Provider, {
        value: this.gestureRef
      }, React.createElement(_CardAnimationContext.default.Provider, {
        value: animationContext
      }, children)))))));
    }
  }]);
  return Card;
}(React.Component);

exports.default = Card;

_defineProperty(Card, "defaultProps", {
  overlayEnabled: _reactNative.Platform.OS !== 'ios',
  shadowEnabled: true,
  gestureEnabled: true,
  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT
});

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  content: {
    flex: 1,
    overflow: 'hidden'
  },
  overlay: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {
    backgroundColor: '#000'
  }),
  shadow: {
    position: 'absolute',
    backgroundColor: '#fff',
    shadowRadius: 5,
    shadowColor: '#000',
    shadowOpacity: 0.3
  },
  shadowHorizontal: {
    top: 0,
    bottom: 0,
    width: 3,
    shadowOffset: {
      width: -1,
      height: 1
    }
  },
  shadowLeft: {
    left: 0
  },
  shadowRight: {
    right: 0
  },
  shadowVertical: {
    left: 0,
    right: 0,
    height: 3,
    shadowOffset: {
      width: 1,
      height: -1
    }
  },
  shadowTop: {
    top: 0
  },
  shadowBottom: {
    bottom: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,