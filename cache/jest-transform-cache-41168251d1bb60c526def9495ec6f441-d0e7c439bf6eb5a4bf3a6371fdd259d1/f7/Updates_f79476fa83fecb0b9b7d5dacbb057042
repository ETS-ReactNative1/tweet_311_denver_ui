98d15c3a8907387d7f15487fd66c859f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reload = reload;
exports.reloadFromCache = reloadFromCache;
exports.checkForUpdateAsync = checkForUpdateAsync;
exports.fetchUpdateAsync = fetchUpdateAsync;
exports.clearUpdateCacheExperimentalAsync = clearUpdateCacheExperimentalAsync;
exports.addListener = addListener;
exports.EventType = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _core = require("@unimodules/core");

var _fbemitter = require("fbemitter");

var _ExponentUpdates = _interopRequireDefault(require("./ExponentUpdates"));

function reload() {
  return _regenerator.default.async(function reload$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _regenerator.default.awrap(_ExponentUpdates.default.reload());

        case 2:
        case "end":
          return _context.stop();
      }
    }
  });
}

function reloadFromCache() {
  return _regenerator.default.async(function reloadFromCache$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return _regenerator.default.awrap(_ExponentUpdates.default.reloadFromCache());

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function checkForUpdateAsync() {
  var result;
  return _regenerator.default.async(function checkForUpdateAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (_ExponentUpdates.default.checkForUpdateAsync) {
            _context3.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('Updates', 'checkForUpdateAsync');

        case 2:
          _context3.next = 4;
          return _regenerator.default.awrap(_ExponentUpdates.default.checkForUpdateAsync());

        case 4:
          result = _context3.sent;

          if (result) {
            _context3.next = 7;
            break;
          }

          return _context3.abrupt("return", {
            isAvailable: false
          });

        case 7:
          return _context3.abrupt("return", {
            isAvailable: true,
            manifest: typeof result === 'string' ? JSON.parse(result) : result
          });

        case 8:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function fetchUpdateAsync() {
  var _ref,
      eventListener,
      subscription,
      result,
      _args4 = arguments;

  return _regenerator.default.async(function fetchUpdateAsync$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _ref = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, eventListener = _ref.eventListener;

          if (_ExponentUpdates.default.fetchUpdateAsync) {
            _context4.next = 3;
            break;
          }

          throw new _core.UnavailabilityError('Updates', 'fetchUpdateAsync');

        case 3:
          if (eventListener && typeof eventListener === 'function') {
            subscription = addListener(eventListener);
          }

          _context4.prev = 4;
          _context4.next = 7;
          return _regenerator.default.awrap(_ExponentUpdates.default.fetchUpdateAsync());

        case 7:
          result = _context4.sent;

        case 8:
          _context4.prev = 8;
          subscription && subscription.remove();
          return _context4.finish(8);

        case 11:
          if (result) {
            _context4.next = 13;
            break;
          }

          return _context4.abrupt("return", {
            isNew: false
          });

        case 13:
          return _context4.abrupt("return", {
            isNew: true,
            manifest: typeof result === 'string' ? JSON.parse(result) : result
          });

        case 14:
        case "end":
          return _context4.stop();
      }
    }
  }, null, null, [[4,, 8, 11]]);
}

function clearUpdateCacheExperimentalAsync(abiVersion) {
  return _regenerator.default.async(function clearUpdateCacheExperimentalAsync$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          if (_ExponentUpdates.default.clearUpdateCacheAsync) {
            _context5.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('Updates', 'clearUpdateCacheAsync');

        case 2:
          return _context5.abrupt("return", _ExponentUpdates.default.clearUpdateCacheAsync(abiVersion));

        case 3:
        case "end":
          return _context5.stop();
      }
    }
  });
}

var _emitter;

function _getEmitter() {
  if (!_emitter) {
    _emitter = new _fbemitter.EventEmitter();

    _core.RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);
  }

  return _emitter;
}

function _emitEvent(params) {
  var newParams = params;

  if (typeof params === 'string') {
    newParams = JSON.parse(params);
  }

  if (newParams.manifestString) {
    newParams.manifest = JSON.parse(newParams.manifestString);
    delete newParams.manifestString;
  }

  if (!_emitter) {
    throw new Error("EventEmitter must be initialized to use from its listener");
  }

  _emitter.emit('Exponent.updatesEvent', newParams);
}

function addListener(listener) {
  var emitter = _getEmitter();

  return emitter.addListener('Exponent.updatesEvent', listener);
}

var EventType = {
  DOWNLOAD_STARTED: 'downloadStart',
  DOWNLOAD_PROGRESS: 'downloadProgress',
  DOWNLOAD_FINISHED: 'downloadFinished',
  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',
  ERROR: 'error'
};
exports.EventType = EventType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,