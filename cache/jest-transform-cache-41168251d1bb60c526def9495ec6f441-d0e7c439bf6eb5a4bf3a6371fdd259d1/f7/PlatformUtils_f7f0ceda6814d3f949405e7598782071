9d0229f235e0fcf305fae75222f448d5
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getManifest = getManifest;
exports.downloadAsync = downloadAsync;
exports.manifestBaseUrl = exports.IS_MANAGED_ENV = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _blueimpMd = _interopRequireDefault(require("blueimp-md5"));

var _expoConstants = _interopRequireDefault(require("expo-constants"));

var FileSystem = _interopRequireWildcard(require("expo-file-system"));

var _AssetUris = require("./AssetUris");

var IS_MANAGED_ENV = !!_expoConstants.default.appOwnership;
exports.IS_MANAGED_ENV = IS_MANAGED_ENV;

function getManifest() {
  return _expoConstants.default.manifest || {};
}

var manifestBaseUrl = _expoConstants.default.experienceUrl ? (0, _AssetUris.getManifestBaseUrl)(_expoConstants.default.experienceUrl) : null;
exports.manifestBaseUrl = manifestBaseUrl;

function downloadAsync(uri, hash, type, name) {
  return _regenerator.default.async(function downloadAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!IS_MANAGED_ENV) {
            _context.next = 2;
            break;
          }

          return _context.abrupt("return", _downloadAsyncManagedEnv(uri, hash, type, name));

        case 2:
          return _context.abrupt("return", _downloadAsyncUnmanagedEnv(uri, hash, type));

        case 3:
        case "end":
          return _context.stop();
      }
    }
  });
}

function _downloadAsyncManagedEnv(uri, hash, type, name) {
  var cacheFileId, localUri, _ref, exists, md5, _ref2;

  return _regenerator.default.async(function _downloadAsyncManagedEnv$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          cacheFileId = hash || (0, _blueimpMd.default)(uri);
          localUri = FileSystem.cacheDirectory + "ExponentAsset-" + cacheFileId + "." + type;
          _context2.next = 4;
          return _regenerator.default.awrap(FileSystem.getInfoAsync(localUri, {
            md5: true
          }));

        case 4:
          _ref = _context2.sent;
          exists = _ref.exists;
          md5 = _ref.md5;

          if (!(!exists || hash !== null && md5 !== hash)) {
            _context2.next = 14;
            break;
          }

          _context2.next = 10;
          return _regenerator.default.awrap(FileSystem.downloadAsync(uri, localUri, {
            md5: true
          }));

        case 10:
          _ref2 = _context2.sent;
          md5 = _ref2.md5;

          if (!(hash !== null && md5 !== hash)) {
            _context2.next = 14;
            break;
          }

          throw new Error("Downloaded file for asset '" + name + "." + type + "' " + ("Located at " + uri + " ") + "failed MD5 integrity check");

        case 14:
          return _context2.abrupt("return", localUri);

        case 15:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function _downloadAsyncUnmanagedEnv(uri, hash, type) {
  var cacheFileId, localUri;
  return _regenerator.default.async(function _downloadAsyncUnmanagedEnv$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (!uri.startsWith('file://')) {
            _context3.next = 2;
            break;
          }

          return _context3.abrupt("return", uri);

        case 2:
          cacheFileId = hash || (0, _blueimpMd.default)(uri);
          localUri = FileSystem.cacheDirectory + "ExponentAsset-" + cacheFileId + "." + type;
          _context3.next = 6;
          return _regenerator.default.awrap(FileSystem.downloadAsync(uri, localUri));

        case 6:
          return _context3.abrupt("return", localUri);

        case 7:
        case "end":
          return _context3.stop();
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9QbGF0Zm9ybVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFFTyxJQUFNLGNBQWMsR0FBRyxDQUFDLENBQUMsdUJBQVUsWUFBbkM7OztBQUVELFNBQVUsV0FBVixHQUFxQjtBQUN6QixTQUFPLHVCQUFVLFFBQVYsSUFBc0IsRUFBN0I7QUFDRDs7QUFHTSxJQUFNLGVBQWUsR0FBRyx1QkFBVSxhQUFWLEdBQzNCLG1DQUFtQix1QkFBVSxhQUE3QixDQUQyQixHQUUzQixJQUZHOzs7QUFJQSxTQUFlLGFBQWYsQ0FBNkIsR0FBN0IsRUFBa0MsSUFBbEMsRUFBd0MsSUFBeEMsRUFBOEMsSUFBOUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBQ0QsY0FEQztBQUFBO0FBQUE7QUFBQTs7QUFBQSwyQ0FFSSx3QkFBd0IsQ0FBQyxHQUFELEVBQU0sSUFBTixFQUFZLElBQVosRUFBa0IsSUFBbEIsQ0FGNUI7O0FBQUE7QUFBQSwyQ0FLRSwwQkFBMEIsQ0FBQyxHQUFELEVBQU0sSUFBTixFQUFZLElBQVosQ0FMNUI7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBUVAsU0FBZSx3QkFBZixDQUF3QyxHQUF4QyxFQUE2QyxJQUE3QyxFQUFtRCxJQUFuRCxFQUF5RCxJQUF6RDtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ1EsVUFBQSxXQURSLEdBQ3NCLElBQUksSUFBSSx3QkFBVyxHQUFYLENBRDlCO0FBRVEsVUFBQSxRQUZSLEdBRXNCLFVBQVUsQ0FBQyxjQUZqQyxzQkFFZ0UsV0FGaEUsU0FFK0UsSUFGL0U7QUFBQTtBQUFBLDRDQUc4QixVQUFVLENBQUMsWUFBWCxDQUF3QixRQUF4QixFQUFrQztBQUM1RCxZQUFBLEdBQUcsRUFBRTtBQUR1RCxXQUFsQyxDQUg5Qjs7QUFBQTtBQUFBO0FBR1EsVUFBQSxNQUhSLFFBR1EsTUFIUjtBQUdnQixVQUFBLEdBSGhCLFFBR2dCLEdBSGhCOztBQUFBLGdCQU1NLENBQUMsTUFBRCxJQUFZLElBQUksS0FBSyxJQUFULElBQWlCLEdBQUcsS0FBSyxJQU4zQztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBLDRDQU9xQixVQUFVLENBQUMsYUFBWCxDQUF5QixHQUF6QixFQUE4QixRQUE5QixFQUF3QztBQUN2RCxZQUFBLEdBQUcsRUFBRTtBQURrRCxXQUF4QyxDQVByQjs7QUFBQTtBQUFBO0FBT08sVUFBQSxHQVBQLFNBT08sR0FQUDs7QUFBQSxnQkFVUSxJQUFJLEtBQUssSUFBVCxJQUFpQixHQUFHLEtBQUssSUFWakM7QUFBQTtBQUFBO0FBQUE7O0FBQUEsZ0JBV1ksSUFBSSxLQUFKLENBQ0osZ0NBQThCLElBQTlCLFNBQXNDLElBQXRDLDJCQUNnQixHQURoQixzQ0FESSxDQVhaOztBQUFBO0FBQUEsNENBa0JTLFFBbEJUOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQXFCQSxTQUFlLDBCQUFmLENBQTBDLEdBQTFDLEVBQStDLElBQS9DLEVBQXFELElBQXJEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBRU0sR0FBRyxDQUFDLFVBQUosQ0FBZSxTQUFmLENBRk47QUFBQTtBQUFBO0FBQUE7O0FBQUEsNENBR1csR0FIWDs7QUFBQTtBQU1RLFVBQUEsV0FOUixHQU1zQixJQUFJLElBQUksd0JBQVcsR0FBWCxDQU45QjtBQU9RLFVBQUEsUUFQUixHQU9zQixVQUFVLENBQUMsY0FQakMsc0JBT2dFLFdBUGhFLFNBTytFLElBUC9FO0FBQUE7QUFBQSw0Q0FVUSxVQUFVLENBQUMsYUFBWCxDQUF5QixHQUF6QixFQUE4QixRQUE5QixDQVZSOztBQUFBO0FBQUEsNENBV1MsUUFYVDs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb21wdXRlTWQ1IGZyb20gJ2JsdWVpbXAtbWQ1JztcbmltcG9ydCBDb25zdGFudHMgZnJvbSAnZXhwby1jb25zdGFudHMnO1xuaW1wb3J0ICogYXMgRmlsZVN5c3RlbSBmcm9tICdleHBvLWZpbGUtc3lzdGVtJztcblxuaW1wb3J0IHsgZ2V0TWFuaWZlc3RCYXNlVXJsIH0gZnJvbSAnLi9Bc3NldFVyaXMnO1xuXG5leHBvcnQgY29uc3QgSVNfTUFOQUdFRF9FTlYgPSAhIUNvbnN0YW50cy5hcHBPd25lcnNoaXA7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYW5pZmVzdCgpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgcmV0dXJuIENvbnN0YW50cy5tYW5pZmVzdCB8fCB7fTtcbn1cblxuLy8gQ29tcHV0ZSBtYW5pZmVzdCBiYXNlIFVSTCBpZiBhdmFpbGFibGVcbmV4cG9ydCBjb25zdCBtYW5pZmVzdEJhc2VVcmwgPSBDb25zdGFudHMuZXhwZXJpZW5jZVVybFxuICA/IGdldE1hbmlmZXN0QmFzZVVybChDb25zdGFudHMuZXhwZXJpZW5jZVVybClcbiAgOiBudWxsO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRBc3luYyh1cmksIGhhc2gsIHR5cGUsIG5hbWUpOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoSVNfTUFOQUdFRF9FTlYpIHtcbiAgICByZXR1cm4gX2Rvd25sb2FkQXN5bmNNYW5hZ2VkRW52KHVyaSwgaGFzaCwgdHlwZSwgbmFtZSk7XG4gIH1cblxuICByZXR1cm4gX2Rvd25sb2FkQXN5bmNVbm1hbmFnZWRFbnYodXJpLCBoYXNoLCB0eXBlKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX2Rvd25sb2FkQXN5bmNNYW5hZ2VkRW52KHVyaSwgaGFzaCwgdHlwZSwgbmFtZSk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IGNhY2hlRmlsZUlkID0gaGFzaCB8fCBjb21wdXRlTWQ1KHVyaSk7XG4gIGNvbnN0IGxvY2FsVXJpID0gYCR7RmlsZVN5c3RlbS5jYWNoZURpcmVjdG9yeX1FeHBvbmVudEFzc2V0LSR7Y2FjaGVGaWxlSWR9LiR7dHlwZX1gO1xuICBsZXQgeyBleGlzdHMsIG1kNSB9ID0gYXdhaXQgRmlsZVN5c3RlbS5nZXRJbmZvQXN5bmMobG9jYWxVcmksIHtcbiAgICBtZDU6IHRydWUsXG4gIH0pO1xuICBpZiAoIWV4aXN0cyB8fCAoaGFzaCAhPT0gbnVsbCAmJiBtZDUgIT09IGhhc2gpKSB7XG4gICAgKHsgbWQ1IH0gPSBhd2FpdCBGaWxlU3lzdGVtLmRvd25sb2FkQXN5bmModXJpLCBsb2NhbFVyaSwge1xuICAgICAgbWQ1OiB0cnVlLFxuICAgIH0pKTtcbiAgICBpZiAoaGFzaCAhPT0gbnVsbCAmJiBtZDUgIT09IGhhc2gpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYERvd25sb2FkZWQgZmlsZSBmb3IgYXNzZXQgJyR7bmFtZX0uJHt0eXBlfScgYCArXG4gICAgICAgICAgYExvY2F0ZWQgYXQgJHt1cml9IGAgK1xuICAgICAgICAgIGBmYWlsZWQgTUQ1IGludGVncml0eSBjaGVja2BcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBsb2NhbFVyaTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gX2Rvd25sb2FkQXN5bmNVbm1hbmFnZWRFbnYodXJpLCBoYXNoLCB0eXBlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgLy8gQmFpbCBvdXQgaWYgaXQncyBhbHJlYWR5IGF0IGEgZmlsZSBVUkwgYmVjYXVzZSBpdCdzIGFscmVhZHkgYXZhaWxhYmxlIGxvY2FsbHlcbiAgaWYgKHVyaS5zdGFydHNXaXRoKCdmaWxlOi8vJykpIHtcbiAgICByZXR1cm4gdXJpO1xuICB9XG5cbiAgY29uc3QgY2FjaGVGaWxlSWQgPSBoYXNoIHx8IGNvbXB1dGVNZDUodXJpKTtcbiAgY29uc3QgbG9jYWxVcmkgPSBgJHtGaWxlU3lzdGVtLmNhY2hlRGlyZWN0b3J5fUV4cG9uZW50QXNzZXQtJHtjYWNoZUZpbGVJZH0uJHt0eXBlfWA7XG4gIC8vIFdlIGRvbid0IGNoZWNrIHRoZSBGaWxlU3lzdGVtIGZvciBhbiBleGlzdGluZyB2ZXJzaW9uIG9mIHRoZSBhc3NldCBhbmQgd2VcbiAgLy8gYWxzbyBkb24ndCBwZXJmb3JtIGFuIGludGVncml0eSBjaGVjayFcbiAgYXdhaXQgRmlsZVN5c3RlbS5kb3dubG9hZEFzeW5jKHVyaSwgbG9jYWxVcmkpO1xuICByZXR1cm4gbG9jYWxVcmk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9