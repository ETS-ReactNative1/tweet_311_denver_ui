{"version":3,"sources":["../../src/Updates/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExponentUpdates from './ExponentUpdates';\n\ntype Manifest = typeof Constants.manifest;\n\ntype UpdateCheckResult = { isAvailable: false } | { isAvailable: true; manifest: Manifest };\n\ntype UpdateFetchResult = { isNew: false } | { isNew: true; manifest: Manifest };\n\ntype UpdateEvent =\n  | { type: 'downloadStart' | 'downloadProgress' | 'noUpdateAvailable' }\n  | { type: 'downloadFinished'; manifest: Manifest }\n  | { type: 'error'; message: string };\n\ntype UpdateEventListener = (event: UpdateEvent) => void;\n\nexport async function reload(): Promise<void> {\n  await ExponentUpdates.reload();\n}\n\nexport async function reloadFromCache(): Promise<void> {\n  await ExponentUpdates.reloadFromCache();\n}\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExponentUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  const result = await ExponentUpdates.checkForUpdateAsync();\n  if (!result) {\n    return { isAvailable: false };\n  }\n\n  return {\n    isAvailable: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function fetchUpdateAsync({\n  eventListener,\n}: { eventListener?: UpdateEventListener } = {}): Promise<UpdateFetchResult> {\n  if (!ExponentUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  let subscription;\n  let result;\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n  try {\n    result = await ExponentUpdates.fetchUpdateAsync();\n  } finally {\n    subscription && subscription.remove();\n  }\n\n  if (!result) {\n    return { isNew: false };\n  }\n\n  return {\n    isNew: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function clearUpdateCacheExperimentalAsync(abiVersion: string): Promise<void> {\n  if (!ExponentUpdates.clearUpdateCacheAsync) {\n    throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n  }\n  return ExponentUpdates.clearUpdateCacheAsync(abiVersion);\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener: Function): EventSubscription {\n  let emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\n\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error',\n};\n"],"sourceRoot":""}