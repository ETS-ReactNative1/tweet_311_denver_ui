0e2894222f5d424af45cb9dc36764d43
'use strict';

var Systrace = require("../Performance/Systrace");

var infoLog = require("./infoLog");

var performanceNow = global.nativeQPLTimestamp || global.nativePerformanceNow || require('fbjs/lib/performanceNow');

var _cookies = {};
var PRINT_TO_CONSOLE = false;

function createPerformanceLogger() {
  var result = {
    _timespans: {},
    _extras: {},
    _points: {},
    addTimespan: function addTimespan(key, lengthInMs, description) {
      if (this._timespans[key]) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);
        }

        return;
      }

      this._timespans[key] = {
        description: description,
        totalTime: lengthInMs
      };
    },
    startTimespan: function startTimespan(key, description) {
      if (this._timespans[key]) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);
        }

        return;
      }

      this._timespans[key] = {
        description: description,
        startTime: performanceNow()
      };
      _cookies[key] = Systrace.beginAsyncEvent(key);

      if (PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'start: ' + key);
      }
    },
    stopTimespan: function stopTimespan(key) {
      var timespan = this._timespans[key];

      if (!timespan || !timespan.startTime) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);
        }

        return;
      }

      if (timespan.endTime) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
        }

        return;
      }

      timespan.endTime = performanceNow();
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);

      if (PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'end: ' + key);
      }

      Systrace.endAsyncEvent(key, _cookies[key]);
      delete _cookies[key];
    },
    clear: function clear() {
      this._timespans = {};
      this._extras = {};
      this._points = {};

      if (PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'clear');
      }
    },
    clearCompleted: function clearCompleted() {
      for (var _key in this._timespans) {
        if (this._timespans[_key].totalTime) {
          delete this._timespans[_key];
        }
      }

      this._extras = {};
      this._points = {};

      if (PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'clearCompleted');
      }
    },
    clearExceptTimespans: function clearExceptTimespans(keys) {
      this._timespans = Object.keys(this._timespans).reduce(function (previous, key) {
        if (keys.indexOf(key) !== -1) {
          previous[key] = this._timespans[key];
        }

        return previous;
      }, {});
      this._extras = {};
      this._points = {};

      if (PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'clearExceptTimespans', keys);
      }
    },
    currentTimestamp: function currentTimestamp() {
      return performanceNow();
    },
    getTimespans: function getTimespans() {
      return this._timespans;
    },
    hasTimespan: function hasTimespan(key) {
      return !!this._timespans[key];
    },
    logTimespans: function logTimespans() {
      if (PRINT_TO_CONSOLE) {
        for (var _key2 in this._timespans) {
          if (this._timespans[_key2].totalTime) {
            infoLog(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');
          }
        }
      }
    },
    addTimespans: function addTimespans(newTimespans, labels) {
      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
        var label = labels[ii / 2];
        this.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
      }
    },
    setExtra: function setExtra(key, value) {
      if (this._extras[key]) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {
            key: key,
            currentValue: this._extras[key],
            attemptedValue: value
          });
        }

        return;
      }

      this._extras[key] = value;
    },
    getExtras: function getExtras() {
      return this._extras;
    },
    removeExtra: function removeExtra(key) {
      var value = this._extras[key];
      delete this._extras[key];
      return value;
    },
    logExtras: function logExtras() {
      if (PRINT_TO_CONSOLE) {
        infoLog(this._extras);
      }
    },
    markPoint: function markPoint(key, timestamp) {
      if (this._points[key]) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          infoLog('PerformanceLogger: Attempting to mark a point that has been already logged ', key);
        }

        return;
      }

      this._points[key] = timestamp != null ? timestamp : performanceNow();
    },
    getPoints: function getPoints() {
      return this._points;
    },
    logPoints: function logPoints() {
      if (PRINT_TO_CONSOLE) {
        for (var _key3 in this._points) {
          infoLog(_key3 + ': ' + this._points[_key3] + 'ms');
        }
      }
    },
    logEverything: function logEverything() {
      this.logTimespans();
      this.logExtras();
      this.logPoints();
    }
  };
  return result;
}

module.exports = createPerformanceLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,