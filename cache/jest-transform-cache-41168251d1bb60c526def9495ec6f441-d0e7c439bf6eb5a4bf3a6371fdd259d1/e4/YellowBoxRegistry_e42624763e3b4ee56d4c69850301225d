47d3dc44049a9a7cc5285ad9614f1118
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var YellowBoxWarning = require("./YellowBoxWarning");

var observers = new Set();
var ignorePatterns = new Set();
var registry = new Map();
var disabled = false;
var projection = new Map();
var updateTimeout = null;

function isWarningIgnored(warning) {
  for (var _iterator = ignorePatterns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var _pattern = _ref;

    if (_pattern instanceof RegExp && _pattern.test(warning.message.content)) {
      return true;
    } else if (typeof _pattern === 'string' && warning.message.content.includes(_pattern)) {
      return true;
    }
  }

  return false;
}

function handleUpdate() {
  projection = new Map();

  if (!disabled) {
    for (var _iterator2 = registry, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref4;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref4 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref4 = _i2.value;
      }

      var _ref5 = _ref4;

      var _ref3 = (0, _slicedToArray2.default)(_ref5, 2);

      var _category = _ref3[0];
      var _warnings = _ref3[1];

      var _filtered = _warnings.filter(function (warning) {
        return !isWarningIgnored(warning);
      });

      if (_filtered.length > 0) {
        projection.set(_category, _filtered);
      }
    }
  }

  if (updateTimeout == null) {
    updateTimeout = setImmediate(function () {
      updateTimeout = null;

      for (var _iterator3 = observers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref7;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref7 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref7 = _i3.value;
        }

        var _ref8 = _ref7;
        var _observer = _ref8.observer;

        _observer(projection);
      }
    });
  }
}

var YellowBoxRegistry = {
  add: function add(_ref9) {
    var args = _ref9.args,
        framesToPop = _ref9.framesToPop;

    if (typeof args[0] === 'string' && args[0].startsWith('(ADVICE)')) {
      return;
    }

    var _YellowBoxWarning$par = YellowBoxWarning.parse({
      args: args,
      framesToPop: framesToPop + 1
    }),
        category = _YellowBoxWarning$par.category,
        message = _YellowBoxWarning$par.message,
        stack = _YellowBoxWarning$par.stack;

    var warnings = registry.get(category);

    if (warnings == null) {
      warnings = [];
    }

    warnings = [].concat((0, _toConsumableArray2.default)(warnings), [new YellowBoxWarning(message, stack)]);
    registry.delete(category);
    registry.set(category, warnings);
    handleUpdate();
  },
  delete: function _delete(category) {
    if (registry.has(category)) {
      registry.delete(category);
      handleUpdate();
    }
  },
  clear: function clear() {
    if (registry.size > 0) {
      registry.clear();
      handleUpdate();
    }
  },
  addIgnorePatterns: function addIgnorePatterns(patterns) {
    var newPatterns = patterns.filter(function (pattern) {
      if (pattern instanceof RegExp) {
        for (var _iterator4 = ignorePatterns.entries(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref10;

          if (_isArray4) {
            if (_i4 >= _iterator4.length) break;
            _ref10 = _iterator4[_i4++];
          } else {
            _i4 = _iterator4.next();
            if (_i4.done) break;
            _ref10 = _i4.value;
          }

          var _existingPattern = _ref10;

          if (_existingPattern instanceof RegExp && _existingPattern.toString() === pattern.toString()) {
            return false;
          }
        }

        return true;
      }

      return !ignorePatterns.has(pattern);
    });

    if (newPatterns.length === 0) {
      return;
    }

    for (var _iterator5 = newPatterns, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref11;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref11 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref11 = _i5.value;
      }

      var _pattern2 = _ref11;
      ignorePatterns.add(_pattern2);
    }

    handleUpdate();
  },
  setDisabled: function setDisabled(value) {
    if (value === disabled) {
      return;
    }

    disabled = value;
    handleUpdate();
  },
  isDisabled: function isDisabled() {
    return disabled;
  },
  observe: function observe(observer) {
    var subscription = {
      observer: observer
    };
    observers.add(subscription);
    observer(projection);
    return {
      unsubscribe: function unsubscribe() {
        observers.delete(subscription);
      }
    };
  }
};
module.exports = YellowBoxRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveFJlZ2lzdHJ5LmpzIl0sIm5hbWVzIjpbIlllbGxvd0JveFdhcm5pbmciLCJyZXF1aXJlIiwib2JzZXJ2ZXJzIiwiU2V0IiwiaWdub3JlUGF0dGVybnMiLCJyZWdpc3RyeSIsIk1hcCIsImRpc2FibGVkIiwicHJvamVjdGlvbiIsInVwZGF0ZVRpbWVvdXQiLCJpc1dhcm5pbmdJZ25vcmVkIiwid2FybmluZyIsInBhdHRlcm4iLCJSZWdFeHAiLCJ0ZXN0IiwibWVzc2FnZSIsImNvbnRlbnQiLCJpbmNsdWRlcyIsImhhbmRsZVVwZGF0ZSIsImNhdGVnb3J5Iiwid2FybmluZ3MiLCJmaWx0ZXJlZCIsImZpbHRlciIsImxlbmd0aCIsInNldCIsInNldEltbWVkaWF0ZSIsIm9ic2VydmVyIiwiWWVsbG93Qm94UmVnaXN0cnkiLCJhZGQiLCJhcmdzIiwiZnJhbWVzVG9Qb3AiLCJzdGFydHNXaXRoIiwicGFyc2UiLCJzdGFjayIsImdldCIsImRlbGV0ZSIsImhhcyIsImNsZWFyIiwic2l6ZSIsImFkZElnbm9yZVBhdHRlcm5zIiwicGF0dGVybnMiLCJuZXdQYXR0ZXJucyIsImVudHJpZXMiLCJleGlzdGluZ1BhdHRlcm4iLCJ0b1N0cmluZyIsInNldERpc2FibGVkIiwidmFsdWUiLCJpc0Rpc2FibGVkIiwib2JzZXJ2ZSIsInN1YnNjcmlwdGlvbiIsInVuc3Vic2NyaWJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7O0FBRUEsSUFBTUEsZ0JBQWdCLEdBQUdDLE9BQU8sc0JBQWhDOztBQWNBLElBQU1DLFNBQW9DLEdBQUcsSUFBSUMsR0FBSixFQUE3QztBQUNBLElBQU1DLGNBQWtDLEdBQUcsSUFBSUQsR0FBSixFQUEzQztBQUNBLElBQU1FLFFBQWtCLEdBQUcsSUFBSUMsR0FBSixFQUEzQjtBQUVBLElBQUlDLFFBQVEsR0FBRyxLQUFmO0FBQ0EsSUFBSUMsVUFBVSxHQUFHLElBQUlGLEdBQUosRUFBakI7QUFDQSxJ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Qjs7QUFjQSxRQUFJNkIsV0FBVyxDQUFDbEIsTUFBWixLQUF1QixDQUEzQixFQUE4QjtBQUM1QjtBQUNEOztBQUNELDBCQUFzQmtCLFdBQXRCLHVLQUFtQztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUEsVUFBeEI3QixTQUF3QjtBQUNqQ1IsTUFBQUEsY0FBYyxDQUFDd0IsR0FBZixDQUFtQmhCLFNBQW5CO0FBQ0Q7O0FBQ0RNLElBQUFBLFlBQVk7QUFDYixHQWhFdUI7QUFrRXhCMkIsRUFBQUEsV0FsRXdCLHVCQWtFWkMsS0FsRVksRUFrRVU7QUFDaEMsUUFBSUEsS0FBSyxLQUFLdkMsUUFBZCxFQUF3QjtBQUN0QjtBQUNEOztBQUNEQSxJQUFBQSxRQUFRLEdBQUd1QyxLQUFYO0FBQ0E1QixJQUFBQSxZQUFZO0FBQ2IsR0F4RXVCO0FBMEV4QjZCLEVBQUFBLFVBMUV3Qix3QkEwRUY7QUFDcEIsV0FBT3hDLFFBQVA7QUFDRCxHQTVFdUI7QUE4RXhCeUMsRUFBQUEsT0E5RXdCLG1CQThFaEJ0QixRQTlFZ0IsRUE4RWtCO0FBQ3hDLFFBQU11QixZQUFZLEdBQUc7QUFBQ3ZCLE1BQUFBLFFBQVEsRUFBUkE7QUFBRCxLQUFyQjtBQUNBeEIsSUFBQUEsU0FBUyxDQUFDMEIsR0FBVixDQUFjcUIsWUFBZDtBQUNBdkIsSUFBQUEsUUFBUSxDQUFDbEIsVUFBRCxDQUFSO0FBQ0EsV0FBTztBQUNMMEMsTUFBQUEsV0FESyx5QkFDZTtBQUNsQmhELFFBQUFBLFNBQVMsQ0FBQ2lDLE1BQVYsQ0FBaUJjLFlBQWpCO0FBQ0Q7QUFISSxLQUFQO0FBS0Q7QUF2RnVCLENBQTFCO0FBMEZBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJ6QixpQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgWWVsbG93Qm94V2FybmluZyA9IHJlcXVpcmUoJy4vWWVsbG93Qm94V2FybmluZycpO1xuXG5pbXBvcnQgdHlwZSB7Q2F0ZWdvcnl9IGZyb20gJy4vWWVsbG93Qm94Q2F0ZWdvcnknO1xuXG5leHBvcnQgdHlwZSBSZWdpc3RyeSA9IE1hcDxDYXRlZ29yeSwgJFJlYWRPbmx5QXJyYXk8WWVsbG93Qm94V2FybmluZz4+O1xuXG5leHBvcnQgdHlwZSBPYnNlcnZlciA9IChyZWdpc3RyeTogUmVnaXN0cnkpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIElnbm9yZVBhdHRlcm4gPSBzdHJpbmcgfCBSZWdFeHA7XG5cbmV4cG9ydCB0eXBlIFN1YnNjcmlwdGlvbiA9ICRSZWFkT25seTx7fFxuICB1bnN1YnNjcmliZTogKCkgPT4gdm9pZCxcbnx9PjtcblxuY29uc3Qgb2JzZXJ2ZXJzOiBTZXQ8e29ic2VydmVyOiBPYnNlcnZlcn0+ID0gbmV3IFNldCgpO1xuY29uc3QgaWdub3JlUGF0dGVybnM6IFNldDxJZ25vcmVQYXR0ZXJuPiA9IG5ldyBTZXQoKTtcbmNvbnN0IHJlZ2lzdHJ5OiBSZWdpc3RyeSA9IG5ldyBNYXAoKTtcblxubGV0IGRpc2FibGVkID0gZmFsc2U7XG5sZXQgcHJvamVjdGlvbiA9IG5ldyBNYXAoKTtcbmxldCB1cGRhdGVUaW1lb3V0ID0gbnVsbDtcblxuZnVuY3Rpb24gaXNXYXJuaW5nSWdub3JlZCh3YXJuaW5nOiBZZWxsb3dCb3hXYXJuaW5nKTogYm9vbGVhbiB7XG4gIGZvciAoY29uc3QgcGF0dGVybiBvZiBpZ25vcmVQYXR0ZXJucykge1xuICAgIGlmIChwYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwICYmIHBhdHRlcm4udGVzdCh3YXJuaW5nLm1lc3NhZ2UuY29udGVudCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycgJiZcbiAgICAgIHdhcm5pbmcubWVzc2FnZS5jb250ZW50LmluY2x1ZGVzKHBhdHRlcm4pXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVVcGRhdGUoKTogdm9pZCB7XG4gIHByb2plY3Rpb24gPSBuZXcgTWFwKCk7XG4gIGlmICghZGlzYWJsZWQpIHtcbiAgICBmb3IgKGNvbnN0IFtjYXRlZ29yeSwgd2FybmluZ3NdIG9mIHJlZ2lzdHJ5KSB7XG4gICAgICBjb25zdCBmaWx0ZXJlZCA9IHdhcm5pbmdzLmZpbHRlcih3YXJuaW5nID0+ICFpc1dhcm5pbmdJZ25vcmVkKHdhcm5pbmcpKTtcbiAgICAgIGlmIChmaWx0ZXJlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHByb2plY3Rpb24uc2V0KGNhdGVnb3J5LCBmaWx0ZXJlZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh1cGRhdGVUaW1lb3V0ID09IG51bGwpIHtcbiAgICB1cGRhdGVUaW1lb3V0ID0gc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgIHVwZGF0ZVRpbWVvdXQgPSBudWxsO1xuICAgICAgZm9yIChjb25zdCB7b2JzZXJ2ZXJ9IG9mIG9ic2VydmVycykge1xuICAgICAgICBvYnNlcnZlcihwcm9qZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5jb25zdCBZZWxsb3dCb3hSZWdpc3RyeSA9IHtcbiAgYWRkKHtcbiAgICBhcmdzLFxuICAgIGZyYW1lc1RvUG9wLFxuICB9OiAkUmVhZE9ubHk8e3xcbiAgICBhcmdzOiAkUmVhZE9ubHlBcnJheTxtaXhlZD4sXG4gICAgZnJhbWVzVG9Qb3A6IG51bWJlcixcbiAgfH0+KTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJiBhcmdzWzBdLnN0YXJ0c1dpdGgoJyhBRFZJQ0UpJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qge2NhdGVnb3J5LCBtZXNzYWdlLCBzdGFja30gPSBZZWxsb3dCb3hXYXJuaW5nLnBhcnNlKHtcbiAgICAgIGFyZ3MsXG4gICAgICBmcmFtZXNUb1BvcDogZnJhbWVzVG9Qb3AgKyAxLFxuICAgIH0pO1xuXG4gICAgbGV0IHdhcm5pbmdzID0gcmVnaXN0cnkuZ2V0KGNhdGVnb3J5KTtcbiAgICBpZiAod2FybmluZ3MgPT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MgPSBbXTtcbiAgICB9XG4gICAgd2FybmluZ3MgPSBbLi4ud2FybmluZ3MsIG5ldyBZZWxsb3dCb3hXYXJuaW5nKG1lc3NhZ2UsIHN0YWNrKV07XG5cbiAgICByZWdpc3RyeS5kZWxldGUoY2F0ZWdvcnkpO1xuICAgIHJlZ2lzdHJ5LnNldChjYXRlZ29yeSwgd2FybmluZ3MpO1xuXG4gICAgaGFuZGxlVXBkYXRlKCk7XG4gIH0sXG5cbiAgZGVsZXRlKGNhdGVnb3J5OiBDYXRlZ29yeSk6IHZvaWQge1xuICAgIGlmIChyZWdpc3RyeS5oYXMoY2F0ZWdvcnkpKSB7XG4gICAgICByZWdpc3RyeS5kZWxldGUoY2F0ZWdvcnkpO1xuICAgICAgaGFuZGxlVXBkYXRlKCk7XG4gICAgfVxuICB9LFxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIGlmIChyZWdpc3RyeS5zaXplID4gMCkge1xuICAgICAgcmVnaXN0cnkuY2xlYXIoKTtcbiAgICAgIGhhbmRsZVVwZGF0ZSgpO1xuICAgIH1cbiAgfSxcblxuICBhZGRJZ25vcmVQYXR0ZXJucyhwYXR0ZXJuczogJFJlYWRPbmx5QXJyYXk8SWdub3JlUGF0dGVybj4pOiB2b2lkIHtcbiAgICBjb25zdCBuZXdQYXR0ZXJucyA9IHBhdHRlcm5zLmZpbHRlcigocGF0dGVybjogSWdub3JlUGF0dGVybikgPT4ge1xuICAgICAgaWYgKHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgZm9yIChjb25zdCBleGlzdGluZ1BhdHRlcm4gb2YgaWdub3JlUGF0dGVybnMuZW50cmllcygpKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZXhpc3RpbmdQYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwICYmXG4gICAgICAgICAgICBleGlzdGluZ1BhdHRlcm4udG9TdHJpbmcoKSA9PT0gcGF0dGVybi50b1N0cmluZygpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICFpZ25vcmVQYXR0ZXJucy5oYXMocGF0dGVybik7XG4gICAgfSk7XG4gICAgaWYgKG5ld1BhdHRlcm5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgbmV3UGF0dGVybnMpIHtcbiAgICAgIGlnbm9yZVBhdHRlcm5zLmFkZChwYXR0ZXJuKTtcbiAgICB9XG4gICAgaGFuZGxlVXBkYXRlKCk7XG4gIH0sXG5cbiAgc2V0RGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAodmFsdWUgPT09IGRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpc2FibGVkID0gdmFsdWU7XG4gICAgaGFuZGxlVXBkYXRlKCk7XG4gIH0sXG5cbiAgaXNEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZGlzYWJsZWQ7XG4gIH0sXG5cbiAgb2JzZXJ2ZShvYnNlcnZlcjogT2JzZXJ2ZXIpOiBTdWJzY3JpcHRpb24ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHtvYnNlcnZlcn07XG4gICAgb2JzZXJ2ZXJzLmFkZChzdWJzY3JpcHRpb24pO1xuICAgIG9ic2VydmVyKHByb2plY3Rpb24pO1xuICAgIHJldHVybiB7XG4gICAgICB1bnN1YnNjcmliZSgpOiB2b2lkIHtcbiAgICAgICAgb2JzZXJ2ZXJzLmRlbGV0ZShzdWJzY3JpcHRpb24pO1xuICAgICAgfSxcbiAgICB9O1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBZZWxsb3dCb3hSZWdpc3RyeTtcbiJdfQ==