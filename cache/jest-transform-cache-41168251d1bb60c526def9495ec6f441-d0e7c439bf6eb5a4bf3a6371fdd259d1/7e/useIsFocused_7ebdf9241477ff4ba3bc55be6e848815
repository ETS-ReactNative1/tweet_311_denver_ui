de72336a0aa3016d2be70760a17c4256
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useIsFocused;

var React = _interopRequireWildcard(require("react"));

var _useSubscription = require("use-subscription");

var _useNavigation = _interopRequireDefault(require("./useNavigation"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function useIsFocused() {
  var navigation = (0, _useNavigation.default)();
  var getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);
  var subscribe = React.useCallback(function (callback) {
    var unsubscribeFocus = navigation.addListener('focus', function () {
      return callback(true);
    });
    var unsubscribeBlur = navigation.addListener('blur', function () {
      return callback(false);
    });
    return function () {
      unsubscribeFocus();
      unsubscribeBlur();
    };
  }, [navigation]);
  return (0, _useSubscription.useSubscription)({
    getCurrentValue: getCurrentValue,
    subscribe: subscribe
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZUlzRm9jdXNlZC50c3giXSwibmFtZXMiOlsibmF2aWdhdGlvbiIsImdldEN1cnJlbnRWYWx1ZSIsIlJlYWN0Iiwic3Vic2NyaWJlIiwiY2FsbGJhY2siLCJ1bnN1YnNjcmliZUZvY3VzIiwidW5zdWJzY3JpYmVCbHVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxnQkFBQSxHQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxtQkFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPZSxTQUFBLFlBQUEsR0FBaUM7QUFDOUMsTUFBTUEsVUFBVSxHQUFHLENBQUEsR0FBQSxjQUFBLENBQW5CLE9BQW1CLEdBQW5CO0FBQ0EsTUFBTUMsZUFBZSxHQUFHQyxLQUFLLENBQUxBLFdBQUFBLENBQWtCRixVQUFVLENBQTVCRSxTQUFBQSxFQUF3QyxDQUFoRSxVQUFnRSxDQUF4Q0EsQ0FBeEI7QUFDQSxNQUFNQyxTQUFTLEdBQUcsS0FBSyxDQUFMLFdBQUEsQ0FDZkMsVUFBQUEsUUFBRCxFQUF3QztBQUN0QyxRQUFNQyxnQkFBZ0IsR0FBR0wsVUFBVSxDQUFWQSxXQUFBQSxDQUFBQSxPQUFBQSxFQUFnQztBQUFBLGFBQ3ZESSxRQUFRLENBRFYsSUFDVSxDQUQrQztBQUFBLEtBQWhDSixDQUF6QjtBQUlBLFFBQU1NLGVBQWUsR0FBR04sVUFBVSxDQUFWQSxXQUFBQSxDQUFBQSxNQUFBQSxFQUErQjtBQUFBLGFBQ3JESSxRQUFRLENBRFYsS0FDVSxDQUQ2QztBQUFBLEtBQS9CSixDQUF4QjtBQUlBLFdBQU8sWUFBTTtBQUNYSyxNQUFBQSxnQkFBZ0I7QUFDaEJDLE1BQUFBLGVBQWU7QUFGakIsS0FBQTtBQVZjLEdBQUEsRUFlaEIsQ0FmRixVQWVFLENBZmdCLENBQWxCO0FBa0JBLFNBQU8sQ0FBQSxHQUFBLGdCQUFBLENBQUEsZUFBQSxFQUFnQjtBQUNyQkwsSUFBQUEsZUFEcUIsRUFDckJBLGVBRHFCO0FBRXJCRSxJQUFBQSxTQUFBQSxFQUFBQTtBQUZxQixHQUFoQixDQUFQO0FBSUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTdWJzY3JpcHRpb24gfSBmcm9tICd1c2Utc3Vic2NyaXB0aW9uJztcbmltcG9ydCB1c2VOYXZpZ2F0aW9uIGZyb20gJy4vdXNlTmF2aWdhdGlvbic7XG5cbi8qKlxuICogSG9vayB0byBnZXQgdGhlIGN1cnJlbnQgZm9jdXMgc3RhdGUgb2YgdGhlIHNjcmVlbi4gUmV0dXJucyBhIGB0cnVlYCBpZiBzY3JlZW4gaXMgZm9jdXNlZCwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIGlmIGEgY29tcG9uZW50IG5lZWRzIHRvIHJlbmRlciBzb21ldGhpbmcgYmFzZWQgb24gdGhlIGZvY3VzIHN0YXRlLlxuICogSXQgdXNlcyBgdXNlLXN1YnNjcmlwdGlvbmAgdW5kZXIgdGhlIGhvb2QgZm9yIHNhZmVyIHVzZSBpbiBjb25jdXJyZW50IG1vZGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlzRm9jdXNlZCgpOiBib29sZWFuIHtcbiAgY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTtcbiAgY29uc3QgZ2V0Q3VycmVudFZhbHVlID0gUmVhY3QudXNlQ2FsbGJhY2sobmF2aWdhdGlvbi5pc0ZvY3VzZWQsIFtuYXZpZ2F0aW9uXSk7XG4gIGNvbnN0IHN1YnNjcmliZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChjYWxsYmFjazogKHZhbHVlOiBib29sZWFuKSA9PiB2b2lkKSA9PiB7XG4gICAgICBjb25zdCB1bnN1YnNjcmliZUZvY3VzID0gbmF2aWdhdGlvbi5hZGRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PlxuICAgICAgICBjYWxsYmFjayh0cnVlKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgdW5zdWJzY3JpYmVCbHVyID0gbmF2aWdhdGlvbi5hZGRMaXN0ZW5lcignYmx1cicsICgpID0+XG4gICAgICAgIGNhbGxiYWNrKGZhbHNlKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgdW5zdWJzY3JpYmVGb2N1cygpO1xuICAgICAgICB1bnN1YnNjcmliZUJsdXIoKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBbbmF2aWdhdGlvbl1cbiAgKTtcblxuICByZXR1cm4gdXNlU3Vic2NyaXB0aW9uKHtcbiAgICBnZXRDdXJyZW50VmFsdWUsXG4gICAgc3Vic2NyaWJlLFxuICB9KTtcbn1cbiJdfQ==