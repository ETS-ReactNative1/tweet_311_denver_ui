{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","getCurrentValue","React","subscribe","callback","unsubscribeFocus","unsubscribeBlur"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOe,SAAA,YAAA,GAAiC;AAC9C,MAAMA,UAAU,GAAG,CAAA,GAAA,cAAA,CAAnB,OAAmB,GAAnB;AACA,MAAMC,eAAe,GAAGC,KAAK,CAALA,WAAAA,CAAkBF,UAAU,CAA5BE,SAAAA,EAAwC,CAAhE,UAAgE,CAAxCA,CAAxB;AACA,MAAMC,SAAS,GAAG,KAAK,CAAL,WAAA,CACfC,UAAAA,QAAD,EAAwC;AACtC,QAAMC,gBAAgB,GAAGL,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,EAAgC;AAAA,aACvDI,QAAQ,CADV,IACU,CAD+C;AAAA,KAAhCJ,CAAzB;AAIA,QAAMM,eAAe,GAAGN,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,EAA+B;AAAA,aACrDI,QAAQ,CADV,KACU,CAD6C;AAAA,KAA/BJ,CAAxB;AAIA,WAAO,YAAM;AACXK,MAAAA,gBAAgB;AAChBC,MAAAA,eAAe;AAFjB,KAAA;AAVc,GAAA,EAehB,CAfF,UAeE,CAfgB,CAAlB;AAkBA,SAAO,CAAA,GAAA,gBAAA,CAAA,eAAA,EAAgB;AACrBL,IAAAA,eADqB,EACrBA,eADqB;AAErBE,IAAAA,SAAAA,EAAAA;AAFqB,GAAhB,CAAP;AAID","sourcesContent":["import * as React from 'react';\nimport { useSubscription } from 'use-subscription';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n * It uses `use-subscription` under the hood for safer use in concurrent mode.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  const subscribe = React.useCallback(\n    (callback: (value: boolean) => void) => {\n      const unsubscribeFocus = navigation.addListener('focus', () =>\n        callback(true)\n      );\n\n      const unsubscribeBlur = navigation.addListener('blur', () =>\n        callback(false)\n      );\n\n      return () => {\n        unsubscribeFocus();\n        unsubscribeBlur();\n      };\n    },\n    [navigation]\n  );\n\n  return useSubscription({\n    getCurrentValue,\n    subscribe,\n  });\n}\n"]}