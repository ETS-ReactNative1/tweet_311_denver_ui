{"version":3,"sources":["../../src/launch/AppLoading.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;IAeqB,U;;;AAArB,wBAAA;AAAA;;AAAA;;AACE,UAAA,UAAA,GAAsB,KAAtB;;AAoBA,UAAA,8BAAA,GAAiC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAC1B,MAAK,KAAL,CAAW,QADe;AAAA;AAAA;AAAA;;AAAA,oBAEvB,IAAI,KAAJ,CAAU,gEAAV,CAFuB;;AAAA;AAAA;AAAA;AAAA,gDAMvB,MAAK,KAAL,CAAW,UAAX,EANuB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,kBAQxB,MAAK,UARmB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,mBAUzB,MAAK,KAAL,CAAW,OAVc;AAAA;AAAA;AAAA;;AAW3B,oBAAK,KAAL,CAAW,OAAX;;AAX2B;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA,kBAgBxB,MAAK,UAhBmB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAoB7B,kBAAI,MAAK,KAAL,CAAW,QAAf,EAAyB;AACvB,sBAAK,KAAL,CAAW,QAAX;AACD;;AAtB4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjC;;AArBF;AAkDC;;;;wCA/CkB;AACf,WAAK,UAAL,GAAkB,IAAlB;;AACA,MAAA,UAAU,CAAC,mBAAD,CAAV;;AAIA,UAAI,KAAK,KAAL,CAAW,UAAf,EAA2B;AACzB,aAAK,8BAAL,GAAsC,KAAtC,CAA4C,UAAA,KAAK,EAAG;AAClD,UAAA,OAAO,CAAC,KAAR,0DAAqE,KAAK,CAAC,KAA3E;AACD,SAFD;AAGD;AACF;;;2CAEmB;AAClB,WAAK,UAAL,GAAkB,KAAlB;;AACA,MAAA,UAAU,CAAC,sBAAD,CAAV;AACD;;;6BA4BK;AACJ,aAAO,6BAAC,gCAAD,EAAsB,KAAK,KAA3B,CAAP;AACD;;;EAjDqC,eAAM,S;;;AAoD9C,IAAI,iBAAiB,GAAwB,IAA7C;;AAEA,SAAS,UAAT,CAAoB,KAApB,EAAiC;AAC/B,MAAI,iBAAJ,EAAuB;AACrB,IAAA,iBAAiB,CAAC,IAAlB,CAAuB,KAAvB;AACD;AACF;;AAEK,SAAU,6BAAV,GAAuC;AAC3C,MAAI,CAAC,iBAAL,EAAwB;AACtB,IAAA,iBAAiB,GAAG,IAAI,uBAAJ,EAApB;AACD;;AACD,SAAO,iBAAP;AACD","sourcesContent":["import { EventEmitter } from 'fbemitter';\nimport React from 'react';\n\nimport NativeAppLoading from './AppLoadingNativeWrapper';\n\ntype Props =\n  | {\n      startAsync?: () => Promise<void>;\n      onError?: (error: Error) => void;\n      onFinish?: () => void;\n      autoHideSplash?: boolean;\n    }\n  | {\n      startAsync: null;\n      onError: null;\n      onFinish: null;\n    };\n\nexport default class AppLoading extends React.Component<Props> {\n  _isMounted: boolean = false;\n\n  componentDidMount() {\n    this._isMounted = true;\n    _emitEvent('componentDidMount');\n\n    // startAsync is optional, you can do this process manually if you prefer (this is mainly for\n    // backwards compatibility and it is not recommended)\n    if (this.props.startAsync) {\n      this._startLoadingAppResourcesAsync().catch(error => {\n        console.error(`AppLoading threw an unexpected error when loading:\\n${error.stack}`);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    _emitEvent('componentWillUnmount');\n  }\n\n  _startLoadingAppResourcesAsync = async () => {\n    if (!this.props.onFinish) {\n      throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n    }\n\n    try {\n      await this.props.startAsync!();\n    } catch (e) {\n      if (!this._isMounted) return;\n\n      if (this.props.onError) {\n        this.props.onError(e);\n      } else {\n        throw e;\n      }\n    } finally {\n      if (!this._isMounted) return;\n\n      // If we get to this point then we know that either there was no error, or the error was\n      // handled.\n      if (this.props.onFinish) {\n        this.props.onFinish();\n      }\n    }\n  };\n\n  render() {\n    return <NativeAppLoading {...this.props} />;\n  }\n}\n\nlet _lifecycleEmitter: EventEmitter | null = null;\n\nfunction _emitEvent(event: string): void {\n  if (_lifecycleEmitter) {\n    _lifecycleEmitter.emit(event);\n  }\n}\n\nexport function getAppLoadingLifecycleEmitter(): EventEmitter {\n  if (!_lifecycleEmitter) {\n    _lifecycleEmitter = new EventEmitter();\n  }\n  return _lifecycleEmitter;\n}\n"],"sourceRoot":""}