{"version":3,"sources":["MapMarker.js"],"names":["viewConfig","uiViewClassName","validAttributes","coordinate","viewPropTypes","ViewPropTypes","View","propTypes","identifier","PropTypes","string","reuseIdentifier","title","description","testID","image","any","icon","opacity","number","pinColor","ColorPropType","shape","latitude","isRequired","longitude","centerOffset","x","y","calloutOffset","anchor","calloutAnchor","flat","bool","draggable","tracksViewChanges","tracksInfoWindowChanges","stopPropagation","onPress","func","onSelect","onDeselect","onCalloutPress","onDragStart","onDrag","onDragEnd","defaultProps","MapMarker","props","showCallout","bind","hideCallout","redrawCallout","animateMarkerToCoordinate","marker","setNativeProps","_runCommand","duration","name","args","Platform","OS","NativeModules","UIManager","dispatchViewManagerCommand","_getHandle","getUIManagerCommand","getMapManagerCommand","Image","resolveAssetSource","uri","AIRMapMarker","getAirComponent","ref","styles","style","event","React","Component","StyleSheet","create","position","backgroundColor","Animated","createAnimatedComponent","componentType","providers","google","ios","SUPPORTED","android","USES_DEFAULT_IMPLEMENTATION"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  ColorPropType,\n  StyleSheet,\n  Platform,\n  NativeModules,\n  Animated,\n  Image,\n  findNodeHandle,\n  ViewPropTypes,\n  View,\n} from 'react-native';\n\nimport decorateMapComponent, {\n  SUPPORTED,\n  USES_DEFAULT_IMPLEMENTATION,\n} from './decorateMapComponent';\n\nconst viewConfig = {\n  uiViewClassName: 'AIR<provider>MapMarker',\n  validAttributes: {\n    coordinate: true,\n  },\n};\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  // TODO(lmr): get rid of these?\n  identifier: PropTypes.string,\n  reuseIdentifier: PropTypes.string,\n\n  /**\n   * The title of the marker. This is only used if the <Marker /> component has no children that\n   * are a `<Callout />`, in which case the default callout behavior will be used, which\n   * will show both the `title` and the `description`, if provided.\n   */\n  title: PropTypes.string,\n\n  /**\n   * The description of the marker. This is only used if the <Marker /> component has no children\n   * that are a `<Callout />`, in which case the default callout behavior will be used,\n   * which will show both the `title` and the `description`, if provided.\n   */\n  description: PropTypes.string,\n\n  /**\n   * Test ID for end to end test automation\n   */\n  testID: PropTypes.string,\n\n  /**\n   * A custom image to be used as the marker's icon. Only local image resources are allowed to be\n   * used.\n   */\n  image: PropTypes.any,\n\n  /**\n   * Marker icon to render (equivalent to `icon` property of GMSMarker Class).\n   * Using this property has an advantage over `image` in term of performance, battery usage...\n   * because it doesn't trigger tracksViewChanges.\n   * (tracksViewChanges is set to YES by default if iconView is not nil).\n   */\n  icon: PropTypes.any,\n\n  /**\n   * Opacity level of view/image based markers\n   */\n  opacity: PropTypes.number,\n\n  /**\n   * If no custom marker view or custom image is provided, the platform default pin will be used,\n   * which can be customized by this color. Ignored if a custom marker is being used.\n   */\n  pinColor: ColorPropType,\n\n  /**\n   * The coordinate for the marker.\n   */\n  coordinate: PropTypes.shape({\n    /**\n     * Coordinates for the anchor point of the marker.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  }).isRequired,\n\n  /**\n   * The offset (in points) at which to display the view.\n   *\n   * By default, the center point of an annotation view is placed at the coordinate point of the\n   * associated annotation. You can use this property to reposition the annotation view as\n   * needed. This x and y offset values are measured in points. Positive offset values move the\n   * annotation view down and to the right, while negative values move it up and to the left.\n   *\n   * For android, see the `anchor` prop.\n   *\n   * @platform ios\n   */\n  centerOffset: PropTypes.shape({\n    /**\n     * Offset from the anchor point\n     */\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * The offset (in points) at which to place the callout bubble.\n   *\n   * This property determines the additional distance by which to move the callout bubble. When\n   * this property is set to (0, 0), the anchor point of the callout bubble is placed on the\n   * top-center point of the marker viewâ€™s frame. Specifying positive offset values moves the\n   * callout bubble down and to the right, while specifying negative values moves it up and to\n   * the left.\n   *\n   * For android, see the `calloutAnchor` prop.\n   *\n   * @platform ios\n   */\n  calloutOffset: PropTypes.shape({\n    /**\n     * Offset to the callout\n     */\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * Sets the anchor point for the marker.\n   *\n   * The anchor specifies the point in the icon image that is anchored to the marker's position\n   * on the Earth's surface.\n   *\n   * The anchor point is specified in the continuous space [0.0, 1.0] x [0.0, 1.0], where (0, 0)\n   * is the top-left corner of the image, and (1, 1) is the bottom-right corner. The anchoring\n   * point in a W x H image is the nearest discrete grid point in a (W + 1) x (H + 1) grid,\n   * obtained by scaling the then rounding. For example, in a 4 x 2 image, the anchor point\n   * (0.7, 0.6) resolves to the grid point at (3, 1).\n   *\n   * For ios, see the `centerOffset` prop.\n   *\n   * @platform android\n   */\n  anchor: PropTypes.shape({\n    /**\n     * Offset to the callout\n     */\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * Specifies the point in the marker image at which to anchor the callout when it is displayed.\n   * This is specified in the same coordinate system as the anchor. See the `andor` prop for more\n   * details.\n   *\n   * The default is the top middle of the image.\n   *\n   * For ios, see the `calloutOffset` prop.\n   *\n   * @platform android\n   */\n  calloutAnchor: PropTypes.shape({\n    /**\n     * Offset to the callout\n     */\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * Sets whether this marker should be flat against the map true or a billboard facing the\n   * camera false.\n   *\n   * @platform android\n   */\n  flat: PropTypes.bool,\n\n  draggable: PropTypes.bool,\n\n  /**\n   * Sets whether this marker should track view changes true.\n   */\n\n  tracksViewChanges: PropTypes.bool,\n\n  /**\n   * Sets whether this marker should track view changes in info window true.\n   *\n   * @platform ios\n   */\n\n  tracksInfoWindowChanges: PropTypes.bool,\n\n  /**\n   * Stops Marker onPress events from propagating to and triggering MapView onPress events.\n   *\n   * @platform ios\n   */\n\n  stopPropagation: PropTypes.bool,\n\n  /**\n   * Callback that is called when the user presses on the marker\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the user selects the marker, before the callout is shown.\n   *\n   * @platform ios\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Callback that is called when the marker is deselected, before the callout is hidden.\n   *\n   * @platform ios\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * Callback that is called when the user taps the callout view.\n   */\n  onCalloutPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the user initiates a drag on this marker (if it is draggable)\n   */\n  onDragStart: PropTypes.func,\n\n  /**\n   * Callback called continuously as the marker is dragged\n   */\n  onDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when a drag on this marker finishes. This is usually the point you\n   * will want to setState on the marker's coordinate again\n   */\n  onDragEnd: PropTypes.func,\n};\n\nconst defaultProps = {\n  stopPropagation: false,\n};\n\nclass MapMarker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showCallout = this.showCallout.bind(this);\n    this.hideCallout = this.hideCallout.bind(this);\n    this.redrawCallout = this.redrawCallout.bind(this);\n    this.animateMarkerToCoordinate = this.animateMarkerToCoordinate.bind(this);\n  }\n\n  setNativeProps(props) {\n    this.marker.setNativeProps(props);\n  }\n\n  showCallout() {\n    this._runCommand('showCallout', []);\n  }\n\n  hideCallout() {\n    this._runCommand('hideCallout', []);\n  }\n\n  redrawCallout() {\n    this._runCommand('redrawCallout', []);\n  }\n\n  animateMarkerToCoordinate(coordinate, duration) {\n    this._runCommand('animateMarkerToCoordinate', [\n      coordinate,\n      duration || 500,\n    ]);\n  }\n\n  redraw() {\n    this._runCommand('redraw', []);\n  }\n\n  _getHandle() {\n    return findNodeHandle(this.marker);\n  }\n\n  _runCommand(name, args) {\n    switch (Platform.OS) {\n      case 'android':\n        NativeModules.UIManager.dispatchViewManagerCommand(\n          this._getHandle(),\n          this.getUIManagerCommand(name),\n          args\n        );\n        break;\n\n      case 'ios':\n        this.getMapManagerCommand(name)(this._getHandle(), ...args);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  render() {\n    let image;\n    if (this.props.image) {\n      image = Image.resolveAssetSource(this.props.image) || {};\n      image = image.uri || this.props.image;\n    }\n\n    let icon;\n    if (this.props.icon) {\n      icon = Image.resolveAssetSource(this.props.icon) || {};\n      icon = icon.uri;\n    }\n\n    const AIRMapMarker = this.getAirComponent();\n\n    return (\n      <AIRMapMarker\n        ref={ref => {\n          this.marker = ref;\n        }}\n        {...this.props}\n        image={image}\n        icon={icon}\n        style={[styles.marker, this.props.style]}\n        onPress={event => {\n          if (this.props.stopPropagation) {\n            event.stopPropagation();\n          }\n          if (this.props.onPress) {\n            this.props.onPress(event);\n          }\n        }}\n      />\n    );\n  }\n}\n\nMapMarker.propTypes = propTypes;\nMapMarker.defaultProps = defaultProps;\nMapMarker.viewConfig = viewConfig;\n\nconst styles = StyleSheet.create({\n  marker: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n  },\n});\n\nMapMarker.Animated = Animated.createAnimatedComponent(MapMarker);\n\nexport default decorateMapComponent(MapMarker, {\n  componentType: 'Marker',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]}