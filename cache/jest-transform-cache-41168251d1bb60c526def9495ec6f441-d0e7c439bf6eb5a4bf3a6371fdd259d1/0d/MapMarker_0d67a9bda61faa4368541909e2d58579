e83df5fb57e2a660908c37cf5a1fe0c9
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _decorateMapComponent = _interopRequireWildcard(require("./decorateMapComponent"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var viewConfig = {
  uiViewClassName: 'AIR<provider>MapMarker',
  validAttributes: {
    coordinate: true
  }
};
var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

var propTypes = _objectSpread({}, viewPropTypes, {
  identifier: _propTypes.default.string,
  reuseIdentifier: _propTypes.default.string,
  title: _propTypes.default.string,
  description: _propTypes.default.string,
  testID: _propTypes.default.string,
  image: _propTypes.default.any,
  icon: _propTypes.default.any,
  opacity: _propTypes.default.number,
  pinColor: _reactNative.ColorPropType,
  coordinate: _propTypes.default.shape({
    latitude: _propTypes.default.number.isRequired,
    longitude: _propTypes.default.number.isRequired
  }).isRequired,
  centerOffset: _propTypes.default.shape({
    x: _propTypes.default.number.isRequired,
    y: _propTypes.default.number.isRequired
  }),
  calloutOffset: _propTypes.default.shape({
    x: _propTypes.default.number.isRequired,
    y: _propTypes.default.number.isRequired
  }),
  anchor: _propTypes.default.shape({
    x: _propTypes.default.number.isRequired,
    y: _propTypes.default.number.isRequired
  }),
  calloutAnchor: _propTypes.default.shape({
    x: _propTypes.default.number.isRequired,
    y: _propTypes.default.number.isRequired
  }),
  flat: _propTypes.default.bool,
  draggable: _propTypes.default.bool,
  tracksViewChanges: _propTypes.default.bool,
  tracksInfoWindowChanges: _propTypes.default.bool,
  stopPropagation: _propTypes.default.bool,
  onPress: _propTypes.default.func,
  onSelect: _propTypes.default.func,
  onDeselect: _propTypes.default.func,
  onCalloutPress: _propTypes.default.func,
  onDragStart: _propTypes.default.func,
  onDrag: _propTypes.default.func,
  onDragEnd: _propTypes.default.func
});

var defaultProps = {
  stopPropagation: false
};

var MapMarker = function (_React$Component) {
  (0, _inherits2.default)(MapMarker, _React$Component);

  function MapMarker(props) {
    var _this;

    (0, _classCallCheck2.default)(this, MapMarker);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapMarker).call(this, props));
    _this.showCallout = _this.showCallout.bind((0, _assertThisInitialized2.default)(_this));
    _this.hideCallout = _this.hideCallout.bind((0, _assertThisInitialized2.default)(_this));
    _this.redrawCallout = _this.redrawCallout.bind((0, _assertThisInitialized2.default)(_this));
    _this.animateMarkerToCoordinate = _this.animateMarkerToCoordinate.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(MapMarker, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      this.marker.setNativeProps(props);
    }
  }, {
    key: "showCallout",
    value: function showCallout() {
      this._runCommand('showCallout', []);
    }
  }, {
    key: "hideCallout",
    value: function hideCallout() {
      this._runCommand('hideCallout', []);
    }
  }, {
    key: "redrawCallout",
    value: function redrawCallout() {
      this._runCommand('redrawCallout', []);
    }
  }, {
    key: "animateMarkerToCoordinate",
    value: function animateMarkerToCoordinate(coordinate, duration) {
      this._runCommand('animateMarkerToCoordinate', [coordinate, duration || 500]);
    }
  }, {
    key: "redraw",
    value: function redraw() {
      this._runCommand('redraw', []);
    }
  }, {
    key: "_getHandle",
    value: function _getHandle() {
      return (0, _reactNative.findNodeHandle)(this.marker);
    }
  }, {
    key: "_runCommand",
    value: function _runCommand(name, args) {
      switch (_reactNative.Platform.OS) {
        case 'android':
          _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this.getUIManagerCommand(name), args);

          break;

        case 'ios':
          this.getMapManagerCommand(name).apply(void 0, [this._getHandle()].concat((0, _toConsumableArray2.default)(args)));
          break;

        default:
          break;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var image;

      if (this.props.image) {
        image = _reactNative.Image.resolveAssetSource(this.props.image) || {};
        image = image.uri || this.props.image;
      }

      var icon;

      if (this.props.icon) {
        icon = _reactNative.Image.resolveAssetSource(this.props.icon) || {};
        icon = icon.uri;
      }

      var AIRMapMarker = this.getAirComponent();
      return _react.default.createElement(AIRMapMarker, (0, _extends2.default)({
        ref: function ref(_ref) {
          _this2.marker = _ref;
        }
      }, this.props, {
        image: image,
        icon: icon,
        style: [styles.marker, this.props.style],
        onPress: function onPress(event) {
          if (_this2.props.stopPropagation) {
            event.stopPropagation();
          }

          if (_this2.props.onPress) {
            _this2.props.onPress(event);
          }
        }
      }));
    }
  }]);
  return MapMarker;
}(_react.default.Component);

MapMarker.propTypes = propTypes;
MapMarker.defaultProps = defaultProps;
MapMarker.viewConfig = viewConfig;

var styles = _reactNative.StyleSheet.create({
  marker: {
    position: 'absolute',
    backgroundColor: 'transparent'
  }
});

MapMarker.Animated = _reactNative.Animated.createAnimatedComponent(MapMarker);

var _default = (0, _decorateMapComponent.default)(MapMarker, {
  componentType: 'Marker',
  providers: {
    google: {
      ios: _decorateMapComponent.SUPPORTED,
      android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
    }
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,