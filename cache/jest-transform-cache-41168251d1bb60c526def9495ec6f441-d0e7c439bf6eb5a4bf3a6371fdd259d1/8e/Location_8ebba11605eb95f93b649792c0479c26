b4935848e6eebdd279b7f3f0b1e6ce9a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getProviderStatusAsync = getProviderStatusAsync;
exports.enableNetworkProviderAsync = enableNetworkProviderAsync;
exports.getCurrentPositionAsync = getCurrentPositionAsync;
exports.getLastKnownPositionAsync = getLastKnownPositionAsync;
exports.getHeadingAsync = getHeadingAsync;
exports.watchHeadingAsync = watchHeadingAsync;
exports.geocodeAsync = geocodeAsync;
exports.reverseGeocodeAsync = reverseGeocodeAsync;
exports.setApiKey = setApiKey;
exports.watchPositionAsync = watchPositionAsync;
exports.getPermissionsAsync = getPermissionsAsync;
exports.requestPermissionsAsync = requestPermissionsAsync;
exports.hasServicesEnabledAsync = hasServicesEnabledAsync;
exports.isBackgroundLocationAvailableAsync = isBackgroundLocationAvailableAsync;
exports.startLocationUpdatesAsync = startLocationUpdatesAsync;
exports.stopLocationUpdatesAsync = stopLocationUpdatesAsync;
exports.hasStartedLocationUpdatesAsync = hasStartedLocationUpdatesAsync;
exports.startGeofencingAsync = startGeofencingAsync;
exports.stopGeofencingAsync = stopGeofencingAsync;
exports.hasStartedGeofencingAsync = hasStartedGeofencingAsync;
exports.installWebGeolocationPolyfill = installWebGeolocationPolyfill;
exports._getCurrentWatchId = _getCurrentWatchId;
Object.defineProperty(exports, "PermissionStatus", {
  enumerable: true,
  get: function get() {
    return _unimodulesPermissionsInterface.PermissionStatus;
  }
});
exports.EventEmitter = exports.GeofencingRegionState = exports.GeofencingEventType = exports.ActivityType = exports.Accuracy = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _core = require("@unimodules/core");

var _unimodulesPermissionsInterface = require("unimodules-permissions-interface");

var _invariant = _interopRequireDefault(require("invariant"));

var _ExpoLocation = _interopRequireDefault(require("./ExpoLocation"));

var LocationEventEmitter = new _core.EventEmitter(_ExpoLocation.default);
exports.EventEmitter = LocationEventEmitter;
var LocationAccuracy;
exports.Accuracy = LocationAccuracy;

(function (LocationAccuracy) {
  LocationAccuracy[LocationAccuracy["Lowest"] = 1] = "Lowest";
  LocationAccuracy[LocationAccuracy["Low"] = 2] = "Low";
  LocationAccuracy[LocationAccuracy["Balanced"] = 3] = "Balanced";
  LocationAccuracy[LocationAccuracy["High"] = 4] = "High";
  LocationAccuracy[LocationAccuracy["Highest"] = 5] = "Highest";
  LocationAccuracy[LocationAccuracy["BestForNavigation"] = 6] = "BestForNavigation";
})(LocationAccuracy || (exports.Accuracy = LocationAccuracy = {}));

var LocationActivityType;
exports.ActivityType = LocationActivityType;

(function (LocationActivityType) {
  LocationActivityType[LocationActivityType["Other"] = 1] = "Other";
  LocationActivityType[LocationActivityType["AutomotiveNavigation"] = 2] = "AutomotiveNavigation";
  LocationActivityType[LocationActivityType["Fitness"] = 3] = "Fitness";
  LocationActivityType[LocationActivityType["OtherNavigation"] = 4] = "OtherNavigation";
  LocationActivityType[LocationActivityType["Airborne"] = 5] = "Airborne";
})(LocationActivityType || (exports.ActivityType = LocationActivityType = {}));

var GeofencingEventType;
exports.GeofencingEventType = GeofencingEventType;

(function (GeofencingEventType) {
  GeofencingEventType[GeofencingEventType["Enter"] = 1] = "Enter";
  GeofencingEventType[GeofencingEventType["Exit"] = 2] = "Exit";
})(GeofencingEventType || (exports.GeofencingEventType = GeofencingEventType = {}));

var GeofencingRegionState;
exports.GeofencingRegionState = GeofencingRegionState;

(function (GeofencingRegionState) {
  GeofencingRegionState[GeofencingRegionState["Unknown"] = 0] = "Unknown";
  GeofencingRegionState[GeofencingRegionState["Inside"] = 1] = "Inside";
  GeofencingRegionState[GeofencingRegionState["Outside"] = 2] = "Outside";
})(GeofencingRegionState || (exports.GeofencingRegionState = GeofencingRegionState = {}));

var nextWatchId = 0;
var headingId;

function _getNextWatchId() {
  nextWatchId++;
  return nextWatchId;
}

function _getCurrentWatchId() {
  return nextWatchId;
}

var watchCallbacks = {};
var deviceEventSubscription;
var headingEventSub;
var googleApiKey;
var googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';

function getProviderStatusAsync() {
  return _regenerator.default.async(function getProviderStatusAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", _ExpoLocation.default.getProviderStatusAsync());

        case 1:
        case "end":
          return _context.stop();
      }
    }
  });
}

function enableNetworkProviderAsync() {
  return _regenerator.default.async(function enableNetworkProviderAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!(_core.Platform.OS === 'android')) {
            _context2.next = 2;
            break;
          }

          return _context2.abrupt("return", _ExpoLocation.default.enableNetworkProviderAsync());

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function getCurrentPositionAsync() {
  var options,
      _args3 = arguments;
  return _regenerator.default.async(function getCurrentPositionAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
          return _context3.abrupt("return", _ExpoLocation.default.getCurrentPositionAsync(options));

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function getLastKnownPositionAsync() {
  return _regenerator.default.async(function getLastKnownPositionAsync$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          return _context4.abrupt("return", _ExpoLocation.default.getLastKnownPositionAsync());

        case 1:
        case "end":
          return _context4.stop();
      }
    }
  });
}

function getHeadingAsync() {
  return _regenerator.default.async(function getHeadingAsync$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          return _context6.abrupt("return", new Promise(function _callee(resolve, reject) {
            var tries, headingSub, done, subscription, _tries;

            return _regenerator.default.async(function _callee$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.prev = 0;

                    if (!headingEventSub) {
                      _context5.next = 6;
                      break;
                    }

                    tries = 0;
                    headingSub = LocationEventEmitter.addListener('Expo.headingChanged', function (_ref) {
                      var heading = _ref.heading;

                      if (heading.accuracy > 1 || tries > 5) {
                        resolve(heading);
                        LocationEventEmitter.removeSubscription(headingSub);
                      } else {
                        tries += 1;
                      }
                    });
                    _context5.next = 12;
                    break;

                  case 6:
                    done = false;
                    _tries = 0;
                    _context5.next = 10;
                    return _regenerator.default.awrap(watchHeadingAsync(function (heading) {
                      if (!done) {
                        if (heading.accuracy > 1 || _tries > 5) {
                          subscription.remove();
                          resolve(heading);
                          done = true;
                        } else {
                          _tries += 1;
                        }
                      } else {
                        subscription.remove();
                      }
                    }));

                  case 10:
                    subscription = _context5.sent;

                    if (done) {
                      subscription.remove();
                    }

                  case 12:
                    _context5.next = 17;
                    break;

                  case 14:
                    _context5.prev = 14;
                    _context5.t0 = _context5["catch"](0);
                    reject(_context5.t0);

                  case 17:
                  case "end":
                    return _context5.stop();
                }
              }
            }, null, null, [[0, 14]]);
          }));

        case 1:
        case "end":
          return _context6.stop();
      }
    }
  });
}

function watchHeadingAsync(callback) {
  return _regenerator.default.async(function watchHeadingAsync$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          if (headingEventSub) {
            _removeHeadingWatcher(headingId);
          }

          headingEventSub = LocationEventEmitter.addListener('Expo.headingChanged', function (_ref2) {
            var watchId = _ref2.watchId,
                heading = _ref2.heading;
            var callback = watchCallbacks[watchId];

            if (callback) {
              callback(heading);
            } else {
              _ExpoLocation.default.removeWatchAsync(watchId);
            }
          });
          headingId = _getNextWatchId();
          watchCallbacks[headingId] = callback;
          _context7.next = 6;
          return _regenerator.default.awrap(_ExpoLocation.default.watchDeviceHeading(headingId));

        case 6:
          return _context7.abrupt("return", {
            remove: function remove() {
              _removeHeadingWatcher(headingId);
            }
          });

        case 7:
        case "end":
          return _context7.stop();
      }
    }
  });
}

function _removeHeadingWatcher(watchId) {
  if (!watchCallbacks[watchId]) {
    return;
  }

  delete watchCallbacks[watchId];

  _ExpoLocation.default.removeWatchAsync(watchId);

  if (headingEventSub) {
    LocationEventEmitter.removeSubscription(headingEventSub);
    headingEventSub = null;
  }
}

function _maybeInitializeEmitterSubscription() {
  if (!deviceEventSubscription) {
    deviceEventSubscription = LocationEventEmitter.addListener('Expo.locationChanged', function (_ref3) {
      var watchId = _ref3.watchId,
          location = _ref3.location;
      var callback = watchCallbacks[watchId];

      if (callback) {
        callback(location);
      } else {
        _ExpoLocation.default.removeWatchAsync(watchId);
      }
    });
  }
}

function geocodeAsync(address) {
  return _regenerator.default.async(function geocodeAsync$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          return _context8.abrupt("return", _ExpoLocation.default.geocodeAsync(address).catch(function (error) {
            var platformUsesGoogleMaps = _core.Platform.OS === 'android' || _core.Platform.OS === 'web';

            if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {
              if (!googleApiKey) {
                throw new _core.CodedError(error.code, error.message + " Please set a Google API Key to use geocoding.");
              }

              return _googleGeocodeAsync(address);
            }

            throw error;
          }));

        case 1:
        case "end":
          return _context8.stop();
      }
    }
  });
}

function reverseGeocodeAsync(location) {
  return _regenerator.default.async(function reverseGeocodeAsync$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          if (!(typeof location.latitude !== 'number' || typeof location.longitude !== 'number')) {
            _context9.next = 2;
            break;
          }

          throw new TypeError('Location should be an object with number properties `latitude` and `longitude`.');

        case 2:
          return _context9.abrupt("return", _ExpoLocation.default.reverseGeocodeAsync(location).catch(function (error) {
            var platformUsesGoogleMaps = _core.Platform.OS === 'android' || _core.Platform.OS === 'web';

            if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {
              if (!googleApiKey) {
                throw new _core.CodedError(error.code, error.message + " Please set a Google API Key to use geocoding.");
              }

              return _googleReverseGeocodeAsync(location);
            }

            throw error;
          }));

        case 3:
        case "end":
          return _context9.stop();
      }
    }
  });
}

function setApiKey(apiKey) {
  googleApiKey = apiKey;
}

function _googleGeocodeAsync(address) {
  var result, resultObject;
  return _regenerator.default.async(function _googleGeocodeAsync$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          _context10.next = 2;
          return _regenerator.default.awrap(fetch(googleApiUrl + "?key=" + googleApiKey + "&address=" + encodeURI(address)));

        case 2:
          result = _context10.sent;
          _context10.next = 5;
          return _regenerator.default.awrap(result.json());

        case 5:
          resultObject = _context10.sent;

          if (!(resultObject.status === 'ZERO_RESULTS')) {
            _context10.next = 8;
            break;
          }

          return _context10.abrupt("return", []);

        case 8:
          assertGeocodeResults(resultObject);
          return _context10.abrupt("return", resultObject.results.map(function (result) {
            var location = result.geometry.location;
            return {
              latitude: location.lat,
              longitude: location.lng
            };
          }));

        case 10:
        case "end":
          return _context10.stop();
      }
    }
  });
}

function _googleReverseGeocodeAsync(options) {
  var result, resultObject;
  return _regenerator.default.async(function _googleReverseGeocodeAsync$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          _context11.next = 2;
          return _regenerator.default.awrap(fetch(googleApiUrl + "?key=" + googleApiKey + "&latlng=" + options.latitude + "," + options.longitude));

        case 2:
          result = _context11.sent;
          _context11.next = 5;
          return _regenerator.default.awrap(result.json());

        case 5:
          resultObject = _context11.sent;

          if (!(resultObject.status === 'ZERO_RESULTS')) {
            _context11.next = 8;
            break;
          }

          return _context11.abrupt("return", []);

        case 8:
          assertGeocodeResults(resultObject);
          return _context11.abrupt("return", resultObject.results.map(function (result) {
            var address = {};
            result.address_components.forEach(function (component) {
              if (component.types.includes('locality')) {
                address.city = component.long_name;
              } else if (component.types.includes('street_address')) {
                address.street = component.long_name;
              } else if (component.types.includes('administrative_area_level_1')) {
                address.region = component.long_name;
              } else if (component.types.includes('country')) {
                address.country = component.long_name;
              } else if (component.types.includes('postal_code')) {
                address.postalCode = component.long_name;
              } else if (component.types.includes('point_of_interest')) {
                address.name = component.long_name;
              }
            });
            return address;
          }));

        case 10:
        case "end":
          return _context11.stop();
      }
    }
  });
}

function assertGeocodeResults(resultObject) {
  var status = resultObject.status,
      error_message = resultObject.error_message;

  if (status !== 'ZERO_RESULTS' && status !== 'OK') {
    if (error_message) {
      throw new _core.CodedError(status, error_message);
    } else if (status === 'UNKNOWN_ERROR') {
      throw new _core.CodedError(status, 'the request could not be processed due to a server error. The request may succeed if you try again.');
    }

    throw new _core.CodedError(status, "An error occurred during geocoding.");
  }
}

function watchPosition(success, error, options) {
  _maybeInitializeEmitterSubscription();

  var watchId = _getNextWatchId();

  watchCallbacks[watchId] = success;

  _ExpoLocation.default.watchPositionImplAsync(watchId, options).catch(function (err) {
    _removeWatcher(watchId);

    error({
      watchId: watchId,
      message: err.message,
      code: err.code
    });
  });

  return watchId;
}

function watchPositionAsync(options, callback) {
  var watchId;
  return _regenerator.default.async(function watchPositionAsync$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          _maybeInitializeEmitterSubscription();

          watchId = _getNextWatchId();
          watchCallbacks[watchId] = callback;
          _context12.next = 5;
          return _regenerator.default.awrap(_ExpoLocation.default.watchPositionImplAsync(watchId, options));

        case 5:
          return _context12.abrupt("return", {
            remove: function remove() {
              _removeWatcher(watchId);
            }
          });

        case 6:
        case "end":
          return _context12.stop();
      }
    }
  });
}

function clearWatch(watchId) {
  _removeWatcher(watchId);
}

function _removeWatcher(watchId) {
  if (!watchCallbacks[watchId]) {
    return;
  }

  _ExpoLocation.default.removeWatchAsync(watchId);

  delete watchCallbacks[watchId];

  if (Object.keys(watchCallbacks).length === 0 && deviceEventSubscription) {
    LocationEventEmitter.removeSubscription(deviceEventSubscription);
    deviceEventSubscription = null;
  }
}

function getCurrentPosition(success) {
  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  (0, _invariant.default)(typeof success === 'function', 'Must provide a valid success callback.');
  (0, _invariant.default)(typeof options === 'object', 'options must be an object.');

  _getCurrentPositionAsyncWrapper(success, error, options);
}

function _getCurrentPositionAsyncWrapper(success, error, options) {
  var result;
  return _regenerator.default.async(function _getCurrentPositionAsyncWrapper$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          _context13.prev = 0;
          _context13.next = 3;
          return _regenerator.default.awrap(_ExpoLocation.default.requestPermissionsAsync());

        case 3:
          _context13.next = 5;
          return _regenerator.default.awrap(getCurrentPositionAsync(options));

        case 5:
          result = _context13.sent;
          success(result);
          _context13.next = 12;
          break;

        case 9:
          _context13.prev = 9;
          _context13.t0 = _context13["catch"](0);
          error(_context13.t0);

        case 12:
        case "end":
          return _context13.stop();
      }
    }
  }, null, null, [[0, 9]]);
}

function getPermissionsAsync() {
  return _regenerator.default.async(function getPermissionsAsync$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          _context14.next = 2;
          return _regenerator.default.awrap(_ExpoLocation.default.getPermissionsAsync());

        case 2:
          return _context14.abrupt("return", _context14.sent);

        case 3:
        case "end":
          return _context14.stop();
      }
    }
  });
}

function requestPermissionsAsync() {
  return _regenerator.default.async(function requestPermissionsAsync$(_context15) {
    while (1) {
      switch (_context15.prev = _context15.next) {
        case 0:
          _context15.next = 2;
          return _regenerator.default.awrap(_ExpoLocation.default.requestPermissionsAsync());

        case 2:
          return _context15.abrupt("return", _context15.sent);

        case 3:
        case "end":
          return _context15.stop();
      }
    }
  });
}

function hasServicesEnabledAsync() {
  return _regenerator.default.async(function hasServicesEnabledAsync$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          _context16.next = 2;
          return _regenerator.default.awrap(_ExpoLocation.default.hasServicesEnabledAsync());

        case 2:
          return _context16.abrupt("return", _context16.sent);

        case 3:
        case "end":
          return _context16.stop();
      }
    }
  });
}

function _validateTaskName(taskName) {
  (0, _invariant.default)(taskName && typeof taskName === 'string', '`taskName` must be a non-empty string.');
}

function isBackgroundLocationAvailableAsync() {
  var providerStatus;
  return _regenerator.default.async(function isBackgroundLocationAvailableAsync$(_context17) {
    while (1) {
      switch (_context17.prev = _context17.next) {
        case 0:
          _context17.next = 2;
          return _regenerator.default.awrap(getProviderStatusAsync());

        case 2:
          providerStatus = _context17.sent;
          return _context17.abrupt("return", providerStatus.backgroundModeEnabled);

        case 4:
        case "end":
          return _context17.stop();
      }
    }
  });
}

function startLocationUpdatesAsync(taskName) {
  var options,
      _args18 = arguments;
  return _regenerator.default.async(function startLocationUpdatesAsync$(_context18) {
    while (1) {
      switch (_context18.prev = _context18.next) {
        case 0:
          options = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {
            accuracy: LocationAccuracy.Balanced
          };

          _validateTaskName(taskName);

          _context18.next = 4;
          return _regenerator.default.awrap(_ExpoLocation.default.startLocationUpdatesAsync(taskName, options));

        case 4:
        case "end":
          return _context18.stop();
      }
    }
  });
}

function stopLocationUpdatesAsync(taskName) {
  return _regenerator.default.async(function stopLocationUpdatesAsync$(_context19) {
    while (1) {
      switch (_context19.prev = _context19.next) {
        case 0:
          _validateTaskName(taskName);

          _context19.next = 3;
          return _regenerator.default.awrap(_ExpoLocation.default.stopLocationUpdatesAsync(taskName));

        case 3:
        case "end":
          return _context19.stop();
      }
    }
  });
}

function hasStartedLocationUpdatesAsync(taskName) {
  return _regenerator.default.async(function hasStartedLocationUpdatesAsync$(_context20) {
    while (1) {
      switch (_context20.prev = _context20.next) {
        case 0:
          _validateTaskName(taskName);

          return _context20.abrupt("return", _ExpoLocation.default.hasStartedLocationUpdatesAsync(taskName));

        case 2:
        case "end":
          return _context20.stop();
      }
    }
  });
}

function _validateRegions(regions) {
  if (!regions || regions.length === 0) {
    throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');
  }

  for (var _iterator = regions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref4;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref4 = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref4 = _i.value;
    }

    var _region = _ref4;

    if (typeof _region.latitude !== 'number') {
      throw new TypeError("Region's latitude must be a number. Got '" + _region.latitude + "' instead.");
    }

    if (typeof _region.longitude !== 'number') {
      throw new TypeError("Region's longitude must be a number. Got '" + _region.longitude + "' instead.");
    }

    if (typeof _region.radius !== 'number') {
      throw new TypeError("Region's radius must be a number. Got '" + _region.radius + "' instead.");
    }
  }
}

function startGeofencingAsync(taskName) {
  var regions,
      _args21 = arguments;
  return _regenerator.default.async(function startGeofencingAsync$(_context21) {
    while (1) {
      switch (_context21.prev = _context21.next) {
        case 0:
          regions = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : [];

          _validateTaskName(taskName);

          _validateRegions(regions);

          _context21.next = 5;
          return _regenerator.default.awrap(_ExpoLocation.default.startGeofencingAsync(taskName, {
            regions: regions
          }));

        case 5:
        case "end":
          return _context21.stop();
      }
    }
  });
}

function stopGeofencingAsync(taskName) {
  return _regenerator.default.async(function stopGeofencingAsync$(_context22) {
    while (1) {
      switch (_context22.prev = _context22.next) {
        case 0:
          _validateTaskName(taskName);

          _context22.next = 3;
          return _regenerator.default.awrap(_ExpoLocation.default.stopGeofencingAsync(taskName));

        case 3:
        case "end":
          return _context22.stop();
      }
    }
  });
}

function hasStartedGeofencingAsync(taskName) {
  return _regenerator.default.async(function hasStartedGeofencingAsync$(_context23) {
    while (1) {
      switch (_context23.prev = _context23.next) {
        case 0:
          _validateTaskName(taskName);

          return _context23.abrupt("return", _ExpoLocation.default.hasStartedGeofencingAsync(taskName));

        case 2:
        case "end":
          return _context23.stop();
      }
    }
  });
}

function installWebGeolocationPolyfill() {
  if (_core.Platform.OS !== 'web') {
    window.navigator.geolocation = {
      getCurrentPosition: getCurrentPosition,
      watchPosition: watchPosition,
      clearWatch: clearWatch,
      stopObserving: function stopObserving() {}
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,