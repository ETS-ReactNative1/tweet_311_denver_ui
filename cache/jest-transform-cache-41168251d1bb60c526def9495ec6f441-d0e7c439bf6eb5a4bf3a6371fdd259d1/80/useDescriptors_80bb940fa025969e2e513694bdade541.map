{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","trackAction","NavigationBuilderContext","context","navigation","onAction","addActionListener","addFocusedListener","addStateGetter","onRouteFocus","navigations","state","getState","setOptions","router","screen","screens","route","acc","render","setState","options","screenOptions"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  FocusedNavigationListener,\n  NavigatorStateGetter,\n} from './NavigationBuilderContext';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport { Descriptor, NavigationHelpers, RouteConfig, RouteProp } from './types';\n\ntype Options<State extends NavigationState, ScreenOptions extends object> = {\n  state: State;\n  screens: Record<string, RouteConfig<ParamListBase, string, ScreenOptions>>;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addActionListener: (listener: ChildActionListener) => void;\n  addFocusedListener: (listener: FocusedNavigationListener) => void;\n  addStateGetter: (key: string, getter: NavigatorStateGetter) => void;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends object\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addActionListener,\n  addFocusedListener,\n  addStateGetter,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { trackAction } = React.useContext(NavigationBuilderContext);\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      onRouteFocus,\n      trackAction,\n    }),\n    [\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      onRouteFocus,\n      addStateGetter,\n      trackAction,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce(\n    (acc, route) => {\n      const screen = screens[route.name];\n      const navigation = navigations[route.key];\n\n      acc[route.key] = {\n        navigation,\n        render() {\n          return (\n            <NavigationBuilderContext.Provider key={route.key} value={context}>\n              <SceneView\n                navigation={navigation}\n                route={route}\n                screen={screen}\n                getState={getState}\n                setState={setState}\n              />\n            </NavigationBuilderContext.Provider>\n          );\n        },\n        options: {\n          // The default `screenOptions` passed to the navigator\n          ...(typeof screenOptions === 'object' || screenOptions == null\n            ? screenOptions\n            : screenOptions({\n                // @ts-ignore\n                route,\n                navigation,\n              })),\n          // The `options` prop passed to `Screen` elements\n          ...(typeof screen.options === 'object' || screen.options == null\n            ? screen.options\n            : screen.options({\n                // @ts-ignore\n                route,\n                navigation,\n              })),\n          // The options set via `navigation.setOptions`\n          ...options[route.key],\n        },\n      };\n\n      return acc;\n    },\n    {} as {\n      [key: string]: Descriptor<ParamListBase, string, State, ScreenOptions>;\n    }\n  );\n}\n"]}