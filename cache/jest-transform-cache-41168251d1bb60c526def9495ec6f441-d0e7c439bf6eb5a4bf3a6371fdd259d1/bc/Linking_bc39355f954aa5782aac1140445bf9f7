5387e86e75431e8d8ea1744471f649fb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _expoConstants = _interopRequireDefault(require("expo-constants"));

var _qs = _interopRequireDefault(require("qs"));

var _urlParse = _interopRequireDefault(require("url-parse"));

var _LinkingModule = _interopRequireDefault(require("./LinkingModule"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var manifest = _expoConstants.default.manifest;
var USES_CUSTOM_SCHEME = _expoConstants.default.appOwnership === 'standalone' && manifest.scheme;
var HOST_URI = manifest.hostUri;

if (!HOST_URI && !USES_CUSTOM_SCHEME) {
  HOST_URI = _removeScheme(_expoConstants.default.linkingUri).replace(/\/--($|\/.*$)/, '');
}

var IS_EXPO_HOSTED = HOST_URI && (/^(.*\.)?(expo\.io|exp\.host|exp\.direct|expo\.test)(:.*)?(\/.*)?$/.test(HOST_URI) || manifest.developer);

function _removeScheme(url) {
  return url.replace(/^[a-zA-Z0-9+.-]+:\/\//, '');
}

function _removePort(url) {
  return url.replace(/(?=([a-zA-Z0-9+.-]+:\/\/)?[^/]):\d+/, '');
}

function _removeLeadingSlash(url) {
  return url.replace(/^\//, '');
}

function _removeTrailingSlash(url) {
  return url.replace(/\/$/, '');
}

function _removeTrailingSlashAndQueryString(url) {
  return url.replace(/\/?\?.*$/, '');
}

function makeUrl() {
  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var scheme = 'exp';
  var manifestScheme = manifest.scheme || manifest.detach && manifest.detach.scheme;

  if (_expoConstants.default.appOwnership === 'standalone' && manifestScheme) {
    scheme = manifestScheme;
  } else if (_expoConstants.default.appOwnership === 'standalone' && !manifestScheme) {
    throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');
  } else if (_expoConstants.default.appOwnership === 'expo' && !manifestScheme) {
    console.warn('Linking requires that you provide a `scheme` in app.json for standalone apps - if it is left blank, your app may crash. The scheme does not apply to development in the Expo client but you should add it as soon as you start working with Linking to avoid creating a broken build. Add a `scheme` to silence this warning. Learn more about Linking at https://docs.expo.io/versions/latest/workflow/linking/');
  }

  var hostUri = HOST_URI || '';

  if (USES_CUSTOM_SCHEME && IS_EXPO_HOSTED) {
    hostUri = '';
  }

  if (path) {
    if (IS_EXPO_HOSTED && hostUri) {
      path = "/--/" + _removeLeadingSlash(path);
    }

    if (!path.startsWith('/') && hostUri) {
      path = "/" + path;
    } else if (path.startsWith('/') && !hostUri) {
      path = path.substr(1);
    }
  } else {
    path = '';
  }

  var queryString = '';
  var queryStringMatchResult = hostUri.match(/(.*)\?(.+)/);

  if (queryStringMatchResult) {
    hostUri = queryStringMatchResult[1];
    queryString = queryStringMatchResult[2];
    var paramsFromHostUri = {};

    try {
      var parsedParams = _qs.default.parse(queryString);

      if (typeof parsedParams === 'object') {
        paramsFromHostUri = parsedParams;
      }
    } catch (e) {}

    queryParams = _objectSpread({}, queryParams, {}, paramsFromHostUri);
  }

  queryString = _qs.default.stringify(queryParams);

  if (queryString) {
    queryString = "?" + queryString;
  }

  hostUri = _removeTrailingSlash(hostUri);
  return encodeURI(scheme + "://" + hostUri + path + queryString);
}

function parse(url) {
  if (!url) {
    throw new Error('parse cannot be called with a null value');
  }

  var parsed = (0, _urlParse.default)(url, true);
  var queryParams = parsed.query;
  var hostUri = HOST_URI || '';

  var hostUriStripped = _removePort(_removeTrailingSlashAndQueryString(hostUri));

  var path = parsed.pathname || null;
  var hostname = parsed.hostname || null;
  var scheme = parsed.protocol || null;

  if (scheme) {
    scheme = scheme.substring(0, scheme.length - 1);
  }

  if (path) {
    path = _removeLeadingSlash(path);
    var expoPrefix = null;

    if (hostUriStripped) {
      var parts = hostUriStripped.split('/');
      expoPrefix = parts.slice(1).join('/') + "/--/";
    }

    if (IS_EXPO_HOSTED && !USES_CUSTOM_SCHEME && expoPrefix && path.startsWith(expoPrefix)) {
      path = path.substring(expoPrefix.length);
      hostname = null;
    } else if (path.indexOf('+') > -1) {
      path = path.substring(path.indexOf('+') + 1);
    }
  }

  return {
    hostname: hostname,
    path: path,
    queryParams: queryParams,
    scheme: scheme
  };
}

function parseInitialURLAsync() {
  var initialUrl;
  return _regenerator.default.async(function parseInitialURLAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _regenerator.default.awrap(_LinkingModule.default.getInitialURL());

        case 2:
          initialUrl = _context.sent;

          if (initialUrl) {
            _context.next = 5;
            break;
          }

          return _context.abrupt("return", {
            scheme: null,
            hostname: null,
            path: null,
            queryParams: null
          });

        case 5:
          return _context.abrupt("return", parse(initialUrl));

        case 6:
        case "end":
          return _context.stop();
      }
    }
  });
}

var newLinking = new _LinkingModule.default.constructor();
newLinking.makeUrl = makeUrl;
newLinking.parse = parse;
newLinking.parseInitialURLAsync = parseInitialURLAsync;
var _default = newLinking;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,