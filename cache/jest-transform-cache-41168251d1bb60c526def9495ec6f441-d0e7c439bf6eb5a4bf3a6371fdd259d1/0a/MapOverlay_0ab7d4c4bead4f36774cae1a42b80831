84758828db14d8049a551264d650586b
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _decorateMapComponent = _interopRequireWildcard(require("./decorateMapComponent"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var viewConfig = {
  uiViewClassName: 'AIR<provider>MapOverlay',
  validAttributes: {
    image: true
  }
};

var propTypes = _objectSpread({}, _reactNative.View.propTypes, {
  image: _propTypes.default.any.isRequired,
  bounds: _propTypes.default.arrayOf(_propTypes.default.array.isRequired).isRequired,
  tappable: _propTypes.default.bool,
  onPress: _propTypes.default.func
});

var MapOverlay = function (_Component) {
  (0, _inherits2.default)(MapOverlay, _Component);

  function MapOverlay() {
    (0, _classCallCheck2.default)(this, MapOverlay);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapOverlay).apply(this, arguments));
  }

  (0, _createClass2.default)(MapOverlay, [{
    key: "render",
    value: function render() {
      var image;

      if (this.props.image) {
        if (typeof this.props.image.startsWith === 'function' && this.props.image.startsWith('http')) {
          image = this.props.image;
        } else {
          image = _reactNative.Image.resolveAssetSource(this.props.image) || {};
          image = image.uri;
        }
      }

      var AIRMapOverlay = this.getAirComponent();
      return _react.default.createElement(AIRMapOverlay, (0, _extends2.default)({}, this.props, {
        image: image,
        style: [styles.overlay, this.props.style]
      }));
    }
  }]);
  return MapOverlay;
}(_react.Component);

MapOverlay.propTypes = propTypes;
MapOverlay.viewConfig = viewConfig;

var styles = _reactNative.StyleSheet.create({
  overlay: {
    position: 'absolute',
    backgroundColor: 'transparent'
  }
});

MapOverlay.Animated = _reactNative.Animated.createAnimatedComponent(MapOverlay);

var _default = (0, _decorateMapComponent.default)(MapOverlay, {
  componentType: 'Overlay',
  providers: {
    google: {
      ios: _decorateMapComponent.SUPPORTED,
      android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
    }
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1hcE92ZXJsYXkuanMiXSwibmFtZXMiOlsidmlld0NvbmZpZyIsInVpVmlld0NsYXNzTmFtZSIsInZhbGlkQXR0cmlidXRlcyIsImltYWdlIiwicHJvcFR5cGVzIiwiVmlldyIsIlByb3BUeXBlcyIsImFueSIsImlzUmVxdWlyZWQiLCJib3VuZHMiLCJhcnJheU9mIiwiYXJyYXkiLCJ0YXBwYWJsZSIsImJvb2wiLCJvblByZXNzIiwiZnVuYyIsIk1hcE92ZXJsYXkiLCJwcm9wcyIsInN0YXJ0c1dpdGgiLCJJbWFnZSIsInJlc29sdmVBc3NldFNvdXJjZSIsInVyaSIsIkFJUk1hcE92ZXJsYXkiLCJnZXRBaXJDb21wb25lbnQiLCJzdHlsZXMiLCJvdmVybGF5Iiwic3R5bGUiLCJDb21wb25lbnQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwicG9zaXRpb24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJBbmltYXRlZCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50VHlwZSIsInByb3ZpZGVycyIsImdvb2dsZSIsImlvcyIsIlNVUFBPUlRFRCIsImFuZHJvaWQiLCJVU0VTX0RFRkFVTFRfSU1QTEVNRU5UQVRJT04iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7OztBQUtBLElBQU1BLFVBQVUsR0FBRztBQUNqQkMsRUFBQUEsZUFBZSxFQUFFLHlCQURBO0FBRWpCQyxFQUFBQSxlQUFlLEVBQUU7QUFDZkMsSUFBQUEsS0FBSyxFQUFFO0FBRFE7QUFGQSxDQUFuQjs7QUFPQSxJQUFNQyxTQUFTLHFCQUNWQyxrQkFBS0QsU0FESztBQUdiRCxFQUFBQSxLQUFLLEVBQUVHLG1CQUFVQyxHQUFWLENBQWNDLFVBSFI7QUFLYkMsRUFBQUEsTUFBTSxFQUFFSCxtQkFBVUksT0FBVixDQUFrQkosbUJBQVVLLEtBQVYsQ0FBZ0JILFVBQWxDLEVBQThDQSxVQUx6QztBQVNiSSxFQUFBQSxRQUFRLEVBQUVOLG1CQUFVTyxJQVRQO0FBV2JDLEVBQUFBLE9BQU8sRUFBRVIsbUJBQVVTO0FBWE4sRUFBZjs7SUFjTUMsVTs7Ozs7Ozs7Ozs2QkFDSztBQUNQLFVBQUliLEtBQUo7O0FBQ0EsVUFBSSxLQUFLYyxLQUFMLENBQVdkLEtBQWYsRUFBc0I7QUFDcEIsWUFDRSxPQUFPLEtBQUtjLEtBQUwsQ0FBV2QsS0FBWCxDQUFpQmUsVUFBeEIsS0FBdUMsVUFBdkMsSUFDQSxLQUFLRCxLQUFMLENBQVdkLEtBQVgsQ0FBaUJlLFVBQWpCLENBQTRCLE1BQTVCLENBRkYsRUFHRTtBQUNBZixVQUFBQSxLQUFLLEdBQUcsS0FBS2MsS0FBTCxDQUFXZCxLQUFuQjtBQUNELFNBTEQsTUFLTztBQUNMQSxVQUFBQSxLQUFLLEdBQUdnQixtQkFBTUMsa0JBQU4sQ0FBeUIsS0FBS0gsS0FBTCxDQUFXZCxLQUFwQyxLQUE4QyxFQUF0RDtBQUNBQSxVQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ2tCLEdBQWQ7QUFDRDtBQUNGOztBQUVELFVBQU1DLGFBQWEsR0FBRyxLQUFLQyxlQUFMLEVBQXRCO0FBRUEsYUFDRSw2QkFBQyxhQUFELDZCQUNNLEtBQUtOLEtBRFg7QUFFRSxRQUFBLEtBQUssRUFBRWQsS0FGVDtBQUdFLFFBQUEsS0FBSyxFQUFFLENBQUNxQixNQUFNLENBQUNDLE9BQVIsRUFBaUIsS0FBS1IsS0FBTCxDQUFXUyxLQUE1QjtBQUhULFNBREY7QUFPRDs7O0VBeEJzQkMsZ0I7O0FBMkJ6QlgsVUFBVSxDQUFDWixTQUFYLEdBQXVCQSxTQUF2QjtBQUNBWSxVQUFVLENBQUNoQixVQUFYLEdBQXdCQSxVQUF4Qjs7QUFFQSxJQUFNd0IsTUFBTSxHQUFHSSx3QkFBV0MsTUFBWCxDQUFrQjtBQUMvQkosRUFBQUEsT0FBTyxFQUFFO0FBQ1BLLElBQUFBLFFBQVEsRUFBRSxVQURIO0FBRVBDLElBQUFBLGVBQWUsRUFBRTtBQUZWO0FBRHNCLENBQWxCLENBQWY7O0FBT0FmLFVBQVUsQ0FBQ2dCLFFBQVgsR0FBc0JBLHNCQUFTQyx1QkFBVCxDQUFpQ2pCLFVBQWpDLENBQXRCOztlQUVlLG1DQUFxQkEsVUFBckIsRUFBaUM7QUFDOUNrQixFQUFBQSxhQUFhLEVBQUUsU0FEK0I7QUFFOUNDLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxNQUFNLEVBQUU7QUFDTkMsTUFBQUEsR0FBRyxFQUFFQywrQkFEQztBQUVOQyxNQUFBQSxPQUFPLEVBQUVDO0FBRkg7QUFEQztBQUZtQyxDQUFqQyxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBWaWV3LCBTdHlsZVNoZWV0LCBJbWFnZSwgQW5pbWF0ZWQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5pbXBvcnQgZGVjb3JhdGVNYXBDb21wb25lbnQsIHtcbiAgU1VQUE9SVEVELFxuICBVU0VTX0RFRkFVTFRfSU1QTEVNRU5UQVRJT04sXG59IGZyb20gJy4vZGVjb3JhdGVNYXBDb21wb25lbnQnO1xuXG5jb25zdCB2aWV3Q29uZmlnID0ge1xuICB1aVZpZXdDbGFzc05hbWU6ICdBSVI8cHJvdmlkZXI+TWFwT3ZlcmxheScsXG4gIHZhbGlkQXR0cmlidXRlczoge1xuICAgIGltYWdlOiB0cnVlLFxuICB9LFxufTtcblxuY29uc3QgcHJvcFR5cGVzID0ge1xuICAuLi5WaWV3LnByb3BUeXBlcyxcbiAgLy8gQSBjdXN0b20gaW1hZ2UgdG8gYmUgdXNlZCBhcyBvdmVybGF5LlxuICBpbWFnZTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICAvLyBUb3AgbGVmdCBhbmQgYm90dG9tIHJpZ2h0IGNvb3JkaW5hdGVzIGZvciB0aGUgb3ZlcmxheVxuICBib3VuZHM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkKS5pc1JlcXVpcmVkLFxuICAvKiBCb29sZWFuIHRvIGFsbG93IGFuIG92ZXJsYXkgdG8gYmUgdGFwcGFibGUgYW5kIHVzZSB0aGVcbiAgICogb25QcmVzcyBmdW5jdGlvblxuICAgKi9cbiAgdGFwcGFibGU6IFByb3BUeXBlcy5ib29sLFxuICAvLyBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHByZXNzZXMgb24gdGhlIG92ZXJsYXlcbiAgb25QcmVzczogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5jbGFzcyBNYXBPdmVybGF5IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGxldCBpbWFnZTtcbiAgICBpZiAodGhpcy5wcm9wcy5pbWFnZSkge1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgdGhpcy5wcm9wcy5pbWFnZS5zdGFydHNXaXRoID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIHRoaXMucHJvcHMuaW1hZ2Uuc3RhcnRzV2l0aCgnaHR0cCcpXG4gICAgICApIHtcbiAgICAgICAgaW1hZ2UgPSB0aGlzLnByb3BzLmltYWdlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW1hZ2UgPSBJbWFnZS5yZXNvbHZlQXNzZXRTb3VyY2UodGhpcy5wcm9wcy5pbWFnZSkgfHwge307XG4gICAgICAgIGltYWdlID0gaW1hZ2UudXJpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IEFJUk1hcE92ZXJsYXkgPSB0aGlzLmdldEFpckNvbXBvbmVudCgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBSVJNYXBPdmVybGF5XG4gICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICBpbWFnZT17aW1hZ2V9XG4gICAgICAgIHN0eWxlPXtbc3R5bGVzLm92ZXJsYXksIHRoaXMucHJvcHMuc3R5bGVdfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbk1hcE92ZXJsYXkucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTWFwT3ZlcmxheS52aWV3Q29uZmlnID0gdmlld0NvbmZpZztcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBvdmVybGF5OiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICB9LFxufSk7XG5cbk1hcE92ZXJsYXkuQW5pbWF0ZWQgPSBBbmltYXRlZC5jcmVhdGVBbmltYXRlZENvbXBvbmVudChNYXBPdmVybGF5KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVjb3JhdGVNYXBDb21wb25lbnQoTWFwT3ZlcmxheSwge1xuICBjb21wb25lbnRUeXBlOiAnT3ZlcmxheScsXG4gIHByb3ZpZGVyczoge1xuICAgIGdvb2dsZToge1xuICAgICAgaW9zOiBTVVBQT1JURUQsXG4gICAgICBhbmRyb2lkOiBVU0VTX0RFRkFVTFRfSU1QTEVNRU5UQVRJT04sXG4gICAgfSxcbiAgfSxcbn0pO1xuIl19