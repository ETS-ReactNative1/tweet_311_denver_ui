{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","TouchableItem","React","borderless","pressColor","Platform","children","TouchableNativeFeedback","style","top","bottom","right","left","disabled"],"mappings":";;;;;;;;;;;;;;;;;;;AASA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAQA,IAAA,iBAAA,GAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAMA,wBAAwB,GAA9B,EAAA;;IAEe,a;;;;;;;;;;6BAMJ;AASP,UACEK,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,SAAAA,IACAA,YAAAA,CAAAA,QAAAA,CAAAA,OAAAA,IAFF,wBAAA,EAGE;AACA,YAAA,WAAA,GAA6D,KAA7D,KAAA;AAAA,YAAM,KAAN,GAAA,WAAA,CAAM,KAAN;AAAA,YAAM,UAAN,GAAA,WAAA,CAAM,UAAN;AAAA,YAAM,UAAN,GAAA,WAAA,CAAM,UAAN;AAAA,YAAuCC,QAAvC,GAAA,WAAA,CAAuCA,QAAvC;AAAA,YAAA,IAAA,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,CAAA,CAAA;;AAEA,eACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,uBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,UAAA,aAAa,EAAEC,YAAAA,CAAAA,uBAAAA,CAFjB,sBAEiBA,EAFjB;AAGE,UAAA,UAAU,EAAEA,YAAAA,CAAAA,uBAAAA,CAAAA,MAAAA,CAAAA,UAAAA,EAAAA,UAAAA;AAHd,SAAA,CAAA,EAKE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,UAAA,KAAK,EAAEC;AAAb,SAAA,EAAqBN,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CANzB,QAMyBA,CAArB,CALF,CADF;AANF,OAAA,MAeO,IAAIG,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAJ,KAAA,EAA2B;AAChC,eACE,KAAA,CAAA,aAAA,CAAC,iBAAA,CAAD,OAAA,EAAA,QAAA,CAAA;AACE,UAAA,OAAO,EAAE;AAAEI,YAAAA,GAAG,EAAL,EAAA;AAAWC,YAAAA,MAAM,EAAjB,EAAA;AAAuBC,YAAAA,KAAK,EAA5B,EAAA;AAAkCC,YAAAA,IAAI,EAAE;AAAxC,WADX;AAEE,UAAA,oBAAoB,EAFtB,IAAA;AAGE,UAAA,OAAO,EAAE,CAAC,KAAA,KAAA,CAAWC;AAHvB,SAAA,EAIM,KAJN,KAAA,CAAA,EAMG,KAAA,KAAA,CAPL,QACE,CADF;AADK,OAAA,MAWA;AACL,eACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,gBAAA,EAAsB,KAAtB,KAAA,EACG,KAAA,KAAA,CAFL,QACE,CADF;AAKD;AACF;;;EAhDwCX,KAAK,CAAjC,S;;;;gBAAMD,a,kBACG;AACpBE,EAAAA,UAAU,EADU,KAAA;AAEpBC,EAAAA,UAAU,EAAE;AAFQ,C","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport BorderlessButton from './BorderlessButton';\n\ntype Props = ViewProps & {\n  pressColor: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, pressColor, borderless, children, ...rest } = this.props;\n\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else if (Platform.OS === 'ios') {\n      return (\n        <BorderlessButton\n          hitSlop={{ top: 10, bottom: 10, right: 10, left: 10 }}\n          disallowInterruption\n          enabled={!this.props.disabled}\n          {...this.props}\n        >\n          {this.props.children}\n        </BorderlessButton>\n      );\n    } else {\n      return (\n        <TouchableOpacity {...this.props}>\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]}