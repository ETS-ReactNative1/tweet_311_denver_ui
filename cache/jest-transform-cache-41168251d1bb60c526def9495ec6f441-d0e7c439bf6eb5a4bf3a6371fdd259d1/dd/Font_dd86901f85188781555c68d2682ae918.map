{"version":3,"sources":["../src/Font.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AASA,IAAM,MAAM,GAAgC,EAA5C;AACA,IAAM,YAAY,GAAsC,EAAxD;;AASM,SAAU,iBAAV,CAA4B,IAA5B,EAA+C;AACnD,MAAI,CAAC,IAAD,IAAS,CAAC,wCAAuB,IAAvB,CAAd,EAA4C;AAC1C,WAAO,IAAP;AACD;;AAED,MAAI,CAAC,QAAQ,CAAC,IAAD,CAAb,EAAqB;AACnB,QAAI,OAAJ,EAAa;AACX,UAAI,SAAS,CAAC,IAAD,CAAb,EAAqB;AACnB,QAAA,OAAO,CAAC,KAAR,qCACmC,IADnC;AAKD,OAND,MAMO;AACL,QAAA,OAAO,CAAC,KAAR,mBACiB,IADjB;AAKD;AACF;;AAED,WAAO,QAAP;AACD;;AAED,uBAAmB,mCAAkB,IAAlB,CAAnB;AACD;;AAEK,SAAU,QAAV,CAAmB,IAAnB,EAA+B;AACnC,SAAO,MAAM,CAAC,cAAP,CAAsB,IAAtB,CAAP;AACD;;AAEK,SAAU,SAAV,CAAoB,IAApB,EAAgC;AACpC,SAAO,YAAY,CAAC,cAAb,CAA4B,IAA5B,CAAP;AACD;;AAEM,SAAe,SAAf,CACL,SADK,EAEL,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAID,OAAO,SAAP,KAAqB,QAJpB;AAAA;AAAA;AAAA;;AAKG,UAAA,OALH,GAKa,SALb;AAMG,UAAA,KANH,GAMW,MAAM,CAAC,IAAP,CAAY,OAAZ,CANX;AAAA;AAAA,4CAOG,OAAO,CAAC,GAAR,CAAY,KAAK,CAAC,GAAN,CAAU,UAAA,IAAI;AAAA,mBAAI,SAAS,CAAC,IAAD,EAAO,OAAO,CAAC,IAAD,CAAd,CAAb;AAAA,WAAd,CAAZ,CAPH;;AAAA;AAAA;;AAAA;AAWC,UAAA,IAXD,GAWQ,SAXR;;AAAA,eAaD,MAAM,CAAC,IAAD,CAbL;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,eAiBD,YAAY,CAAC,IAAD,CAjBX;AAAA;AAAA;AAAA;;AAAA,4CAkBI,YAAY,CAAC,IAAD,CAlBhB;;AAAA;AAAA,cA0BA,MA1BA;AAAA;AAAA;AAAA;;AAAA,gBA2BG,IAAI,KAAJ,0CAAgD,IAAhD,QA3BH;;AAAA;AA6BC,UAAA,KA7BD,GA6BS,mCAAkB,MAAlB,CA7BT;;AA8BL,UAAA,YAAY,CAAC,IAAD,CAAZ,GAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAEZ,qCAAoB,IAApB,EAA0B,KAA1B,CAFY;;AAAA;AAGlB,oBAAA,MAAM,CAAC,IAAD,CAAN,GAAe,IAAf;;AAHkB;AAAA;AAKlB,2BAAO,YAAY,CAAC,IAAD,CAAnB;AALkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAD,EAArB;;AA9BK;AAAA,4CAuCC,YAAY,CAAC,IAAD,CAvCb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8CP,IAAI,MAAM,IAAI,MAAM,CAAC,OAArB,EAA8B;AAC5B,MAAI,qBAAqB,GAAG,KAA5B;AAEA,EAAA,MAAM,CAAC,cAAP,CAAsB,OAAtB,EAA+B,MAA/B,EAAuC;AACrC,IAAA,GADqC,iBAClC;AACD,UAAI,CAAC,qBAAL,EAA4B;AAC1B,QAAA,OAAO,CAAC,IAAR;AAGA,QAAA,qBAAqB,GAAG,IAAxB;AACD;;AACD,aAAO;AACL,QAAA,iBAAiB,EAAjB,iBADK;AAEL,QAAA,QAAQ,EAAR,QAFK;AAGL,QAAA,SAAS,EAAT,SAHK;AAIL,QAAA,SAAS,EAAT;AAJK,OAAP;AAMD;AAdoC,GAAvC;AAgBD","sourcesContent":["import {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nimport { FontSource, FontResource } from './Font.types';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n */\nexport function processFontFamily(name: string | null): string | null {\n  if (!name || !fontFamilyNeedsScoping(name)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\n          `You started loading the font \"${name}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${name}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(name)}`;\n}\n\nexport function isLoaded(name: string): boolean {\n  return loaded.hasOwnProperty(name);\n}\n\nexport function isLoading(name: string): boolean {\n  return loadPromises.hasOwnProperty(name);\n}\n\nexport async function loadAsync(\n  nameOrMap: string | { [name: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof nameOrMap === 'object') {\n    const fontMap = nameOrMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n    return;\n  }\n\n  const name = nameOrMap;\n\n  if (loaded[name]) {\n    return;\n  }\n\n  if (loadPromises[name]) {\n    return loadPromises[name];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  if (!source) {\n    throw new Error(`No source from which to load font \"${name}\"`);\n  }\n  const asset = getAssetForSource(source);\n  loadPromises[name] = (async () => {\n    try {\n      await loadSingleFontAsync(name, asset);\n      loaded[name] = true;\n    } finally {\n      delete loadPromises[name];\n    }\n  })();\n\n  await loadPromises[name];\n}\n\nexport { FontSource, FontResource };\n\ndeclare var module: any;\n\nif (module && module.exports) {\n  let wasImportWarningShown = false;\n  // @ts-ignore: Temporarily define an export named \"Font\" for legacy compatibility\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\n          `The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.`\n        );\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync,\n      };\n    },\n  });\n}\n"],"sourceRoot":""}