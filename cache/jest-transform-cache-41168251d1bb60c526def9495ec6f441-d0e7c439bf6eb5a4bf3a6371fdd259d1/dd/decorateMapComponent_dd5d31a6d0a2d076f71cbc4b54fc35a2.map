{"version":3,"sources":["decorateMapComponent.js"],"names":["SUPPORTED","USES_DEFAULT_IMPLEMENTATION","NOT_SUPPORTED","getAirMapName","provider","Platform","OS","PROVIDER_GOOGLE","getAirComponentName","component","contextTypes","PropTypes","string","createNotSupportedComponent","message","console","error","getViewManagerConfig","viewManagerName","UIManager","NativeModules","googleMapIsInstalled","decorateMapComponent","Component","componentType","providers","components","getDefaultComponent","prototype","getAirComponent","context","PROVIDER_DEFAULT","providerInfo","platformSupport","componentName","getUIManagerCommand","name","Commands","getMapManagerCommand","airComponentName"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { requireNativeComponent, NativeModules, Platform } from 'react-native';\nimport { PROVIDER_DEFAULT, PROVIDER_GOOGLE } from './ProviderConstants';\n\nexport const SUPPORTED = 'SUPPORTED';\nexport const USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexport const NOT_SUPPORTED = 'NOT_SUPPORTED';\n\nexport function getAirMapName(provider) {\n  if (Platform.OS === 'android') {\n    return 'AIRMap';\n  }\n  if (provider === PROVIDER_GOOGLE) {\n    return 'AIRGoogleMap';\n  }\n  return 'AIRMap';\n}\n\nfunction getAirComponentName(provider, component) {\n  return `${getAirMapName(provider)}${component}`;\n}\n\nexport const contextTypes = {\n  provider: PropTypes.string,\n};\n\nexport const createNotSupportedComponent = message => () => {\n  console.error(message);\n  return null;\n};\n\nfunction getViewManagerConfig(viewManagerName) {\n  const UIManager = NativeModules.UIManager;\n  if (!UIManager.getViewManagerConfig) {\n    // RN < 0.58\n    return UIManager[viewManagerName];\n  }\n  // RN >= 0.58\n  return UIManager.getViewManagerConfig(viewManagerName);\n}\n\nexport const googleMapIsInstalled = !!getViewManagerConfig(\n  getAirMapName(PROVIDER_GOOGLE)\n);\n\nexport default function decorateMapComponent(\n  Component,\n  { componentType, providers }\n) {\n  const components = {};\n\n  const getDefaultComponent = () =>\n    requireNativeComponent(getAirComponentName(null, componentType), Component);\n\n  Component.contextTypes = contextTypes;\n\n  Component.prototype.getAirComponent = function getAirComponent() {\n    const provider = this.context.provider || PROVIDER_DEFAULT;\n    if (components[provider]) {\n      return components[provider];\n    }\n\n    if (provider === PROVIDER_DEFAULT) {\n      components[PROVIDER_DEFAULT] = getDefaultComponent();\n      return components[PROVIDER_DEFAULT];\n    }\n\n    const providerInfo = providers[provider];\n    const platformSupport = providerInfo[Platform.OS];\n    const componentName = getAirComponentName(provider, componentType);\n    if (platformSupport === NOT_SUPPORTED) {\n      components[provider] = createNotSupportedComponent(\n        `react-native-maps: ${componentName} is not supported on ${Platform.OS}`\n      );\n    } else if (platformSupport === SUPPORTED) {\n      if (\n        provider !== PROVIDER_GOOGLE ||\n        (Platform.OS === 'ios' && googleMapIsInstalled)\n      ) {\n        components[provider] = requireNativeComponent(componentName, Component);\n      }\n    } else {\n      // (platformSupport === USES_DEFAULT_IMPLEMENTATION)\n      if (!components[PROVIDER_DEFAULT]) {\n        components[PROVIDER_DEFAULT] = getDefaultComponent();\n      }\n      components[provider] = components[PROVIDER_DEFAULT];\n    }\n\n    return components[provider];\n  };\n\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {\n    const componentName = getAirComponentName(\n      this.context.provider,\n      componentType\n    );\n    return getViewManagerConfig(componentName).Commands[name];\n  };\n\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(\n    name\n  ) {\n    const airComponentName = `${getAirComponentName(\n      this.context.provider,\n      componentType\n    )}Manager`;\n    return NativeModules[airComponentName][name];\n  };\n\n  return Component;\n}\n"]}