86a06344537939aa28b7131affeb2143
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _NativeBugReporting = _interopRequireDefault(require("./NativeBugReporting"));

var _NativeRedBox = _interopRequireDefault(require("../NativeModules/specs/NativeRedBox"));

var RCTDeviceEventEmitter = require("../EventEmitter/RCTDeviceEventEmitter");

var infoLog = require("../Utilities/infoLog");

function defaultExtras() {
  BugReporting.addFileSource('react_hierarchy.txt', function () {
    return require("./dumpReactTree")();
  });
}

var BugReporting = function () {
  function BugReporting() {
    (0, _classCallCheck2.default)(this, BugReporting);
  }

  (0, _createClass2.default)(BugReporting, null, [{
    key: "_maybeInit",
    value: function _maybeInit() {
      if (!BugReporting._subscription) {
        BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
        defaultExtras();
      }

      if (!BugReporting._redboxSubscription) {
        BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
      }
    }
  }, {
    key: "addSource",
    value: function addSource(key, callback) {
      return this._addSource(key, callback, BugReporting._extraSources);
    }
  }, {
    key: "addFileSource",
    value: function addFileSource(key, callback) {
      return this._addSource(key, callback, BugReporting._fileSources);
    }
  }, {
    key: "_addSource",
    value: function _addSource(key, callback, source) {
      BugReporting._maybeInit();

      if (source.has(key)) {
        console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
      }

      source.set(key, callback);
      return {
        remove: function remove() {
          source.delete(key);
        }
      };
    }
  }, {
    key: "collectExtraData",
    value: function collectExtraData() {
      var extraData = {};

      for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref3;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref3 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref3 = _i.value;
        }

        var _ref7 = _ref3;

        var _ref2 = (0, _slicedToArray2.default)(_ref7, 2);

        var _key3 = _ref2[0];
        var _callback2 = _ref2[1];
        extraData[_key3] = _callback2();
      }

      var fileData = {};

      for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref6;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref6 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref6 = _i2.value;
        }

        var _ref8 = _ref6;

        var _ref5 = (0, _slicedToArray2.default)(_ref8, 2);

        var _key4 = _ref5[0];
        var _callback3 = _ref5[1];
        fileData[_key4] = _callback3();
      }

      infoLog('BugReporting extraData:', extraData);

      if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
        _NativeBugReporting.default.setExtraData(extraData, fileData);
      }

      if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
        _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
      }

      return {
        extras: extraData,
        files: fileData
      };
    }
  }]);
  return BugReporting;
}();

BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;
BugReporting._redboxSubscription = null;
module.exports = BugReporting;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,