d9790856af874cd2b9e548ae05ad96a3
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ProviderPropType = exports.Animated = exports.MAP_TYPES = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _MapMarker = _interopRequireDefault(require("./MapMarker"));

var _MapPolyline = _interopRequireDefault(require("./MapPolyline"));

var _MapPolygon = _interopRequireDefault(require("./MapPolygon"));

var _MapCircle = _interopRequireDefault(require("./MapCircle"));

var _MapCallout = _interopRequireDefault(require("./MapCallout"));

var _MapCalloutSubview = _interopRequireDefault(require("./MapCalloutSubview"));

var _MapOverlay = _interopRequireDefault(require("./MapOverlay"));

var _MapUrlTile = _interopRequireDefault(require("./MapUrlTile"));

var _MapWMSTile = _interopRequireDefault(require("./MapWMSTile"));

var _MapLocalTile = _interopRequireDefault(require("./MapLocalTile"));

var _MapHeatmap = _interopRequireDefault(require("./MapHeatmap"));

var _AnimatedRegion = _interopRequireDefault(require("./AnimatedRegion"));

var _decorateMapComponent = require("./decorateMapComponent");

var ProviderConstants = _interopRequireWildcard(require("./ProviderConstants"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var MAP_TYPES = {
  STANDARD: 'standard',
  SATELLITE: 'satellite',
  HYBRID: 'hybrid',
  TERRAIN: 'terrain',
  NONE: 'none',
  MUTEDSTANDARD: 'mutedStandard'
};
exports.MAP_TYPES = MAP_TYPES;
var GOOGLE_MAPS_ONLY_TYPES = [MAP_TYPES.TERRAIN, MAP_TYPES.NONE];
var viewConfig = {
  uiViewClassName: 'AIR<provider>Map',
  validAttributes: {
    region: true
  }
};

var CameraShape = _propTypes.default.shape({
  center: _propTypes.default.shape({
    latitude: _propTypes.default.number.isRequired,
    longitude: _propTypes.default.number.isRequired
  }),
  pitch: _propTypes.default.number.isRequired,
  heading: _propTypes.default.number.isRequired,
  altitude: _propTypes.default.number.isRequired,
  zoom: _propTypes.default.number.isRequired
});

var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

var propTypes = _objectSpread({}, viewPropTypes, {
  provider: _propTypes.default.oneOf(['google']),
  style: viewPropTypes.style,
  customMapStyle: _propTypes.default.array,
  customMapStyleString: _propTypes.default.string,
  showsUserLocation: _propTypes.default.bool,
  userLocationAnnotationTitle: _propTypes.default.string,
  showsMyLocationButton: _propTypes.default.bool,
  followsUserLocation: _propTypes.default.bool,
  showsPointsOfInterest: _propTypes.default.bool,
  showsCompass: _propTypes.default.bool,
  zoomEnabled: _propTypes.default.bool,
  zoomTapEnabled: _propTypes.default.bool,
  zoomControlEnabled: _propTypes.default.bool,
  rotateEnabled: _propTypes.default.bool,
  cacheEnabled: _propTypes.default.bool,
  loadingEnabled: _propTypes.default.bool,
  loadingBackgroundColor: _reactNative.ColorPropType,
  loadingIndicatorColor: _reactNative.ColorPropType,
  scrollEnabled: _propTypes.default.bool,
  pitchEnabled: _propTypes.default.bool,
  toolbarEnabled: _propTypes.default.bool,
  moveOnMarkerPress: _propTypes.default.bool,
  showsScale: _propTypes.default.bool,
  showsBuildings: _propTypes.default.bool,
  showsTraffic: _propTypes.default.bool,
  showsIndoors: _propTypes.default.bool,
  showsIndoorLevelPicker: _propTypes.default.bool,
  mapType: _propTypes.default.oneOf(Object.values(MAP_TYPES)),
  region: _propTypes.default.shape({
    latitude: _propTypes.default.number.isRequired,
    longitude: _propTypes.default.number.isRequired,
    latitudeDelta: _propTypes.default.number.isRequired,
    longitudeDelta: _propTypes.default.number.isRequired
  }),
  initialRegion: _propTypes.default.shape({
    latitude: _propTypes.default.number.isRequired,
    longitude: _propTypes.default.number.isRequired,
    latitudeDelta: _propTypes.default.number.isRequired,
    longitudeDelta: _propTypes.default.number.isRequired
  }),
  camera: CameraShape,
  initialCamera: CameraShape,
  liteMode: _propTypes.default.bool,
  mapPadding: _reactNative.EdgeInsetsPropType,
  paddingAdjustmentBehavior: _propTypes.default.oneOf(['always', 'automatic', 'never']),
  maxDelta: _propTypes.default.number,
  minDelta: _propTypes.default.number,
  legalLabelInsets: _reactNative.EdgeInsetsPropType,
  onMapReady: _propTypes.default.func,
  onMapLoaded: _propTypes.default.func,
  onKmlReady: _propTypes.default.func,
  onRegionChange: _propTypes.default.func,
  onRegionChangeComplete: _propTypes.default.func,
  onPress: _propTypes.default.func,
  onDoublePress: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  onUserLocationChange: _propTypes.default.func,
  onPanDrag: _propTypes.default.func,
  onPoiClick: _propTypes.default.func,
  onMarkerPress: _propTypes.default.func,
  onMarkerSelect: _propTypes.default.func,
  onMarkerDeselect: _propTypes.default.func,
  onCalloutPress: _propTypes.default.func,
  onMarkerDragStart: _propTypes.default.func,
  onMarkerDrag: _propTypes.default.func,
  onMarkerDragEnd: _propTypes.default.func,
  minZoomLevel: _propTypes.default.number,
  maxZoomLevel: _propTypes.default.number,
  kmlSrc: _propTypes.default.string,
  compassOffset: _reactNative.PointPropType,
  onIndoorLevelActivated: _propTypes.default.func,
  onIndoorBuildingFocused: _propTypes.default.func
});

var MapView = function (_React$Component) {
  (0, _inherits2.default)(MapView, _React$Component);

  function MapView(props) {
    var _this;

    (0, _classCallCheck2.default)(this, MapView);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapView).call(this, props));
    _this.state = {
      isReady: _reactNative.Platform.OS === 'ios'
    };
    _this._onMapReady = _this._onMapReady.bind((0, _assertThisInitialized2.default)(_this));
    _this._onMarkerPress = _this._onMarkerPress.bind((0, _assertThisInitialized2.default)(_this));
    _this._onChange = _this._onChange.bind((0, _assertThisInitialized2.default)(_this));
    _this._onLayout = _this._onLayout.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(MapView, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        provider: this.props.provider
      };
    }
  }, {
    key: "getSnapshotBeforeUpdate",
    value: function getSnapshotBeforeUpdate(prevProps) {
      if (this.state.isReady && this.props.customMapStyle !== prevProps.customMapStyle) {
        this._updateStyle(this.props);
      }

      return this.props.region || null;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, region) {
      var a = this.__lastRegion;
      var b = region;

      if (!a || !b) {
        return;
      }

      if (a.latitude !== b.latitude || a.longitude !== b.longitude || a.latitudeDelta !== b.latitudeDelta || a.longitudeDelta !== b.longitudeDelta) {
        this.map.setNativeProps({
          region: b
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var isReady = this.state.isReady;

      if (isReady) {
        this._updateStyle(this.props);
      }
    }
  }, {
    key: "_updateStyle",
    value: function _updateStyle(props) {
      var customMapStyle = props.customMapStyle;
      this.map.setNativeProps({
        customMapStyleString: JSON.stringify(customMapStyle)
      });
    }
  }, {
    key: "_onMapReady",
    value: function _onMapReady() {
      var _this$props = this.props,
          region = _this$props.region,
          initialRegion = _this$props.initialRegion,
          onMapReady = _this$props.onMapReady;

      if (region) {
        this.map.setNativeProps({
          region: region
        });
      } else if (initialRegion) {
        this.map.setNativeProps({
          initialRegion: initialRegion
        });
      }

      this._updateStyle(this.props);

      this.setState({
        isReady: true
      }, function () {
        if (onMapReady) {
          onMapReady();
        }
      });
    }
  }, {
    key: "_onLayout",
    value: function _onLayout(e) {
      var layout = e.nativeEvent.layout;

      if (!layout.width || !layout.height) {
        return;
      }

      if (this.state.isReady && !this.__layoutCalled) {
        var _this$props2 = this.props,
            region = _this$props2.region,
            initialRegion = _this$props2.initialRegion;

        if (region) {
          this.__layoutCalled = true;
          this.map.setNativeProps({
            region: region
          });
        } else if (initialRegion) {
          this.__layoutCalled = true;
          this.map.setNativeProps({
            initialRegion: initialRegion
          });
        }
      }

      if (this.props.onLayout) {
        this.props.onLayout(e);
      }
    }
  }, {
    key: "_onMarkerPress",
    value: function _onMarkerPress(event) {
      if (this.props.onMarkerPress) {
        this.props.onMarkerPress(event.nativeEvent);
      }
    }
  }, {
    key: "_onChange",
    value: function _onChange(event) {
      this.__lastRegion = event.nativeEvent.region;

      if (event.nativeEvent.continuous) {
        if (this.props.onRegionChange) {
          this.props.onRegionChange(event.nativeEvent.region);
        }
      } else if (this.props.onRegionChangeComplete) {
        this.props.onRegionChangeComplete(event.nativeEvent.region);
      }
    }
  }, {
    key: "getCamera",
    value: function getCamera() {
      if (_reactNative.Platform.OS === 'android') {
        return _reactNative.NativeModules.AirMapModule.getCamera(this._getHandle());
      } else if (_reactNative.Platform.OS === 'ios') {
        return this._runCommand('getCamera', []);
      }

      return Promise.reject('getCamera not supported on this platform');
    }
  }, {
    key: "setCamera",
    value: function setCamera(camera) {
      this._runCommand('setCamera', [camera]);
    }
  }, {
    key: "animateCamera",
    value: function animateCamera(camera, opts) {
      this._runCommand('animateCamera', [camera, opts && opts.duration || 500]);
    }
  }, {
    key: "animateToNavigation",
    value: function animateToNavigation(location, bearing, angle, duration) {
      console.warn('animateToNavigation() is deprecated, use animateCamera() instead');

      this._runCommand('animateToNavigation', [location, bearing, angle, duration || 500]);
    }
  }, {
    key: "animateToRegion",
    value: function animateToRegion(region, duration) {
      this._runCommand('animateToRegion', [region, duration || 500]);
    }
  }, {
    key: "animateToCoordinate",
    value: function animateToCoordinate(latLng, duration) {
      console.warn('animateToCoordinate() is deprecated, use animateCamera() instead');

      this._runCommand('animateToCoordinate', [latLng, duration || 500]);
    }
  }, {
    key: "animateToBearing",
    value: function animateToBearing(bearing, duration) {
      console.warn('animateToBearing() is deprecated, use animateCamera() instead');

      this._runCommand('animateToBearing', [bearing, duration || 500]);
    }
  }, {
    key: "animateToViewingAngle",
    value: function animateToViewingAngle(angle, duration) {
      console.warn('animateToViewingAngle() is deprecated, use animateCamera() instead');

      this._runCommand('animateToViewingAngle', [angle, duration || 500]);
    }
  }, {
    key: "fitToElements",
    value: function fitToElements(animated) {
      this._runCommand('fitToElements', [animated]);
    }
  }, {
    key: "fitToSuppliedMarkers",
    value: function fitToSuppliedMarkers(markers) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$edgePadding = options.edgePadding,
          edgePadding = _options$edgePadding === void 0 ? {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      } : _options$edgePadding,
          _options$animated = options.animated,
          animated = _options$animated === void 0 ? true : _options$animated;

      this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);
    }
  }, {
    key: "fitToCoordinates",
    value: function fitToCoordinates() {
      var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$edgePadding2 = options.edgePadding,
          edgePadding = _options$edgePadding2 === void 0 ? {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      } : _options$edgePadding2,
          _options$animated2 = options.animated,
          animated = _options$animated2 === void 0 ? true : _options$animated2;

      this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);
    }
  }, {
    key: "getMapBoundaries",
    value: function getMapBoundaries() {
      return _regenerator.default.async(function getMapBoundaries$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(_reactNative.Platform.OS === 'android')) {
                _context.next = 6;
                break;
              }

              _context.next = 3;
              return _regenerator.default.awrap(_reactNative.NativeModules.AirMapModule.getMapBoundaries(this._getHandle()));

            case 3:
              return _context.abrupt("return", _context.sent);

            case 6:
              if (!(_reactNative.Platform.OS === 'ios')) {
                _context.next = 10;
                break;
              }

              _context.next = 9;
              return _regenerator.default.awrap(this._runCommand('getMapBoundaries', []));

            case 9:
              return _context.abrupt("return", _context.sent);

            case 10:
              return _context.abrupt("return", Promise.reject('getMapBoundaries not supported on this platform'));

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "setMapBoundaries",
    value: function setMapBoundaries(northEast, southWest) {
      this._runCommand('setMapBoundaries', [northEast, southWest]);
    }
  }, {
    key: "setIndoorActiveLevelIndex",
    value: function setIndoorActiveLevelIndex(activeLevelIndex) {
      this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);
    }
  }, {
    key: "takeSnapshot",
    value: function takeSnapshot(args) {
      var _this2 = this;

      if (_reactNative.Platform.OS === 'ios' && arguments.length === 4) {
        console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future');
        var width = arguments[0];
        var height = arguments[1];
        var region = arguments[2];
        var callback = arguments[3];

        this._runCommand('takeSnapshot', [width || 0, height || 0, region || {}, 'png', 1, 'legacy', callback]);

        return undefined;
      }

      var config = {
        width: args.width || 0,
        height: args.height || 0,
        region: args.region || {},
        format: args.format || 'png',
        quality: args.quality || 1.0,
        result: args.result || 'file'
      };

      if (config.format !== 'png' && config.format !== 'jpg') {
        throw new Error('Invalid format specified');
      }

      if (config.result !== 'file' && config.result !== 'base64') {
        throw new Error('Invalid result specified');
      }

      if (_reactNative.Platform.OS === 'android') {
        return _reactNative.NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);
      } else if (_reactNative.Platform.OS === 'ios') {
        return new Promise(function (resolve, reject) {
          _this2._runCommand('takeSnapshot', [config.width, config.height, config.region, config.format, config.quality, config.result, function (err, snapshot) {
            if (err) {
              reject(err);
            } else {
              resolve(snapshot);
            }
          }]);
        });
      }

      return Promise.reject('takeSnapshot not supported on this platform');
    }
  }, {
    key: "pointForCoordinate",
    value: function pointForCoordinate(coordinate) {
      if (_reactNative.Platform.OS === 'android') {
        return _reactNative.NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);
      } else if (_reactNative.Platform.OS === 'ios') {
        return this._runCommand('pointForCoordinate', [coordinate]);
      }

      return Promise.reject('pointForCoordinate not supported on this platform');
    }
  }, {
    key: "coordinateForPoint",
    value: function coordinateForPoint(point) {
      if (_reactNative.Platform.OS === 'android') {
        return _reactNative.NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);
      } else if (_reactNative.Platform.OS === 'ios') {
        return this._runCommand('coordinateForPoint', [point]);
      }

      return Promise.reject('coordinateForPoint not supported on this platform');
    }
  }, {
    key: "getMarkersFrames",
    value: function getMarkersFrames() {
      var onlyVisible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (_reactNative.Platform.OS === 'ios') {
        return this._runCommand('getMarkersFrames', [onlyVisible]);
      }

      return Promise.reject('getMarkersFrames not supported on this platform');
    }
  }, {
    key: "boundingBoxForRegion",
    value: function boundingBoxForRegion(region) {
      return {
        northEast: {
          latitude: region.latitude + region.latitudeDelta / 2,
          longitude: region.longitude + region.longitudeDelta / 2
        },
        southWest: {
          latitude: region.latitude - region.latitudeDelta / 2,
          longitude: region.longitude - region.longitudeDelta / 2
        }
      };
    }
  }, {
    key: "_uiManagerCommand",
    value: function _uiManagerCommand(name) {
      var UIManager = _reactNative.NativeModules.UIManager;
      var componentName = (0, _decorateMapComponent.getAirMapName)(this.props.provider);

      if (!UIManager.getViewManagerConfig) {
        return UIManager[componentName].Commands[name];
      }

      return UIManager.getViewManagerConfig(componentName).Commands[name];
    }
  }, {
    key: "_mapManagerCommand",
    value: function _mapManagerCommand(name) {
      var managerName = (0, _decorateMapComponent.getAirMapName)(this.props.provider);

      if (managerName === 'UI') {
        var UIManager = _reactNative.NativeModules.UIManager;

        if (!UIManager.getViewManagerConfig) {
          return UIManager[name];
        }

        return UIManager.getViewManagerConfig(name);
      }

      return _reactNative.NativeModules[(0, _decorateMapComponent.getAirMapName)(this.props.provider) + "Manager"][name];
    }
  }, {
    key: "_getHandle",
    value: function _getHandle() {
      return (0, _reactNative.findNodeHandle)(this.map);
    }
  }, {
    key: "_runCommand",
    value: function _runCommand(name, args) {
      switch (_reactNative.Platform.OS) {
        case 'android':
          return _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this._uiManagerCommand(name), args);

        case 'ios':
          return this._mapManagerCommand(name).apply(void 0, [this._getHandle()].concat((0, _toConsumableArray2.default)(args)));

        default:
          return Promise.reject("Invalid platform was passed: " + _reactNative.Platform.OS);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var props;

      if (this.state.isReady) {
        props = _objectSpread({
          region: null,
          initialRegion: null,
          onMarkerPress: this._onMarkerPress,
          onChange: this._onChange,
          onMapReady: this._onMapReady,
          onLayout: this._onLayout
        }, this.props);

        if (_reactNative.Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT && GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {
          props.mapType = MAP_TYPES.standard;
        }

        props.handlePanDrag = !!props.onPanDrag;
      } else {
        props = {
          style: this.props.style,
          region: null,
          initialRegion: null,
          onMarkerPress: this._onMarkerPress,
          onChange: this._onChange,
          onMapReady: this._onMapReady,
          onLayout: this._onLayout
        };
      }

      if (_reactNative.Platform.OS === 'android' && this.props.liteMode) {
        return _react.default.createElement(AIRMapLite, (0, _extends2.default)({
          ref: function ref(_ref) {
            _this3.map = _ref;
          }
        }, props));
      }

      var AIRMap = getAirMapComponent(this.props.provider);
      return _react.default.createElement(AIRMap, (0, _extends2.default)({
        ref: function ref(_ref2) {
          _this3.map = _ref2;
        }
      }, props));
    }
  }]);
  return MapView;
}(_react.default.Component);

MapView.propTypes = propTypes;
MapView.viewConfig = viewConfig;
MapView.childContextTypes = _decorateMapComponent.contextTypes;
MapView.MAP_TYPES = MAP_TYPES;

var nativeComponent = function nativeComponent(Component) {
  return (0, _reactNative.requireNativeComponent)(Component, MapView, {
    nativeOnly: {
      onChange: true,
      onMapReady: true,
      onKmlReady: true,
      handlePanDrag: true
    }
  });
};

var airMaps = {
  default: nativeComponent('AIRMap')
};

if (_reactNative.Platform.OS === 'android') {
  airMaps.google = airMaps.default;
} else {
  airMaps.google = _decorateMapComponent.googleMapIsInstalled ? nativeComponent('AIRGoogleMap') : (0, _decorateMapComponent.createNotSupportedComponent)('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.');
}

var getAirMapComponent = function getAirMapComponent(provider) {
  return airMaps[provider || 'default'];
};

var AIRMapLite;

if (!_reactNative.NativeModules.UIManager.getViewManagerConfig) {
  AIRMapLite = _reactNative.NativeModules.UIManager.AIRMapLite && (0, _reactNative.requireNativeComponent)('AIRMapLite', MapView, {
    nativeOnly: {
      onChange: true,
      onMapReady: true,
      handlePanDrag: true
    }
  });
} else {
  AIRMapLite = _reactNative.NativeModules.UIManager.getViewManagerConfig('AIRMapLite') && (0, _reactNative.requireNativeComponent)('AIRMapLite', MapView, {
    nativeOnly: {
      onChange: true,
      onMapReady: true,
      handlePanDrag: true
    }
  });
}

var Animated = _reactNative.Animated.createAnimatedComponent(MapView);

exports.Animated = Animated;

var ProviderPropType = _propTypes.default.oneOf(Object.values(ProviderConstants));

exports.ProviderPropType = ProviderPropType;
MapView.Marker = _MapMarker.default;
MapView.Polyline = _MapPolyline.default;
MapView.Polygon = _MapPolygon.default;
MapView.Circle = _MapCircle.default;
MapView.UrlTile = _MapUrlTile.default;
MapView.MapWMSTile = _MapWMSTile.default;
MapView.LocalTile = _MapLocalTile.default;
MapView.Heatmap = _MapHeatmap.default;
MapView.Overlay = _MapOverlay.default;
MapView.Callout = _MapCallout.default;
MapView.CalloutSubview = _MapCalloutSubview.default;
(0, _extends2.default)(MapView, ProviderConstants);
MapView.ProviderPropType = ProviderPropType;
MapView.Animated = Animated;
MapView.AnimatedRegion = _AnimatedRegion.default;
var _default = MapView;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1hcFZpZXcuanMiXSwibmFtZXMiOlsiTUFQX1RZUEVTIiwiU1RBTkRBUkQiLCJTQVRFTExJVEUiLCJIWUJSSUQiLCJURVJSQUlOIiwiTk9ORSIsIk1VVEVEU1RBTkRBUkQiLCJHT09HTEVfTUFQU19PTkxZX1RZUEVTIiwidmlld0NvbmZpZyIsInVpVmlld0NsYXNzTmFtZSIsInZhbGlkQXR0cmlidXRlcyIsInJlZ2lvbiIsIkNhbWVyYVNoYXBlIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJjZW50ZXIiLCJsYXRpdHVkZSIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJsb25naXR1ZGUiLCJwaXRjaCIsImhlYWRpbmciLCJhbHRpdHVkZSIsInpvb20iLCJ2aWV3UHJvcFR5cGVzIiwiVmlld1Byb3BUeXBlcyIsIlZpZXciLCJwcm9wVHlwZXMiLCJwcm92aWRlciIsIm9uZU9mIiwic3R5bGUiLCJjdXN0b21NYXBTdHlsZSIsImFycmF5IiwiY3VzdG9tTWFwU3R5bGVTdHJpbmciLCJzdHJpbmciLCJzaG93c1VzZXJMb2NhdGlvbiIsImJvb2wiLCJ1c2VyTG9jYXRpb25Bbm5vdGF0aW9uVGl0bGUiLCJzaG93c015TG9jYXRpb25CdXR0b24iLCJmb2xsb3dzVXNlckxvY2F0aW9uIiwic2hvd3NQb2ludHNPZkludGVyZXN0Iiwic2hvd3NDb21wYXNzIiwiem9vbUVuYWJsZWQiLCJ6b29tVGFwRW5hYmxlZCIsInpvb21Db250cm9sRW5hYmxlZCIsInJvdGF0ZUVuYWJsZWQiLCJjYWNoZUVuYWJsZWQiLCJsb2FkaW5nRW5hYmxlZCIsImxvYWRpbmdCYWNrZ3JvdW5kQ29sb3IiLCJDb2xvclByb3BUeXBlIiwibG9hZGluZ0luZGljYXRvckNvbG9yIiwic2Nyb2xsRW5hYmxlZCIsInBpdGNoRW5hYmxlZCIsInRvb2xiYXJFbmFibGVkIiwibW92ZU9uTWFya2VyUHJlc3MiLCJzaG93c1NjYWxlIiwic2hvd3NCdWlsZGluZ3MiLCJzaG93c1RyYWZmaWMiLCJzaG93c0luZG9vcnMiLCJzaG93c0luZG9vckxldmVsUGlja2VyIiwibWFwVHlwZSIsIk9iamVjdCIsInZhbHVlcyIsImxhdGl0dWRlRGVsdGEiLCJsb25naXR1ZGVEZWx0YSIsImluaXRpYWxSZWdpb24iLCJjYW1lcmEiLCJpbml0aWFsQ2FtZXJhIiwibGl0ZU1vZGUiLCJtYXBQYWRkaW5nIiwiRWRnZUluc2V0c1Byb3BUeXBlIiwicGFkZGluZ0FkanVzdG1lbnRCZWhhdmlvciIsIm1heERlbHRhIiwibWluRGVsdGEiLCJsZWdhbExhYmVsSW5zZXRzIiwib25NYXBSZWFkeSIsImZ1bmMiLCJvbk1hcExvYWRlZCIsIm9uS21sUmVhZHkiLCJvblJlZ2lvbkNoYW5nZSIsIm9uUmVnaW9uQ2hhbmdlQ29tcGxldGUiLCJvblByZXNzIiwib25Eb3VibGVQcmVzcyIsIm9uTG9uZ1ByZXNzIiwib25Vc2VyTG9jYXRpb25DaGFuZ2UiLCJvblBhbkRyYWciLCJvblBvaUNsaWNrIiwib25NYXJrZXJQcmVzcyIsIm9uTWFya2VyU2VsZWN0Iiwib25NYXJrZXJEZXNlbGVjdCIsIm9uQ2FsbG91dFByZXNzIiwib25NYXJrZXJEcmFnU3RhcnQiLCJvbk1hcmtlckRyYWciLCJvbk1hcmtlckRyYWdFbmQiLCJtaW5ab29tTGV2ZWwiLCJtYXhab29tTGV2ZWwiLCJrbWxTcmMiLCJjb21wYXNzT2Zmc2V0IiwiUG9pbnRQcm9wVHlwZSIsIm9uSW5kb29yTGV2ZWxBY3RpdmF0ZWQiLCJvbkluZG9vckJ1aWxkaW5nRm9jdXNlZCIsIk1hcFZpZXciLCJwcm9wcyIsInN0YXRlIiwiaXNSZWFkeSIsIlBsYXRmb3JtIiwiT1MiLCJfb25NYXBSZWFkeSIsImJpbmQiLCJfb25NYXJrZXJQcmVzcyIsIl9vbkNoYW5nZSIsIl9vbkxheW91dCIsInByZXZQcm9wcyIsIl91cGRhdGVTdHlsZSIsInByZXZTdGF0ZSIsImEiLCJfX2xhc3RSZWdpb24iLCJiIiwibWFwIiwic2V0TmF0aXZlUHJvcHMiLCJKU09OIiwic3RyaW5naWZ5Iiwic2V0U3RhdGUiLCJlIiwibGF5b3V0IiwibmF0aXZlRXZlbnQiLCJ3aWR0aCIsImhlaWdodCIsIl9fbGF5b3V0Q2FsbGVkIiwib25MYXlvdXQiLCJldmVudCIsImNvbnRpbnVvdXMiLCJOYXRpdmVNb2R1bGVzIiwiQWlyTWFwTW9kdWxlIiwiZ2V0Q2FtZXJhIiwiX2dldEhhbmRsZSIsIl9ydW5Db21tYW5kIiwiUHJvbWlzZSIsInJlamVjdCIsIm9wdHMiLCJkdXJhdGlvbiIsImxvY2F0aW9uIiwiYmVhcmluZyIsImFuZ2xlIiwiY29uc29sZSIsIndhcm4iLCJsYXRMbmciLCJhbmltYXRlZCIsIm1hcmtlcnMiLCJvcHRpb25zIiwiZWRnZVBhZGRpbmciLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJjb29yZGluYXRlcyIsImdldE1hcEJvdW5kYXJpZXMiLCJub3J0aEVhc3QiLCJzb3V0aFdlc3QiLCJhY3RpdmVMZXZlbEluZGV4IiwiYXJncyIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiY29uZmlnIiwiZm9ybWF0IiwicXVhbGl0eSIsInJlc3VsdCIsIkVycm9yIiwidGFrZVNuYXBzaG90IiwicmVzb2x2ZSIsImVyciIsInNuYXBzaG90IiwiY29vcmRpbmF0ZSIsInBvaW50Rm9yQ29vcmRpbmF0ZSIsInBvaW50IiwiY29vcmRpbmF0ZUZvclBvaW50Iiwib25seVZpc2libGUiLCJuYW1lIiwiVUlNYW5hZ2VyIiwiY29tcG9uZW50TmFtZSIsImdldFZpZXdNYW5hZ2VyQ29uZmlnIiwiQ29tbWFuZHMiLCJtYW5hZ2VyTmFtZSIsImRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kIiwiX3VpTWFuYWdlckNvbW1hbmQiLCJfbWFwTWFuYWdlckNvbW1hbmQiLCJvbkNoYW5nZSIsIlByb3ZpZGVyQ29uc3RhbnRzIiwiUFJPVklERVJfREVGQVVMVCIsImluY2x1ZGVzIiwic3RhbmRhcmQiLCJoYW5kbGVQYW5EcmFnIiwicmVmIiwiQUlSTWFwIiwiZ2V0QWlyTWFwQ29tcG9uZW50IiwiUmVhY3QiLCJDb21wb25lbnQiLCJjaGlsZENvbnRleHRUeXBlcyIsIm5hdGl2ZUNvbXBvbmVudCIsIm5hdGl2ZU9ubHkiLCJhaXJNYXBzIiwiZGVmYXVsdCIsImdvb2dsZSIsImdvb2dsZU1hcElzSW5zdGFsbGVkIiwiQUlSTWFwTGl0ZSIsIkFuaW1hdGVkIiwiUk5BbmltYXRlZCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiUHJvdmlkZXJQcm9wVHlwZSIsIk1hcmtlciIsIk1hcE1hcmtlciIsIlBvbHlsaW5lIiwiTWFwUG9seWxpbmUiLCJQb2x5Z29uIiwiTWFwUG9seWdvbiIsIkNpcmNsZSIsIk1hcENpcmNsZSIsIlVybFRpbGUiLCJNYXBVcmxUaWxlIiwiTWFwV01TVGlsZSIsIkxvY2FsVGlsZSIsIk1hcExvY2FsVGlsZSIsIkhlYXRtYXAiLCJNYXBIZWF0TWFwIiwiT3ZlcmxheSIsIk1hcE92ZXJsYXkiLCJDYWxsb3V0IiwiTWFwQ2FsbG91dCIsIkNhbGxvdXRTdWJ2aWV3IiwiTWFwQ2FsbG91dFN1YnZpZXciLCJBbmltYXRlZFJlZ2lvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFZQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFNQTs7Ozs7O0FBRU8sSUFBTUEsU0FBUyxHQUFHO0FBQ3ZCQyxFQUFBQSxRQUFRLEVBQUUsVUFEYTtBQUV2QkMsRUFBQUEsU0FBUyxFQUFFLFdBRlk7QUFHdkJDLEVBQUFBLE1BQU0sRUFBRSxRQUhlO0FBSXZCQyxFQUFBQSxPQUFPLEVBQUUsU0FKYztBQUt2QkMsRUFBQUEsSUFBSSxFQUFFLE1BTGlCO0FBTXZCQyxFQUFBQSxhQUFhLEVBQUU7QUFOUSxDQUFsQjs7QUFTUCxJQUFNQyxzQkFBc0IsR0FBRyxDQUFDUCxTQUFTLENBQUNJLE9BQVgsRUFBb0JKLFNBQVMsQ0FBQ0ssSUFBOUIsQ0FBL0I7QUFFQSxJQUFN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bEksT0FBZCxFQUF1QndGLGlCQUF2QjtBQUNBeEYsT0FBTyxDQUFDNkcsZ0JBQVIsR0FBMkJBLGdCQUEzQjtBQUVBN0csT0FBTyxDQUFDMEcsUUFBUixHQUFtQkEsUUFBbkI7QUFDQTFHLE9BQU8sQ0FBQ21JLGNBQVIsR0FBeUJBLHVCQUF6QjtlQUVlbkksTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgRWRnZUluc2V0c1Byb3BUeXBlLFxuICBQb2ludFByb3BUeXBlLFxuICBQbGF0Zm9ybSxcbiAgQW5pbWF0ZWQgYXMgUk5BbmltYXRlZCxcbiAgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCxcbiAgTmF0aXZlTW9kdWxlcyxcbiAgQ29sb3JQcm9wVHlwZSxcbiAgZmluZE5vZGVIYW5kbGUsXG4gIFZpZXdQcm9wVHlwZXMsXG4gIFZpZXcsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgTWFwTWFya2VyIGZyb20gJy4vTWFwTWFya2VyJztcbmltcG9ydCBNYXBQb2x5bGluZSBmcm9tICcuL01hcFBvbHlsaW5lJztcbmltcG9ydCBNYXBQb2x5Z29uIGZyb20gJy4vTWFwUG9seWdvbic7XG5pbXBvcnQgTWFwQ2lyY2xlIGZyb20gJy4vTWFwQ2lyY2xlJztcbmltcG9ydCBNYXBDYWxsb3V0IGZyb20gJy4vTWFwQ2FsbG91dCc7XG5pbXBvcnQgTWFwQ2FsbG91dFN1YnZpZXcgZnJvbSAnLi9NYXBDYWxsb3V0U3Vidmlldyc7XG5pbXBvcnQgTWFwT3ZlcmxheSBmcm9tICcuL01hcE92ZXJsYXknO1xuaW1wb3J0IE1hcFVybFRpbGUgZnJvbSAnLi9NYXBVcmxUaWxlJztcbmltcG9ydCBNYXBXTVNUaWxlIGZyb20gJy4vTWFwV01TVGlsZSc7XG5pbXBvcnQgTWFwTG9jYWxUaWxlIGZyb20gJy4vTWFwTG9jYWxUaWxlJztcbmltcG9ydCBNYXBIZWF0TWFwIGZyb20gJy4vTWFwSGVhdG1hcCc7XG5pbXBvcnQgQW5pbWF0ZWRSZWdpb24gZnJvbSAnLi9BbmltYXRlZFJlZ2lvbic7XG5pbXBvcnQge1xuICBjb250ZXh0VHlwZXMgYXMgY2hpbGRDb250ZXh0VHlwZXMsXG4gIGdldEFpck1hcE5hbWUsXG4gIGdvb2dsZU1hcElzSW5zdGFsbGVkLFxuICBjcmVhdGVOb3RTdXBwb3J0ZWRDb21wb25lbnQsXG59IGZyb20gJy4vZGVjb3JhdGVNYXBDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgUHJvdmlkZXJDb25zdGFudHMgZnJvbSAnLi9Qcm92aWRlckNvbnN0YW50cyc7XG5cbmV4cG9ydCBjb25zdCBNQVBfVFlQRVMgPSB7XG4gIFNUQU5EQVJEOiAnc3RhbmRhcmQnLFxuICBTQVRFTExJVEU6ICdzYXRlbGxpdGUnLFxuICBIWUJSSUQ6ICdoeWJyaWQnLFxuICBURVJSQUlOOiAndGVycmFpbicsXG4gIE5PTkU6ICdub25lJyxcbiAgTVVURURTVEFOREFSRDogJ211dGVkU3RhbmRhcmQnLFxufTtcblxuY29uc3QgR09PR0xFX01BUFNfT05MWV9UWVBFUyA9IFtNQVBfVFlQRVMuVEVSUkFJTiwgTUFQX1RZUEVTLk5PTkVdO1xuXG5jb25zdCB2aWV3Q29uZmlnID0ge1xuICB1aVZpZXdDbGFzc05hbWU6ICdBSVI8cHJvdmlkZXI+TWFwJyxcbiAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgcmVnaW9uOiB0cnVlLFxuICB9LFxufTtcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBtYXAgY2FtZXJhLlxuICovXG5jb25zdCBDYW1lcmFTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGNlbnRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBsYXRpdHVkZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGxvbmdpdHVkZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICB9KSxcbiAgcGl0Y2g6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgaGVhZGluZzogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBhbHRpdHVkZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICB6b29tOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG59KTtcblxuLy8gaWYgVmlld1Byb3BUeXBlcyBpcyBub3QgZGVmaW5lZCBmYWxsIGJhY2sgdG8gVmlldy5wcm9wVHlwZSAodG8gc3VwcG9ydCBSTiA8IDAuNDQpXG5jb25zdCB2aWV3UHJvcFR5cGVzID0gVmlld1Byb3BUeXBlcyB8fCBWaWV3LnByb3BUeXBlcztcblxuY29uc3QgcHJvcFR5cGVzID0ge1xuICAuLi52aWV3UHJvcFR5cGVzLFxuICAvKipcbiAgICogV2hlbiBwcm92aWRlciBpcyBcImdvb2dsZVwiLCB3ZSB3aWxsIHVzZSBHb29nbGVNYXBzLlxuICAgKiBBbnkgdmFsdWUgb3RoZXIgdGhhbiBcImdvb2dsZVwiIHdpbGwgZGVmYXVsdCB0byB1c2luZ1xuICAgKiBNYXBLaXQgaW4gaU9TIG9yIEdvb2dsZU1hcHMgaW4gYW5kcm9pZCBhcyB0aGUgbWFwIHByb3ZpZGVyLlxuICAgKi9cbiAgcHJvdmlkZXI6IFByb3BUeXBlcy5vbmVPZihbJ2dvb2dsZSddKSxcblxuICAvKipcbiAgICogVXNlZCB0byBzdHlsZSBhbmQgbGF5b3V0IHRoZSBgTWFwVmlld2AuICBTZWUgYFN0eWxlU2hlZXQuanNgIGFuZFxuICAgKiBgVmlld1N0eWxlUHJvcFR5cGVzLmpzYCBmb3IgbW9yZSBpbmZvLlxuICAgKi9cbiAgc3R5bGU6IHZpZXdQcm9wVHlwZXMuc3R5bGUsXG5cbiAgLyoqXG4gICAqIEEganNvbiBvYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlIHN0eWxlIG9mIHRoZSBtYXAuIFRoaXMgaXMgdHJhbnNmb3JtZWQgdG8gYSBzdHJpbmdcbiAgICogYW5kIHNhdmVkIGluIG1heVN0eWxlU3RyaW5nIHRvIGJlIHNlbnQgdG8gYW5kcm9pZCBhbmQgaW9zXG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9pb3Mtc2RrL3N0eWxpbmcjdXNlX2Ffc3RyaW5nX3Jlc291cmNlXG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9hbmRyb2lkLWFwaS9zdHlsaW5nXG4gICAqL1xuICBjdXN0b21NYXBTdHlsZTogUHJvcFR5cGVzLmFycmF5LFxuXG4gIC8qKlxuICAgKiBBIGpzb24gc3RyaW5nIHRoYXQgZGVzY3JpYmVzIHRoZSBzdHlsZSBvZiB0aGUgbWFwXG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9pb3Mtc2RrL3N0eWxpbmcjdXNlX2Ffc3RyaW5nX3Jlc291cmNlXG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9hbmRyb2lkLWFwaS9zdHlsaW5nXG4gICAqL1xuICBjdXN0b21NYXBTdHlsZVN0cmluZzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgIHRoZSBhcHAgd2lsbCBhc2sgZm9yIHRoZSB1c2VyJ3MgbG9jYXRpb24uXG4gICAqIERlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cbiAgICpcbiAgICogKipOT1RFKio6IFlvdSBuZWVkIHRvIGFkZCBOU0xvY2F0aW9uV2hlbkluVXNlVXNhZ2VEZXNjcmlwdGlvbiBrZXkgaW5cbiAgICogSW5mby5wbGlzdCB0byBlbmFibGUgZ2VvbG9jYXRpb24sIG90aGVyd2lzZSBpdCBpcyBnb2luZ1xuICAgKiB0byAqZmFpbCBzaWxlbnRseSohIFlvdSB3aWxsIGFsc28gbmVlZCB0byBhZGQgYW4gZXhwbGFuYXRpb24gZm9yIHdoeVxuICAgKiB5b3UgbmVlZCB0aGUgdXNlcnMgbG9jYXRpb24gYWdhaW5zdCBgTlNMb2NhdGlvbldoZW5JblVzZVVzYWdlRGVzY3JpcHRpb25gIGluIEluZm8ucGxpc3QuXG4gICAqIE90aGVyd2lzZSBBcHBsZSBtYXkgcmVqZWN0IHlvdXIgYXBwIHN1Ym1pc3Npb24uXG4gICAqL1xuICBzaG93c1VzZXJMb2NhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB0aXRsZSBvZiB0aGUgYW5ub3RhdGlvbiBmb3IgY3VycmVudCB1c2VyIGxvY2F0aW9uLiBUaGlzIG9ubHkgd29ya3MgaWZcbiAgICogYHNob3dzVXNlckxvY2F0aW9uYCBpcyB0cnVlLlxuICAgKiBUaGVyZSBpcyBhIGRlZmF1bHQgdmFsdWUgYE15IExvY2F0aW9uYCBzZXQgYnkgTWFwVmlldy5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdXNlckxvY2F0aW9uQW5ub3RhdGlvblRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgIGhpZGUgdGhlIGJ1dHRvbiB0byBtb3ZlIG1hcCB0byB0aGUgY3VycmVudCB1c2VyJ3MgbG9jYXRpb24uXG4gICAqIERlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgc2hvd3NNeUxvY2F0aW9uQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgIHRoZSBtYXAgd2lsbCBmb2N1cyBvbiB0aGUgdXNlcidzIGxvY2F0aW9uLiBUaGlzIG9ubHkgd29ya3MgaWZcbiAgICogYHNob3dzVXNlckxvY2F0aW9uYCBpcyB0cnVlIGFuZCB0aGUgdXNlciBoYXMgc2hhcmVkIHRoZWlyIGxvY2F0aW9uLlxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGZvbGxvd3NVc2VyTG9jYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgIHBvaW50cyBvZiBpbnRlcmVzdCB3b24ndCBiZSBkaXNwbGF5ZWQgb24gdGhlIG1hcC5cbiAgICogRGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXG4gICAqXG4gICAqL1xuICBzaG93c1BvaW50c09mSW50ZXJlc3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgIGNvbXBhc3Mgd29uJ3QgYmUgZGlzcGxheWVkIG9uIHRoZSBtYXAuXG4gICAqIERlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzaG93c0NvbXBhc3M6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgIHRoZSB1c2VyIHdvbid0IGJlIGFibGUgdG8gcGluY2gvem9vbSB0aGUgbWFwLlxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cbiAgICpcbiAgICovXG4gIHpvb21FbmFibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGZhbHNlYCB0aGUgdXNlciB3b24ndCBiZSBhYmxlIHRvIGRvdWJsZSB0YXAgdG8gem9vbSB0aGUgbWFwLlxuICAgKiBIb3dldmVyIGl0IHdpbGwgZ3JlYXRseSBkZWNyZWFzZSBkZWxheSBvZiB0YXAgZ2VzdHVyZSByZWNvZ25pdGlvbi5cbiAgICogRGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXG4gICAqXG4gICAqL1xuICB6b29tVGFwRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqSWYgYGZhbHNlYCB0aGUgdXNlciB3b24ndCBiZSBhYmxlIHRvIHpvb20gdGhlIG1hcFxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cbiAgICpcbiAgICpAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgem9vbUNvbnRyb2xFbmFibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGZhbHNlYCB0aGUgdXNlciB3b24ndCBiZSBhYmxlIHRvIHBpbmNoL3JvdGF0ZSB0aGUgbWFwLlxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cbiAgICpcbiAgICovXG4gIHJvdGF0ZUVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAgdGhlIG1hcCB3aWxsIGJlIGNhY2hlZCB0byBhbiBJbWFnZSBmb3IgcGVyZm9ybWFuY2VcbiAgICogRGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgKlxuICAgKi9cbiAgY2FjaGVFbmFibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgIHRoZSBtYXAgd2lsbCBiZSBzaG93aW5nIGEgbG9hZGluZyBpbmRpY2F0b3JcbiAgICogRGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgKlxuICAgKi9cbiAgbG9hZGluZ0VuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBMb2FkaW5nIGJhY2tncm91bmQgY29sb3Igd2hpbGUgZ2VuZXJhdGluZyBtYXAgY2FjaGUgaW1hZ2Ugb3IgbG9hZGluZyB0aGUgbWFwXG4gICAqIERlZmF1bHQgY29sb3IgaXMgbGlnaHQgZ3JheS5cbiAgICpcbiAgICovXG4gIGxvYWRpbmdCYWNrZ3JvdW5kQ29sb3I6IENvbG9yUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIExvYWRpbmcgaW5kaWNhdG9yIGNvbG9yIHdoaWxlIGdlbmVyYXRpbmcgbWFwIGNhY2hlIGltYWdlIG9yIGxvYWRpbmcgdGhlIG1hcFxuICAgKiBEZWZhdWx0IGNvbG9yIGlzIGdyYXkgY29sb3IgZm9yIGlPUywgdGhlbWUgY29sb3IgZm9yIEFuZHJvaWQuXG4gICAqXG4gICAqL1xuICBsb2FkaW5nSW5kaWNhdG9yQ29sb3I6IENvbG9yUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGBmYWxzZWAgdGhlIHVzZXIgd29uJ3QgYmUgYWJsZSB0byBjaGFuZ2UgdGhlIG1hcCByZWdpb24gYmVpbmcgZGlzcGxheWVkLlxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cbiAgICpcbiAgICovXG4gIHNjcm9sbEVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgIHRoZSB1c2VyIHdvbid0IGJlIGFibGUgdG8gYWRqdXN0IHRoZSBjYW1lcmHigJlzIHBpdGNoIGFuZ2xlLlxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cbiAgICpcbiAgICovXG4gIHBpdGNoRW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGBmYWxzZWAgd2lsbCBoaWRlICdOYXZpZ2F0ZScgYW5kICdPcGVuIGluIE1hcHMnIGJ1dHRvbnMgb24gbWFya2VyIHByZXNzXG4gICAqIERlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgdG9vbGJhckVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIG9uIG1hcmtlciBwcmVzcyB0aGUgbWFwIHdpbGwgbW92ZSB0byB0aGUgcHJlc3NlZCBtYXJrZXJcbiAgICogRGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWBcbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIG1vdmVPbk1hcmtlclByZXNzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgbWFwIHNob3dzIHNjYWxlIGluZm9ybWF0aW9uLlxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWBcbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgc2hvd3NTY2FsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIG1hcCBkaXNwbGF5cyBleHRydWRlZCBidWlsZGluZyBpbmZvcm1hdGlvbi5cbiAgICogRGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXG4gICAqL1xuICBzaG93c0J1aWxkaW5nczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgQm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIG1hcCBkaXNwbGF5cyB0cmFmZmljIGluZm9ybWF0aW9uLlxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXG4gICAqL1xuICBzaG93c1RyYWZmaWM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIGluZG9vciBtYXBzIHNob3VsZCBiZSBlbmFibGVkLlxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWBcbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIHNob3dzSW5kb29yczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgaW5kb29yIGxldmVsIHBpY2tlciBzaG91bGQgYmUgZW5hYmxlZC5cbiAgICogRGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBzaG93c0luZG9vckxldmVsUGlja2VyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG1hcCB0eXBlIHRvIGJlIGRpc3BsYXllZC5cbiAgICpcbiAgICogLSBzdGFuZGFyZDogc3RhbmRhcmQgcm9hZCBtYXAgKGRlZmF1bHQpXG4gICAqIC0gc2F0ZWxsaXRlOiBzYXRlbGxpdGUgdmlld1xuICAgKiAtIGh5YnJpZDogc2F0ZWxsaXRlIHZpZXcgd2l0aCByb2FkcyBhbmQgcG9pbnRzIG9mIGludGVyZXN0IG92ZXJsYXllZFxuICAgKiAtIHRlcnJhaW46IHRvcG9ncmFwaGljIHZpZXdcbiAgICogLSBub25lOiBubyBiYXNlIG1hcFxuICAgKi9cbiAgbWFwVHlwZTogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC52YWx1ZXMoTUFQX1RZUEVTKSksXG5cbiAgLyoqXG4gICAqIFRoZSByZWdpb24gdG8gYmUgZGlzcGxheWVkIGJ5IHRoZSBtYXAuXG4gICAqXG4gICAqIFRoZSByZWdpb24gaXMgZGVmaW5lZCBieSB0aGUgY2VudGVyIGNvb3JkaW5hdGVzIGFuZCB0aGUgc3BhbiBvZlxuICAgKiBjb29yZGluYXRlcyB0byBkaXNwbGF5LlxuICAgKi9cbiAgcmVnaW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIC8qKlxuICAgICAqIENvb3JkaW5hdGVzIGZvciB0aGUgY2VudGVyIG9mIHRoZSBtYXAuXG4gICAgICovXG4gICAgbGF0aXR1ZGU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBsb25naXR1ZGU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIERpZmZlcmVuY2UgYmV0d2VlbiB0aGUgbWluaW11biBhbmQgdGhlIG1heGltdW0gbGF0aXR1ZGUvbG9uZ2l0dWRlXG4gICAgICogdG8gYmUgZGlzcGxheWVkLlxuICAgICAqL1xuICAgIGxhdGl0dWRlRGVsdGE6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBsb25naXR1ZGVEZWx0YTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGluaXRpYWwgcmVnaW9uIHRvIGJlIGRpc3BsYXllZCBieSB0aGUgbWFwLiAgVXNlIHRoaXMgcHJvcCBpbnN0ZWFkIG9mIGByZWdpb25gXG4gICAqIG9ubHkgaWYgeW91IGRvbid0IHdhbnQgdG8gY29udHJvbCB0aGUgdmlld3BvcnQgb2YgdGhlIG1hcCBiZXNpZGVzIHRoZSBpbml0aWFsIHJlZ2lvbi5cbiAgICpcbiAgICogQ2hhbmdpbmcgdGhpcyBwcm9wIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIG1vdW50ZWQgd2lsbCBub3QgcmVzdWx0IGluIGEgcmVnaW9uIGNoYW5nZS5cbiAgICpcbiAgICogVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSBgaW5pdGlhbFZhbHVlYCBwcm9wIG9mIGEgdGV4dCBpbnB1dC5cbiAgICovXG4gIGluaXRpYWxSZWdpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgLyoqXG4gICAgICogQ29vcmRpbmF0ZXMgZm9yIHRoZSBjZW50ZXIgb2YgdGhlIG1hcC5cbiAgICAgKi9cbiAgICBsYXRpdHVkZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGxvbmdpdHVkZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogRGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBtaW5pbXVuIGFuZCB0aGUgbWF4aW11bSBsYXRpdHVkZS9sb25naXR1ZGVcbiAgICAgKiB0byBiZSBkaXNwbGF5ZWQuXG4gICAgICovXG4gICAgbGF0aXR1ZGVEZWx0YTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGxvbmdpdHVkZURlbHRhOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgY2FtZXJhIHZpZXcgdGhlIG1hcCBzaG91bGQgdXNlLlxuICAgKlxuICAgKiBVc2UgdGhlIGNhbWVyYSBzeXN0ZW0sIGluc3RlYWQgb2YgdGhlIHJlZ2lvbiBzeXN0ZW0sIGlmIHlvdSBuZWVkIGNvbnRyb2wgb3ZlclxuICAgKiB0aGUgcGl0Y2ggb3IgaGVhZGluZy5cbiAgICovXG4gIGNhbWVyYTogQ2FtZXJhU2hhcGUsXG5cbiAgLyoqXG4gICAqIFRoZSBpbml0aWFsIGNhbWVyYSB2aWV3IHRoZSBtYXAgc2hvdWxkIHVzZS4gIFVzZSB0aGlzIHByb3AgaW5zdGVhZCBvZiBgY2FtZXJhYFxuICAgKiBvbmx5IGlmIHlvdSBkb24ndCB3YW50IHRvIGNvbnRyb2wgdGhlIGNhbWVyYSBvZiB0aGUgbWFwIGJlc2lkZXMgdGhlIGluaXRpYWwgdmlldy5cbiAgICpcbiAgICogVXNlIHRoZSBjYW1lcmEgc3lzdGVtLCBpbnN0ZWFkIG9mIHRoZSByZWdpb24gc3lzdGVtLCBpZiB5b3UgbmVlZCBjb250cm9sIG92ZXJcbiAgICogdGhlIHBpdGNoIG9yIGhlYWRpbmcuXG4gICAqXG4gICAqIENoYW5naW5nIHRoaXMgcHJvcCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBtb3VudGVkIHdpbGwgbm90IHJlc3VsdCBpbiBhIGNhbWVyYSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoaXMgaXMgc2ltaWxhciB0byB0aGUgYGluaXRpYWxWYWx1ZWAgcHJvcCBvZiBhIHRleHQgaW5wdXQuXG4gICAqL1xuICBpbml0aWFsQ2FtZXJhOiBDYW1lcmFTaGFwZSxcblxuICAvKipcbiAgICogQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byB1c2UgbGl0ZU1vZGUgZm9yIGFuZHJvaWRcbiAgICogRGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBsaXRlTW9kZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIChHb29nbGUgTWFwcyBvbmx5KVxuICAgKlxuICAgKiBQYWRkaW5nIHRoYXQgaXMgdXNlZCBieSB0aGUgR29vZ2xlIE1hcCBWaWV3IHRvIHBvc2l0aW9uXG4gICAqIHRoZSBjYW1lcmEsIGxlZ2FsIGxhYmVscyBhbmQgYnV0dG9uc1xuICAgKlxuICAgKi9cbiAgbWFwUGFkZGluZzogRWRnZUluc2V0c1Byb3BUeXBlLFxuXG4gIC8qKlxuICAgKiAoR29vZ2xlIE1hcHMgb25seSwgaU9TKVxuICAgKlxuICAgKiBXaGV0aGVyIHRoZSBzYWZlIGFyZWEgcGFkZGluZyBpcyBhZGRlZCB0byB0aGUgR29vZ2xlIE1hcCBWaWV3IHBhZGRpbmcuXG4gICAqIFRoaXMgYWZmZWN0cyB3aGVyZSBtYXJrZXJzLCBjb21wYXNzLCBHb29nbGUgbG9nbyBldGMuIGFyZSBwbGFjZWQgb24gdGhlIHZpZXcuXG4gICAqXG4gICAqL1xuICBwYWRkaW5nQWRqdXN0bWVudEJlaGF2aW9yOiBQcm9wVHlwZXMub25lT2YoWydhbHdheXMnLCAnYXV0b21hdGljJywgJ25ldmVyJ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHNpemUgb2YgYXJlYSB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIG1heERlbHRhOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIHNpemUgb2YgYXJlYSB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIG1pbkRlbHRhOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBJbnNldHMgZm9yIHRoZSBtYXAncyBsZWdhbCBsYWJlbCwgb3JpZ2luYWxseSBhdCBib3R0b20gbGVmdCBvZiB0aGUgbWFwLlxuICAgKiBTZWUgYEVkZ2VJbnNldHNQcm9wVHlwZS5qc2AgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqL1xuICBsZWdhbExhYmVsSW5zZXRzOiBFZGdlSW5zZXRzUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIG9uY2UgdGhlIG1hcCBpcyBmdWxseSBsb2FkZWQuXG4gICAqL1xuICBvbk1hcFJlYWR5OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgb25jZSBhbGwgdGlsZXMgaGF2ZSBiZWVuIGxvYWRlZFxuICAgKiAob3IgZmFpbGVkIHBlcm1hbmVudGx5KSBhbmQgbGFiZWxzIGhhdmUgYmVlbiByZW5kZXJlZC5cbiAgICovXG4gIG9uTWFwTG9hZGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgb25jZSB0aGUga21sIGlzIGZ1bGx5IGxvYWRlZC5cbiAgICovXG4gIG9uS21sUmVhZHk6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCBjb250aW51b3VzbHkgd2hlbiB0aGUgdXNlciBpcyBkcmFnZ2luZyB0aGUgbWFwLlxuICAgKi9cbiAgb25SZWdpb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCBvbmNlLCB3aGVuIHRoZSB1c2VyIGlzIGRvbmUgbW92aW5nIHRoZSBtYXAuXG4gICAqL1xuICBvblJlZ2lvbkNoYW5nZUNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB1c2VyIHRhcHMgb24gdGhlIG1hcC5cbiAgICovXG4gIG9uUHJlc3M6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHVzZXIgZG91YmxlIHRhcHMgb24gdGhlIG1hcC5cbiAgICovXG4gIG9uRG91YmxlUHJlc3M6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHVzZXIgbWFrZXMgYSBcImxvbmcgcHJlc3NcIiBzb21ld2hlcmUgb24gdGhlIG1hcC5cbiAgICovXG4gIG9uTG9uZ1ByZXNzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgdW5kZXJseWluZyBtYXAgZmlndXJlcyBvdXIgdXNlcnMgY3VycmVudCBsb2NhdGlvbi5cbiAgICovXG4gIG9uVXNlckxvY2F0aW9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB1c2VyIG1ha2VzIGEgXCJkcmFnXCIgc29tZXdoZXJlIG9uIHRoZSBtYXBcbiAgICovXG4gIG9uUGFuRHJhZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdXNlciBjbGljayBvbiBhIFBPSVxuICAgKi9cbiAgb25Qb2lDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBtYXJrZXIgb24gdGhlIG1hcCBpcyB0YXBwZWQgYnkgdGhlIHVzZXIuXG4gICAqL1xuICBvbk1hcmtlclByZXNzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiBhIG1hcmtlciBvbiB0aGUgbWFwIGJlY29tZXMgc2VsZWN0ZWQuIFRoaXMgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAgKiB0aGUgY2FsbG91dCBmb3IgdGhhdCBtYXJrZXIgaXMgYWJvdXQgdG8gYmUgc2hvd24uXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIG9uTWFya2VyU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiBhIG1hcmtlciBvbiB0aGUgbWFwIGJlY29tZXMgZGVzZWxlY3RlZC4gVGhpcyB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gICAqIHRoZSBjYWxsb3V0IGZvciB0aGF0IG1hcmtlciBpcyBhYm91dCB0byBiZSBoaWRkZW4uXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIG9uTWFya2VyRGVzZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIGEgY2FsbG91dCBpcyB0YXBwZWQgYnkgdGhlIHVzZXIuXG4gICAqL1xuICBvbkNhbGxvdXRQcmVzczogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgaW5pdGlhdGVzIGEgZHJhZyBvbiBhIG1hcmtlciAoaWYgaXQgaXMgZHJhZ2dhYmxlKVxuICAgKi9cbiAgb25NYXJrZXJEcmFnU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgY29udGludW91c2x5IGFzIGEgbWFya2VyIGlzIGRyYWdnZWRcbiAgICovXG4gIG9uTWFya2VyRHJhZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBkcmFnIG9uIGEgbWFya2VyIGZpbmlzaGVzLiBUaGlzIGlzIHVzdWFsbHkgdGhlIHBvaW50IHlvdVxuICAgKiB3aWxsIHdhbnQgdG8gc2V0U3RhdGUgb24gdGhlIG1hcmtlcidzIGNvb3JkaW5hdGUgYWdhaW5cbiAgICovXG4gIG9uTWFya2VyRHJhZ0VuZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIE1pbmltdW0gem9vbSB2YWx1ZSBmb3IgdGhlIG1hcCwgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDIwXG4gICAqL1xuICBtaW5ab29tTGV2ZWw6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIE1heGltdW0gem9vbSB2YWx1ZSBmb3IgdGhlIG1hcCwgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDIwXG4gICAqL1xuICBtYXhab29tTGV2ZWw6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFVybCBLTUwgU291cmNlXG4gICAqL1xuICBrbWxTcmM6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE9mZnNldCBQb2ludCB4IHkgZm9yIGNvbXBhc3MgbG9jYXRpb24uXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGNvbXBhc3NPZmZzZXQ6IFBvaW50UHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBsZXZlbCBpcyBhY3RpdmF0ZWQgb24gYSBpbmRvb3IgYnVpbGRpbmcuXG4gICAqL1xuICBvbkluZG9vckxldmVsQWN0aXZhdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiBhIEJ1aWxkaW5nIGlzIGZvY3VzZWQuXG4gICAqL1xuICBvbkluZG9vckJ1aWxkaW5nRm9jdXNlZDogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5jbGFzcyBNYXBWaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNSZWFkeTogUGxhdGZvcm0uT1MgPT09ICdpb3MnLFxuICAgIH07XG5cbiAgICB0aGlzLl9vbk1hcFJlYWR5ID0gdGhpcy5fb25NYXBSZWFkeS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uTWFya2VyUHJlc3MgPSB0aGlzLl9vbk1hcmtlclByZXNzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25DaGFuZ2UgPSB0aGlzLl9vbkNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uTGF5b3V0ID0gdGhpcy5fb25MYXlvdXQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4geyBwcm92aWRlcjogdGhpcy5wcm9wcy5wcm92aWRlciB9O1xuICB9XG5cbiAgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5zdGF0ZS5pc1JlYWR5ICYmXG4gICAgICB0aGlzLnByb3BzLmN1c3RvbU1hcFN0eWxlICE9PSBwcmV2UHJvcHMuY3VzdG9tTWFwU3R5bGVcbiAgICApIHtcbiAgICAgIHRoaXMuX3VwZGF0ZVN0eWxlKHRoaXMucHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5yZWdpb24gfHwgbnVsbDtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcmVnaW9uKSB7XG4gICAgY29uc3QgYSA9IHRoaXMuX19sYXN0UmVnaW9uO1xuICAgIGNvbnN0IGIgPSByZWdpb247XG4gICAgaWYgKCFhIHx8ICFiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChcbiAgICAgIGEubGF0aXR1ZGUgIT09IGIubGF0aXR1ZGUgfHxcbiAgICAgIGEubG9uZ2l0dWRlICE9PSBiLmxvbmdpdHVkZSB8fFxuICAgICAgYS5sYXRpdHVkZURlbHRhICE9PSBiLmxhdGl0dWRlRGVsdGEgfHxcbiAgICAgIGEubG9uZ2l0dWRlRGVsdGEgIT09IGIubG9uZ2l0dWRlRGVsdGFcbiAgICApIHtcbiAgICAgIHRoaXMubWFwLnNldE5hdGl2ZVByb3BzKHsgcmVnaW9uOiBiIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgaXNSZWFkeSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoaXNSZWFkeSkge1xuICAgICAgdGhpcy5fdXBkYXRlU3R5bGUodGhpcy5wcm9wcyk7XG4gICAgfVxuICB9XG5cbiAgX3VwZGF0ZVN0eWxlKHByb3BzKSB7XG4gICAgY29uc3QgeyBjdXN0b21NYXBTdHlsZSB9ID0gcHJvcHM7XG4gICAgdGhpcy5tYXAuc2V0TmF0aXZlUHJvcHMoe1xuICAgICAgY3VzdG9tTWFwU3R5bGVTdHJpbmc6IEpTT04uc3RyaW5naWZ5KGN1c3RvbU1hcFN0eWxlKSxcbiAgICB9KTtcbiAgfVxuXG4gIF9vbk1hcFJlYWR5KCkge1xuICAgIGNvbnN0IHsgcmVnaW9uLCBpbml0aWFsUmVnaW9uLCBvbk1hcFJlYWR5IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChyZWdpb24pIHtcbiAgICAgIHRoaXMubWFwLnNldE5hdGl2ZVByb3BzKHsgcmVnaW9uIH0pO1xuICAgIH0gZWxzZSBpZiAoaW5pdGlhbFJlZ2lvbikge1xuICAgICAgdGhpcy5tYXAuc2V0TmF0aXZlUHJvcHMoeyBpbml0aWFsUmVnaW9uIH0pO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVTdHlsZSh0aGlzLnByb3BzKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNSZWFkeTogdHJ1ZSB9LCAoKSA9PiB7XG4gICAgICBpZiAob25NYXBSZWFkeSkge1xuICAgICAgICBvbk1hcFJlYWR5KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfb25MYXlvdXQoZSkge1xuICAgIGNvbnN0IHsgbGF5b3V0IH0gPSBlLm5hdGl2ZUV2ZW50O1xuICAgIGlmICghbGF5b3V0LndpZHRoIHx8ICFsYXlvdXQuaGVpZ2h0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmlzUmVhZHkgJiYgIXRoaXMuX19sYXlvdXRDYWxsZWQpIHtcbiAgICAgIGNvbnN0IHsgcmVnaW9uLCBpbml0aWFsUmVnaW9uIH0gPSB0aGlzLnByb3BzO1xuICAgICAgaWYgKHJlZ2lvbikge1xuICAgICAgICB0aGlzLl9fbGF5b3V0Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tYXAuc2V0TmF0aXZlUHJvcHMoeyByZWdpb24gfSk7XG4gICAgICB9IGVsc2UgaWYgKGluaXRpYWxSZWdpb24pIHtcbiAgICAgICAgdGhpcy5fX2xheW91dENhbGxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMubWFwLnNldE5hdGl2ZVByb3BzKHsgaW5pdGlhbFJlZ2lvbiB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub25MYXlvdXQpIHtcbiAgICAgIHRoaXMucHJvcHMub25MYXlvdXQoZSk7XG4gICAgfVxuICB9XG5cbiAgX29uTWFya2VyUHJlc3MoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1hcmtlclByZXNzKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTWFya2VyUHJlc3MoZXZlbnQubmF0aXZlRXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIF9vbkNoYW5nZShldmVudCkge1xuICAgIHRoaXMuX19sYXN0UmVnaW9uID0gZXZlbnQubmF0aXZlRXZlbnQucmVnaW9uO1xuICAgIGlmIChldmVudC5uYXRpdmVFdmVudC5jb250aW51b3VzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vblJlZ2lvbkNoYW5nZSkge1xuICAgICAgICB0aGlzLnByb3BzLm9uUmVnaW9uQ2hhbmdlKGV2ZW50Lm5hdGl2ZUV2ZW50LnJlZ2lvbik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm9uUmVnaW9uQ2hhbmdlQ29tcGxldGUpIHtcbiAgICAgIHRoaXMucHJvcHMub25SZWdpb25DaGFuZ2VDb21wbGV0ZShldmVudC5uYXRpdmVFdmVudC5yZWdpb24pO1xuICAgIH1cbiAgfVxuXG4gIGdldENhbWVyYSgpIHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgcmV0dXJuIE5hdGl2ZU1vZHVsZXMuQWlyTWFwTW9kdWxlLmdldENhbWVyYSh0aGlzLl9nZXRIYW5kbGUoKSk7XG4gICAgfSBlbHNlIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ydW5Db21tYW5kKCdnZXRDYW1lcmEnLCBbXSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnZ2V0Q2FtZXJhIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybScpO1xuICB9XG5cbiAgc2V0Q2FtZXJhKGNhbWVyYSkge1xuICAgIHRoaXMuX3J1bkNvbW1hbmQoJ3NldENhbWVyYScsIFtjYW1lcmFdKTtcbiAgfVxuXG4gIGFuaW1hdGVDYW1lcmEoY2FtZXJhLCBvcHRzKSB7XG4gICAgdGhpcy5fcnVuQ29tbWFuZCgnYW5pbWF0ZUNhbWVyYScsIFtjYW1lcmEsIChvcHRzICYmIG9wdHMuZHVyYXRpb24pIHx8IDUwMF0pO1xuICB9XG5cbiAgYW5pbWF0ZVRvTmF2aWdhdGlvbihsb2NhdGlvbiwgYmVhcmluZywgYW5nbGUsIGR1cmF0aW9uKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2FuaW1hdGVUb05hdmlnYXRpb24oKSBpcyBkZXByZWNhdGVkLCB1c2UgYW5pbWF0ZUNhbWVyYSgpIGluc3RlYWQnXG4gICAgKTtcbiAgICB0aGlzLl9ydW5Db21tYW5kKCdhbmltYXRlVG9OYXZpZ2F0aW9uJywgW1xuICAgICAgbG9jYXRpb24sXG4gICAgICBiZWFyaW5nLFxuICAgICAgYW5nbGUsXG4gICAgICBkdXJhdGlvbiB8fCA1MDAsXG4gICAgXSk7XG4gIH1cblxuICBhbmltYXRlVG9SZWdpb24ocmVnaW9uLCBkdXJhdGlvbikge1xuICAgIHRoaXMuX3J1bkNvbW1hbmQoJ2FuaW1hdGVUb1JlZ2lvbicsIFtyZWdpb24sIGR1cmF0aW9uIHx8IDUwMF0pO1xuICB9XG5cbiAgYW5pbWF0ZVRvQ29vcmRpbmF0ZShsYXRMbmcsIGR1cmF0aW9uKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2FuaW1hdGVUb0Nvb3JkaW5hdGUoKSBpcyBkZXByZWNhdGVkLCB1c2UgYW5pbWF0ZUNhbWVyYSgpIGluc3RlYWQnXG4gICAgKTtcbiAgICB0aGlzLl9ydW5Db21tYW5kKCdhbmltYXRlVG9Db29yZGluYXRlJywgW2xhdExuZywgZHVyYXRpb24gfHwgNTAwXSk7XG4gIH1cblxuICBhbmltYXRlVG9CZWFyaW5nKGJlYXJpbmcsIGR1cmF0aW9uKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2FuaW1hdGVUb0JlYXJpbmcoKSBpcyBkZXByZWNhdGVkLCB1c2UgYW5pbWF0ZUNhbWVyYSgpIGluc3RlYWQnXG4gICAgKTtcbiAgICB0aGlzLl9ydW5Db21tYW5kKCdhbmltYXRlVG9CZWFyaW5nJywgW2JlYXJpbmcsIGR1cmF0aW9uIHx8IDUwMF0pO1xuICB9XG5cbiAgYW5pbWF0ZVRvVmlld2luZ0FuZ2xlKGFuZ2xlLCBkdXJhdGlvbikge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdhbmltYXRlVG9WaWV3aW5nQW5nbGUoKSBpcyBkZXByZWNhdGVkLCB1c2UgYW5pbWF0ZUNhbWVyYSgpIGluc3RlYWQnXG4gICAgKTtcbiAgICB0aGlzLl9ydW5Db21tYW5kKCdhbmltYXRlVG9WaWV3aW5nQW5nbGUnLCBbYW5nbGUsIGR1cmF0aW9uIHx8IDUwMF0pO1xuICB9XG5cbiAgZml0VG9FbGVtZW50cyhhbmltYXRlZCkge1xuICAgIHRoaXMuX3J1bkNvbW1hbmQoJ2ZpdFRvRWxlbWVudHMnLCBbYW5pbWF0ZWRdKTtcbiAgfVxuXG4gIGZpdFRvU3VwcGxpZWRNYXJrZXJzKG1hcmtlcnMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGVkZ2VQYWRkaW5nID0geyB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDAsIGxlZnQ6IDAgfSxcbiAgICAgIGFuaW1hdGVkID0gdHJ1ZSxcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIHRoaXMuX3J1bkNvbW1hbmQoJ2ZpdFRvU3VwcGxpZWRNYXJrZXJzJywgW21hcmtlcnMsIGVkZ2VQYWRkaW5nLCBhbmltYXRlZF0pO1xuICB9XG5cbiAgZml0VG9Db29yZGluYXRlcyhjb29yZGluYXRlcyA9IFtdLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBlZGdlUGFkZGluZyA9IHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwIH0sXG4gICAgICBhbmltYXRlZCA9IHRydWUsXG4gICAgfSA9IG9wdGlvbnM7XG5cbiAgICB0aGlzLl9ydW5Db21tYW5kKCdmaXRUb0Nvb3JkaW5hdGVzJywgW2Nvb3JkaW5hdGVzLCBlZGdlUGFkZGluZywgYW5pbWF0ZWRdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdmlzaWJsZSBib3VkYXJpZXNcbiAgICpcbiAgICogQHJldHVybiBQcm9taXNlIFByb21pc2Ugd2l0aCB0aGUgYm91bmRpbmcgYm94ICh7IG5vcnRoRWFzdDogPExhdExuZz4sIHNvdXRoV2VzdDogPExhdExuZz4gfSlcbiAgICovXG4gIGFzeW5jIGdldE1hcEJvdW5kYXJpZXMoKSB7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIHJldHVybiBhd2FpdCBOYXRpdmVNb2R1bGVzLkFpck1hcE1vZHVsZS5nZXRNYXBCb3VuZGFyaWVzKFxuICAgICAgICB0aGlzLl9nZXRIYW5kbGUoKVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3J1bkNvbW1hbmQoJ2dldE1hcEJvdW5kYXJpZXMnLCBbXSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnZ2V0TWFwQm91bmRhcmllcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgcGxhdGZvcm0nKTtcbiAgfVxuXG4gIHNldE1hcEJvdW5kYXJpZXMobm9ydGhFYXN0LCBzb3V0aFdlc3QpIHtcbiAgICB0aGlzLl9ydW5Db21tYW5kKCdzZXRNYXBCb3VuZGFyaWVzJywgW25vcnRoRWFzdCwgc291dGhXZXN0XSk7XG4gIH1cblxuICBzZXRJbmRvb3JBY3RpdmVMZXZlbEluZGV4KGFjdGl2ZUxldmVsSW5kZXgpIHtcbiAgICB0aGlzLl9ydW5Db21tYW5kKCdzZXRJbmRvb3JBY3RpdmVMZXZlbEluZGV4JywgW2FjdGl2ZUxldmVsSW5kZXhdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIHNuYXBzaG90IG9mIHRoZSBtYXAgYW5kIHNhdmVzIGl0IHRvIGEgcGljdHVyZVxuICAgKiBmaWxlIG9yIHJldHVybnMgdGhlIGltYWdlIGFzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0gY29uZmlnIENvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKiBAcGFyYW0gW2NvbmZpZy53aWR0aF0gV2lkdGggb2YgdGhlIHJlbmRlcmVkIG1hcC12aWV3ICh3aGVuIG9taXR0ZWQgYWN0dWFsIHZpZXcgd2lkdGggaXMgdXNlZCkuXG4gICAqIEBwYXJhbSBbY29uZmlnLmhlaWdodF0gSGVpZ2h0IG9mIHRoZSByZW5kZXJlZCBtYXAtdmlldyAod2hlbiBvbWl0dGVkIGFjdHVhbCBoZWlnaHQgaXMgdXNlZCkuXG4gICAqIEBwYXJhbSBbY29uZmlnLnJlZ2lvbl0gUmVnaW9uIHRvIHJlbmRlciAoT25seSBzdXBwb3J0ZWQgb24gaU9TKS5cbiAgICogQHBhcmFtIFtjb25maWcuZm9ybWF0XSBFbmNvZGluZyBmb3JtYXQgKCdwbmcnLCAnanBnJykgKGRlZmF1bHQ6ICdwbmcnKS5cbiAgICogQHBhcmFtIFtjb25maWcucXVhbGl0eV0gQ29tcHJlc3Npb24gcXVhbGl0eSAob25seSB1c2VkIGZvciBqcGcpIChkZWZhdWx0OiAxLjApLlxuICAgKiBAcGFyYW0gW2NvbmZpZy5yZXN1bHRdIFJlc3VsdCBmb3JtYXQgKCdmaWxlJywgJ2Jhc2U2NCcpIChkZWZhdWx0OiAnZmlsZScpLlxuICAgKlxuICAgKiBAcmV0dXJuIFByb21pc2UgUHJvbWlzZSB3aXRoIGVpdGhlciB0aGUgZmlsZS11cmkgb3IgYmFzZTY0IGVuY29kZWQgc3RyaW5nXG4gICAqL1xuICB0YWtlU25hcHNob3QoYXJncykge1xuICAgIC8vIEZvciB0aGUgdGltZSBiZWluZyB3ZSBzdXBwb3J0IHRoZSBsZWdhY3kgQVBJIG9uIGlPUy5cbiAgICAvLyBUaGlzIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlIGFuZCBvbmx5IHRoZVxuICAgIC8vIG5ldyBQcm9taXNlIHN0eWxlIEFQSSBzaGFsbCBiZSBzdXBwb3J0ZWQuXG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJyAmJiBhcmd1bWVudHMubGVuZ3RoID09PSA0KSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdPbGQgdGFrZVNuYXBzaG90IEFQSSBoYXMgYmVlbiBkZXByZWNhdGVkOyB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgKTtcbiAgICAgIGNvbnN0IHdpZHRoID0gYXJndW1lbnRzWzBdO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYXJndW1lbnRzWzFdO1xuICAgICAgY29uc3QgcmVnaW9uID0gYXJndW1lbnRzWzJdO1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSBhcmd1bWVudHNbM107XG4gICAgICB0aGlzLl9ydW5Db21tYW5kKCd0YWtlU25hcHNob3QnLCBbXG4gICAgICAgIHdpZHRoIHx8IDAsXG4gICAgICAgIGhlaWdodCB8fCAwLFxuICAgICAgICByZWdpb24gfHwge30sXG4gICAgICAgICdwbmcnLFxuICAgICAgICAxLFxuICAgICAgICAnbGVnYWN5JyxcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICBdKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gU2FuaXRpemUgaW5wdXRzXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgd2lkdGg6IGFyZ3Mud2lkdGggfHwgMCxcbiAgICAgIGhlaWdodDogYXJncy5oZWlnaHQgfHwgMCxcbiAgICAgIHJlZ2lvbjogYXJncy5yZWdpb24gfHwge30sXG4gICAgICBmb3JtYXQ6IGFyZ3MuZm9ybWF0IHx8ICdwbmcnLFxuICAgICAgcXVhbGl0eTogYXJncy5xdWFsaXR5IHx8IDEuMCxcbiAgICAgIHJlc3VsdDogYXJncy5yZXN1bHQgfHwgJ2ZpbGUnLFxuICAgIH07XG4gICAgaWYgKGNvbmZpZy5mb3JtYXQgIT09ICdwbmcnICYmIGNvbmZpZy5mb3JtYXQgIT09ICdqcGcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZm9ybWF0IHNwZWNpZmllZCcpO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLnJlc3VsdCAhPT0gJ2ZpbGUnICYmIGNvbmZpZy5yZXN1bHQgIT09ICdiYXNlNjQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVzdWx0IHNwZWNpZmllZCcpO1xuICAgIH1cblxuICAgIC8vIENhbGwgbmF0aXZlIGZ1bmN0aW9uXG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIHJldHVybiBOYXRpdmVNb2R1bGVzLkFpck1hcE1vZHVsZS50YWtlU25hcHNob3QodGhpcy5fZ2V0SGFuZGxlKCksIGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRoaXMuX3J1bkNvbW1hbmQoJ3Rha2VTbmFwc2hvdCcsIFtcbiAgICAgICAgICBjb25maWcud2lkdGgsXG4gICAgICAgICAgY29uZmlnLmhlaWdodCxcbiAgICAgICAgICBjb25maWcucmVnaW9uLFxuICAgICAgICAgIGNvbmZpZy5mb3JtYXQsXG4gICAgICAgICAgY29uZmlnLnF1YWxpdHksXG4gICAgICAgICAgY29uZmlnLnJlc3VsdCxcbiAgICAgICAgICAoZXJyLCBzbmFwc2hvdCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoc25hcHNob3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgndGFrZVNuYXBzaG90IG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybScpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYSBtYXAgY29vcmRpbmF0ZSB0byB1c2VyLXNwYWNlIHBvaW50XG4gICAqXG4gICAqIEBwYXJhbSBjb29yZGluYXRlIENvb3JkaW5hdGVcbiAgICogQHBhcmFtIFtjb29yZGluYXRlLmxhdGl0dWRlXSBMYXRpdHVkZVxuICAgKiBAcGFyYW0gW2Nvb3JkaW5hdGUubG9uZ2l0dWRlXSBMb25naXR1ZGVcbiAgICpcbiAgICogQHJldHVybiBQcm9taXNlIFByb21pc2Ugd2l0aCB0aGUgcG9pbnQgKHsgeDogTnVtYmVyLCB5OiBOdW1iZXIgfSlcbiAgICovXG4gIHBvaW50Rm9yQ29vcmRpbmF0ZShjb29yZGluYXRlKSB7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIHJldHVybiBOYXRpdmVNb2R1bGVzLkFpck1hcE1vZHVsZS5wb2ludEZvckNvb3JkaW5hdGUoXG4gICAgICAgIHRoaXMuX2dldEhhbmRsZSgpLFxuICAgICAgICBjb29yZGluYXRlXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVuQ29tbWFuZCgncG9pbnRGb3JDb29yZGluYXRlJywgW2Nvb3JkaW5hdGVdKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdwb2ludEZvckNvb3JkaW5hdGUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtJyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBhIHVzZXItc3BhY2UgcG9pbnQgdG8gYSBtYXAgY29vcmRpbmF0ZVxuICAgKlxuICAgKiBAcGFyYW0gcG9pbnQgUG9pbnRcbiAgICogQHBhcmFtIFtwb2ludC54XSBYXG4gICAqIEBwYXJhbSBbcG9pbnQueF0gWVxuICAgKlxuICAgKiBAcmV0dXJuIFByb21pc2UgUHJvbWlzZSB3aXRoIHRoZSBjb29yZGluYXRlICh7IGxhdGl0dWRlOiBOdW1iZXIsIGxvbmdpdHVkZTogTnVtYmVyIH0pXG4gICAqL1xuICBjb29yZGluYXRlRm9yUG9pbnQocG9pbnQpIHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgcmV0dXJuIE5hdGl2ZU1vZHVsZXMuQWlyTWFwTW9kdWxlLmNvb3JkaW5hdGVGb3JQb2ludChcbiAgICAgICAgdGhpcy5fZ2V0SGFuZGxlKCksXG4gICAgICAgIHBvaW50XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVuQ29tbWFuZCgnY29vcmRpbmF0ZUZvclBvaW50JywgW3BvaW50XSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnY29vcmRpbmF0ZUZvclBvaW50IG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBtYXJrZXJzJyBjZW50ZXJzIGFuZCBmcmFtZXMgaW4gdXNlci1zcGFjZSBjb29yZGluYXRlc1xuICAgKlxuICAgKiBAcGFyYW0gb25seVZpc2libGUgYm9vbGVhbiB0cnVlIHRvIGluY2x1ZGUgb25seSB2aXNpYmxlIG1hcmtlcnMsIGZhbHNlIHRvIGluY2x1ZGUgYWxsXG4gICAqXG4gICAqIEByZXR1cm4gUHJvbWlzZSBQcm9taXNlIHdpdGggeyA8aWRlbnRpZmllcj46IHsgcG9pbnQ6IFBvaW50LCBmcmFtZTogRnJhbWUgfSB9XG4gICAqL1xuICBnZXRNYXJrZXJzRnJhbWVzKG9ubHlWaXNpYmxlID0gZmFsc2UpIHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVuQ29tbWFuZCgnZ2V0TWFya2Vyc0ZyYW1lcycsIFtvbmx5VmlzaWJsZV0pO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ2dldE1hcmtlcnNGcmFtZXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtJyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGJvdW5kaW5nIGJveCBmcm9tIHJlZ2lvblxuICAgKlxuICAgKiBAcGFyYW0gcmVnaW9uIFJlZ2lvblxuICAgKlxuICAgKiBAcmV0dXJuIE9iamVjdCBPYmplY3QgYm91bmRpbmcgYm94ICh7IG5vcnRoRWFzdDogPExhdExuZz4sIHNvdXRoV2VzdDogPExhdExuZz4gfSlcbiAgICovXG4gIGJvdW5kaW5nQm94Rm9yUmVnaW9uKHJlZ2lvbikge1xuICAgIHJldHVybiB7XG4gICAgICBub3J0aEVhc3Q6IHtcbiAgICAgICAgbGF0aXR1ZGU6IHJlZ2lvbi5sYXRpdHVkZSArIHJlZ2lvbi5sYXRpdHVkZURlbHRhIC8gMixcbiAgICAgICAgbG9uZ2l0dWRlOiByZWdpb24ubG9uZ2l0dWRlICsgcmVnaW9uLmxvbmdpdHVkZURlbHRhIC8gMixcbiAgICAgIH0sXG4gICAgICBzb3V0aFdlc3Q6IHtcbiAgICAgICAgbGF0aXR1ZGU6IHJlZ2lvbi5sYXRpdHVkZSAtIHJlZ2lvbi5sYXRpdHVkZURlbHRhIC8gMixcbiAgICAgICAgbG9uZ2l0dWRlOiByZWdpb24ubG9uZ2l0dWRlIC0gcmVnaW9uLmxvbmdpdHVkZURlbHRhIC8gMixcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIF91aU1hbmFnZXJDb21tYW5kKG5hbWUpIHtcbiAgICBjb25zdCBVSU1hbmFnZXIgPSBOYXRpdmVNb2R1bGVzLlVJTWFuYWdlcjtcbiAgICBjb25zdCBjb21wb25lbnROYW1lID0gZ2V0QWlyTWFwTmFtZSh0aGlzLnByb3BzLnByb3ZpZGVyKTtcblxuICAgIGlmICghVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKSB7XG4gICAgICAvLyBSTiA8IDAuNThcbiAgICAgIHJldHVybiBVSU1hbmFnZXJbY29tcG9uZW50TmFtZV0uQ29tbWFuZHNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gUk4gPj0gMC41OFxuICAgIHJldHVybiBVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWcoY29tcG9uZW50TmFtZSkuQ29tbWFuZHNbbmFtZV07XG4gIH1cblxuICBfbWFwTWFuYWdlckNvbW1hbmQobmFtZSkge1xuICAgIGNvbnN0IG1hbmFnZXJOYW1lID0gZ2V0QWlyTWFwTmFtZSh0aGlzLnByb3BzLnByb3ZpZGVyKTtcblxuICAgIGlmIChtYW5hZ2VyTmFtZSA9PT0gJ1VJJykge1xuICAgICAgY29uc3QgVUlNYW5hZ2VyID0gTmF0aXZlTW9kdWxlcy5VSU1hbmFnZXI7XG4gICAgICBpZiAoIVVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZykge1xuICAgICAgICAvLyBSTiA8IDAuNThcbiAgICAgICAgcmV0dXJuIFVJTWFuYWdlcltuYW1lXTtcbiAgICAgIH1cblxuICAgICAgLy8gUk4gPj0gMC41OFxuICAgICAgcmV0dXJuIFVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZyhuYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmF0aXZlTW9kdWxlc1tgJHtnZXRBaXJNYXBOYW1lKHRoaXMucHJvcHMucHJvdmlkZXIpfU1hbmFnZXJgXVtuYW1lXTtcbiAgfVxuXG4gIF9nZXRIYW5kbGUoKSB7XG4gICAgcmV0dXJuIGZpbmROb2RlSGFuZGxlKHRoaXMubWFwKTtcbiAgfVxuXG4gIF9ydW5Db21tYW5kKG5hbWUsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKFBsYXRmb3JtLk9TKSB7XG4gICAgICBjYXNlICdhbmRyb2lkJzpcbiAgICAgICAgcmV0dXJuIE5hdGl2ZU1vZHVsZXMuVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgICAgIHRoaXMuX2dldEhhbmRsZSgpLFxuICAgICAgICAgIHRoaXMuX3VpTWFuYWdlckNvbW1hbmQobmFtZSksXG4gICAgICAgICAgYXJnc1xuICAgICAgICApO1xuXG4gICAgICBjYXNlICdpb3MnOlxuICAgICAgICByZXR1cm4gdGhpcy5fbWFwTWFuYWdlckNvbW1hbmQobmFtZSkodGhpcy5fZ2V0SGFuZGxlKCksIC4uLmFyZ3MpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEludmFsaWQgcGxhdGZvcm0gd2FzIHBhc3NlZDogJHtQbGF0Zm9ybS5PU31gKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHByb3BzO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuaXNSZWFkeSkge1xuICAgICAgcHJvcHMgPSB7XG4gICAgICAgIHJlZ2lvbjogbnVsbCxcbiAgICAgICAgaW5pdGlhbFJlZ2lvbjogbnVsbCxcbiAgICAgICAgb25NYXJrZXJQcmVzczogdGhpcy5fb25NYXJrZXJQcmVzcyxcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuX29uQ2hhbmdlLFxuICAgICAgICBvbk1hcFJlYWR5OiB0aGlzLl9vbk1hcFJlYWR5LFxuICAgICAgICBvbkxheW91dDogdGhpcy5fb25MYXlvdXQsXG4gICAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICB9O1xuICAgICAgaWYgKFxuICAgICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2lvcycgJiZcbiAgICAgICAgcHJvcHMucHJvdmlkZXIgPT09IFByb3ZpZGVyQ29uc3RhbnRzLlBST1ZJREVSX0RFRkFVTFQgJiZcbiAgICAgICAgR09PR0xFX01BUFNfT05MWV9UWVBFUy5pbmNsdWRlcyhwcm9wcy5tYXBUeXBlKVxuICAgICAgKSB7XG4gICAgICAgIHByb3BzLm1hcFR5cGUgPSBNQVBfVFlQRVMuc3RhbmRhcmQ7XG4gICAgICB9XG4gICAgICBwcm9wcy5oYW5kbGVQYW5EcmFnID0gISFwcm9wcy5vblBhbkRyYWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0ge1xuICAgICAgICBzdHlsZTogdGhpcy5wcm9wcy5zdHlsZSxcbiAgICAgICAgcmVnaW9uOiBudWxsLFxuICAgICAgICBpbml0aWFsUmVnaW9uOiBudWxsLFxuICAgICAgICBvbk1hcmtlclByZXNzOiB0aGlzLl9vbk1hcmtlclByZXNzLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5fb25DaGFuZ2UsXG4gICAgICAgIG9uTWFwUmVhZHk6IHRoaXMuX29uTWFwUmVhZHksXG4gICAgICAgIG9uTGF5b3V0OiB0aGlzLl9vbkxheW91dCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcgJiYgdGhpcy5wcm9wcy5saXRlTW9kZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEFJUk1hcExpdGVcbiAgICAgICAgICByZWY9e3JlZiA9PiB7XG4gICAgICAgICAgICB0aGlzLm1hcCA9IHJlZjtcbiAgICAgICAgICB9fVxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgQUlSTWFwID0gZ2V0QWlyTWFwQ29tcG9uZW50KHRoaXMucHJvcHMucHJvdmlkZXIpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBSVJNYXBcbiAgICAgICAgcmVmPXtyZWYgPT4ge1xuICAgICAgICAgIHRoaXMubWFwID0gcmVmO1xuICAgICAgICB9fVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cblxuTWFwVmlldy5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5NYXBWaWV3LnZpZXdDb25maWcgPSB2aWV3Q29uZmlnO1xuTWFwVmlldy5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuXG5NYXBWaWV3Lk1BUF9UWVBFUyA9IE1BUF9UWVBFUztcblxuY29uc3QgbmF0aXZlQ29tcG9uZW50ID0gQ29tcG9uZW50ID0+XG4gIHJlcXVpcmVOYXRpdmVDb21wb25lbnQoQ29tcG9uZW50LCBNYXBWaWV3LCB7XG4gICAgbmF0aXZlT25seToge1xuICAgICAgb25DaGFuZ2U6IHRydWUsXG4gICAgICBvbk1hcFJlYWR5OiB0cnVlLFxuICAgICAgb25LbWxSZWFkeTogdHJ1ZSxcbiAgICAgIGhhbmRsZVBhbkRyYWc6IHRydWUsXG4gICAgfSxcbiAgfSk7XG5jb25zdCBhaXJNYXBzID0ge1xuICBkZWZhdWx0OiBuYXRpdmVDb21wb25lbnQoJ0FJUk1hcCcpLFxufTtcbmlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gIGFpck1hcHMuZ29vZ2xlID0gYWlyTWFwcy5kZWZhdWx0O1xufSBlbHNlIHtcbiAgYWlyTWFwcy5nb29nbGUgPSBnb29nbGVNYXBJc0luc3RhbGxlZFxuICAgID8gbmF0aXZlQ29tcG9uZW50KCdBSVJHb29nbGVNYXAnKVxuICAgIDogY3JlYXRlTm90U3VwcG9ydGVkQ29tcG9uZW50KFxuICAgICAgICAncmVhY3QtbmF0aXZlLW1hcHM6IEFpckdvb2dsZU1hcHMgZGlyIG11c3QgYmUgYWRkZWQgdG8geW91ciB4Q29kZSBwcm9qZWN0IHRvIHN1cHBvcnQgR29vZ2xlTWFwcyBvbiBpT1MuJ1xuICAgICAgKTtcbn1cbmNvbnN0IGdldEFpck1hcENvbXBvbmVudCA9IHByb3ZpZGVyID0+IGFpck1hcHNbcHJvdmlkZXIgfHwgJ2RlZmF1bHQnXTtcblxubGV0IEFJUk1hcExpdGU7XG5pZiAoIU5hdGl2ZU1vZHVsZXMuVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKSB7XG4gIC8vIFJOIDwgMC41OFxuICBBSVJNYXBMaXRlID1cbiAgICBOYXRpdmVNb2R1bGVzLlVJTWFuYWdlci5BSVJNYXBMaXRlICYmXG4gICAgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnQUlSTWFwTGl0ZScsIE1hcFZpZXcsIHtcbiAgICAgIG5hdGl2ZU9ubHk6IHtcbiAgICAgICAgb25DaGFuZ2U6IHRydWUsXG4gICAgICAgIG9uTWFwUmVhZHk6IHRydWUsXG4gICAgICAgIGhhbmRsZVBhbkRyYWc6IHRydWUsXG4gICAgICB9LFxuICAgIH0pO1xufSBlbHNlIHtcbiAgLy8gUk4gPj0gMC41OFxuICBBSVJNYXBMaXRlID1cbiAgICBOYXRpdmVNb2R1bGVzLlVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZygnQUlSTWFwTGl0ZScpICYmXG4gICAgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnQUlSTWFwTGl0ZScsIE1hcFZpZXcsIHtcbiAgICAgIG5hdGl2ZU9ubHk6IHtcbiAgICAgICAgb25DaGFuZ2U6IHRydWUsXG4gICAgICAgIG9uTWFwUmVhZHk6IHRydWUsXG4gICAgICAgIGhhbmRsZVBhbkRyYWc6IHRydWUsXG4gICAgICB9LFxuICAgIH0pO1xufVxuXG5leHBvcnQgY29uc3QgQW5pbWF0ZWQgPSBSTkFuaW1hdGVkLmNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50KE1hcFZpZXcpO1xuXG5leHBvcnQgY29uc3QgUHJvdmlkZXJQcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZihcbiAgT2JqZWN0LnZhbHVlcyhQcm92aWRlckNvbnN0YW50cylcbik7XG5cbi8qKlxuICogVE9ETzpcbiAqIEFsbCBvZiB0aGVzZSBwcm9wZXJ0aWVzIG9uIE1hcFZpZXcgYXJlIHVuZWNlc3Nhcnkgc2luY2UgdGhleSBjYW4gYmUgaW1wb3J0ZWRcbiAqIGluZGl2aWR1YWxseSB3aXRoIHRoZSBlczYgZXhwb3J0cyBpbiBpbmRleC5qcy4gUmVtb3ZpbmcgdGhlbSBpcyBhIGJyZWFraW5nIGNoYW5nZSxcbiAqIGJ1dCBwb3RlbnRpYWxseSBhbGxvd3MgZm9yIGJldHRlciBkZWFkIGNvZGUgZWxpbWluYXRpb24gc2luY2UgcmVmZXJlbmNlcyBhcmUgbm90XG4gKiBrZXB0IHRvIGNvbXBvbmVudHMgd2hpY2ggYXJlIG5ldmVyIHVzZWQuXG4gKi9cblxuTWFwVmlldy5NYXJrZXIgPSBNYXBNYXJrZXI7XG5NYXBWaWV3LlBvbHlsaW5lID0gTWFwUG9seWxpbmU7XG5NYXBWaWV3LlBvbHlnb24gPSBNYXBQb2x5Z29uO1xuTWFwVmlldy5DaXJjbGUgPSBNYXBDaXJjbGU7XG5NYXBWaWV3LlVybFRpbGUgPSBNYXBVcmxUaWxlO1xuTWFwVmlldy5NYXBXTVNUaWxlID0gTWFwV01TVGlsZTtcbk1hcFZpZXcuTG9jYWxUaWxlID0gTWFwTG9jYWxUaWxlO1xuTWFwVmlldy5IZWF0bWFwID0gTWFwSGVhdE1hcDtcbk1hcFZpZXcuT3ZlcmxheSA9IE1hcE92ZXJsYXk7XG5NYXBWaWV3LkNhbGxvdXQgPSBNYXBDYWxsb3V0O1xuTWFwVmlldy5DYWxsb3V0U3VidmlldyA9IE1hcENhbGxvdXRTdWJ2aWV3O1xuT2JqZWN0LmFzc2lnbihNYXBWaWV3LCBQcm92aWRlckNvbnN0YW50cyk7XG5NYXBWaWV3LlByb3ZpZGVyUHJvcFR5cGUgPSBQcm92aWRlclByb3BUeXBlO1xuXG5NYXBWaWV3LkFuaW1hdGVkID0gQW5pbWF0ZWQ7XG5NYXBWaWV3LkFuaW1hdGVkUmVnaW9uID0gQW5pbWF0ZWRSZWdpb247XG5cbmV4cG9ydCBkZWZhdWx0IE1hcFZpZXc7XG4iXX0=