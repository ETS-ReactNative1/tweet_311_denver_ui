4a5cc5802f78a4de5d6f5e9d6a747221
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__waitForEmptyLogQueueAsync = __waitForEmptyLogQueueAsync;
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _expoConstants = _interopRequireDefault(require("expo-constants"));

var _fbemitter = require("fbemitter");

var _invariant = _interopRequireDefault(require("invariant"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _LogSerialization = _interopRequireDefault(require("./LogSerialization"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _sessionId = _uuidJs.default.create().toString();

var _logQueue = [];

var _transportEventEmitter = new _fbemitter.EventEmitter();

var _logCounter = 0;
var _isSendingLogs = false;
var _completionPromise = null;
var _resolveCompletion2 = null;

function enqueueRemoteLogAsync(level, additionalFields, data) {
  var warning, lines, _ref, body, includesStack;

  return _regenerator.default.async(function enqueueRemoteLogAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!_isReactNativeWarning(data)) {
            _context.next = 8;
            break;
          }

          if (!(data.length === 0)) {
            _context.next = 3;
            break;
          }

          throw new Error("Warnings must include log arguments");

        case 3:
          warning = data[0];

          if (!(typeof warning !== 'string')) {
            _context.next = 6;
            break;
          }

          throw new TypeError("The log argument for a warning must be a string");

        case 6:
          lines = warning.split('\n');

          if (lines.length > 1 && /^\s+in /.test(lines[1])) {
            data[0] = lines[0];
          }

        case 8:
          _context.next = 10;
          return _regenerator.default.awrap(_LogSerialization.default.serializeLogDataAsync(data, level));

        case 10:
          _ref = _context.sent;
          body = _ref.body;
          includesStack = _ref.includesStack;

          _logQueue.push(_objectSpread({
            count: _logCounter++,
            level: level,
            body: body,
            includesStack: includesStack
          }, additionalFields));

          _sendRemoteLogsAsync().catch(function (error) {
            setImmediate(function () {
              throw error;
            });
          });

        case 15:
        case "end":
          return _context.stop();
      }
    }
  });
}

function _sendRemoteLogsAsync() {
  var batch, logUrl;
  return _regenerator.default.async(function _sendRemoteLogsAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!(_isSendingLogs || !_logQueue.length)) {
            _context2.next = 2;
            break;
          }

          return _context2.abrupt("return");

        case 2:
          batch = _logQueue.splice(0);
          logUrl = _expoConstants.default.manifest.logUrl;

          if (!(typeof logUrl !== 'string')) {
            _context2.next = 6;
            break;
          }

          throw new Error('The Expo project manifest must specify `logUrl`');

        case 6:
          _isSendingLogs = true;
          _context2.prev = 7;
          _context2.next = 10;
          return _regenerator.default.awrap(_sendNextLogBatchAsync(batch, logUrl));

        case 10:
          _context2.prev = 10;
          _isSendingLogs = false;
          return _context2.finish(10);

        case 13:
          if (!_logQueue.length) {
            _context2.next = 17;
            break;
          }

          return _context2.abrupt("return", _sendRemoteLogsAsync());

        case 17:
          if (_resolveCompletion2) {
            _resolveCompletion2();
          }

        case 18:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[7,, 10, 13]]);
}

function _sendNextLogBatchAsync(batch, logUrl) {
  var response, headers, success;
  return _regenerator.default.async(function _sendNextLogBatchAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          headers = {
            'Content-Type': 'application/json',
            Connection: 'keep-alive',
            'Proxy-Connection': 'keep-alive',
            Accept: 'application/json',
            'Device-Id': _expoConstants.default.installationId,
            'Session-Id': _sessionId
          };

          if (_expoConstants.default.deviceName) {
            headers['Device-Name'] = _expoConstants.default.deviceName;
          }

          _context3.prev = 2;
          _context3.next = 5;
          return _regenerator.default.awrap(fetch(logUrl, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(batch)
          }));

        case 5:
          response = _context3.sent;
          _context3.next = 12;
          break;

        case 8:
          _context3.prev = 8;
          _context3.t0 = _context3["catch"](2);

          _transportEventEmitter.emit('error', {
            error: _context3.t0
          });

          return _context3.abrupt("return");

        case 12:
          success = response.status >= 200 && response.status < 300;

          if (!success) {
            _transportEventEmitter.emit('error', {
              error: new Error("An HTTP error occurred when sending remote logs"),
              response: response
            });
          }

        case 14:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[2, 8]]);
}

function addTransportErrorListener(listener) {
  return _transportEventEmitter.addListener('error', listener);
}

function _isReactNativeWarning(data) {
  var message = data[0];
  return data.length === 1 && typeof message === 'string' && message.startsWith('Warning: ');
}

var _default = {
  enqueueRemoteLogAsync: enqueueRemoteLogAsync,
  addTransportErrorListener: addTransportErrorListener
};
exports.default = _default;

function __waitForEmptyLogQueueAsync() {
  if (_completionPromise) {
    return _completionPromise;
  }

  if (!_isSendingLogs && !_logQueue.length) {
    return Promise.resolve();
  }

  _completionPromise = new Promise(function (resolve) {
    _resolveCompletion2 = function _resolveCompletion() {
      (0, _invariant.default)(!_isSendingLogs, "Must not be sending logs at completion");
      (0, _invariant.default)(!_logQueue.length, "Log queue must be empty at completion");
      _completionPromise = null;
      _resolveCompletion2 = null;
      resolve();
    };
  });
  return _completionPromise;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,