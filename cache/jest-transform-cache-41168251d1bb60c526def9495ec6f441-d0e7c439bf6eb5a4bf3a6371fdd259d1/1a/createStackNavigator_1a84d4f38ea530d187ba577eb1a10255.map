{"version":3,"sources":["createStackNavigator.tsx"],"names":["screenOptions","rest","navigation","StackRouter","initialRouteName","children","React","e","isFocused","requestAnimationFrame","state","StackActions","target","key"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAUA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,4BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,SAAA,cAAA,CAAA,IAAA,EAKU;AAAA,MALc,gBAKd,GAAA,IAAA,CALc,gBAKd;AAAA,MALc,QAKd,GAAA,IAAA,CALc,QAKd;AAAA,MAFRA,aAEQ,GAAA,IAAA,CAFRA,aAEQ;AAAA,MADLC,IACK,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,kBAAA,EAAA,UAAA,EAAA,eAAA,CAAA,CAAA;;AAAA,cACmC,CAAA,GAAA,OAAA,CAAA,oBAAA,EAKzCE,OAAAA,CALyC,WAAA,EAK5B;AACbC,IAAAA,gBADa,EACbA,gBADa;AAEbC,IAAAA,QAFa,EAEbA,QAFa;AAGbL,IAAAA,aAAAA,EAAAA;AAHa,GAL4B,CADnC;AAAA,MACF,KADE,SACF,KADE;AAAA,MACF,WADE,SACF,WADE;AAAA,MACoBE,UADpB,SACoBA,UADpB;;AAYRI,EAAAA,KAAK,CAALA,SAAAA,CACE;AAAA,WACEJ,UAAU,CAAVA,WAAAA,IACA,UAAU,CAAV,WAAA,CAAA,UAAA,EAAmCK,UAAAA,CAAC,EAAI;AACtC,UAAMC,SAAS,GAAGN,UAAU,CADU,SACpBA,EAAlB;AAIAO,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YACEC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEH,CAAD,CAHH,gBAAA,EAIE;AAGAL,UAAAA,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKS,OAAAA,CAAAA,YAAAA,CADLT,QACKS,EADLT,EAAAA;AAEEU,YAAAA,MAAM,EAAEF,KAAK,CAACG;AAFhBX,WAAAA,CAAAA;AAID;AAZHO,OAAqB,CAArBA;AARNH,KAGI,CAFF;AAAA,GADFA,EAuBE,CAAA,UAAA,EAAaI,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAvBjCJ,GAuBE,CAvBFA;AA0BA,SACE,KAAA,CAAA,aAAA,CAAC,UAAA,CAAD,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,WAAW,EAHb,WAAA;AAIE,IAAA,UAAU,EAAEJ;AAJd,GAAA,CAAA,CADF;AAQD;;eAEc,CAAA,GAAA,OAAA,CAAA,sBAAA,EAAA,cAAA,C","sourcesContent":["import * as React from 'react';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', e => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationOptions,\n  typeof StackNavigator\n>(StackNavigator);\n"]}