{"version":3,"sources":["../src/Location.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, CodedError } from '@unimodules/core';\nimport {\n  PermissionResponse as UMPermissionResponse,\n  PermissionStatus,\n} from 'unimodules-permissions-interface';\n\nimport invariant from 'invariant';\n\nimport ExpoLocation from './ExpoLocation';\n\nconst LocationEventEmitter = new EventEmitter(ExpoLocation);\n\nexport interface ProviderStatus {\n  locationServicesEnabled: boolean;\n  backgroundModeEnabled: boolean;\n  gpsAvailable?: boolean;\n  networkAvailable?: boolean;\n  passiveAvailable?: boolean;\n}\n\nexport interface LocationOptions {\n  accuracy?: LocationAccuracy;\n  enableHighAccuracy?: boolean;\n  timeInterval?: number;\n  distanceInterval?: number;\n  timeout?: number;\n  mayShowUserSettingsDialog?: boolean;\n}\n\nexport interface LocationData {\n  coords: {\n    latitude: number;\n    longitude: number;\n    altitude: number;\n    accuracy: number;\n    heading: number;\n    speed: number;\n  };\n  timestamp: number;\n}\n\nexport interface HeadingData {\n  trueHeading: number;\n  magHeading: number;\n  accuracy: number;\n}\n\nexport interface GeocodedLocation {\n  latitude: number;\n  longitude: number;\n  altitude?: number;\n  accuracy?: number;\n}\n\nexport interface Address {\n  city: string;\n  street: string;\n  region: string;\n  country: string;\n  postalCode: string;\n  name: string;\n}\n\nexport { PermissionStatus };\n\nexport type PermissionDetailsLocationIOS = {\n  scope: 'whenInUse' | 'always';\n};\n\nexport type PermissionDetailsLocationAndroid = {\n  scope: 'fine' | 'coarse' | 'none';\n};\n\nexport interface PermissionResponse extends UMPermissionResponse {\n  ios?: PermissionDetailsLocationIOS;\n  android?: PermissionDetailsLocationAndroid;\n}\n\ninterface LocationTaskOptions {\n  accuracy?: LocationAccuracy;\n  timeInterval?: number; // Android only\n  distanceInterval?: number;\n  showsBackgroundLocationIndicator?: boolean; // iOS only\n  deferredUpdatesDistance?: number;\n  deferredUpdatesTimeout?: number;\n  deferredUpdatesInterval?: number;\n\n  // iOS only\n  activityType?: LocationActivityType;\n  pausesUpdatesAutomatically?: boolean;\n\n  foregroundService?: {\n    notificationTitle: string;\n    notificationBody: string;\n    notificationColor?: string;\n  };\n}\n\ninterface Region {\n  identifier?: string;\n  latitude: number;\n  longitude: number;\n  radius: number;\n  notifyOnEnter?: boolean;\n  notifyOnExit?: boolean;\n}\n\ntype Subscription = {\n  remove: () => void;\n};\ntype LocationCallback = (data: LocationData) => any;\ntype HeadingCallback = (data: HeadingData) => any;\n\nenum LocationAccuracy {\n  Lowest = 1,\n  Low = 2,\n  Balanced = 3,\n  High = 4,\n  Highest = 5,\n  BestForNavigation = 6,\n}\n\nenum LocationActivityType {\n  Other = 1,\n  AutomotiveNavigation = 2,\n  Fitness = 3,\n  OtherNavigation = 4,\n  Airborne = 5,\n}\n\nexport { LocationAccuracy as Accuracy, LocationActivityType as ActivityType };\n\nexport enum GeofencingEventType {\n  Enter = 1,\n  Exit = 2,\n}\n\nexport enum GeofencingRegionState {\n  Unknown = 0,\n  Inside = 1,\n  Outside = 2,\n}\n\nlet nextWatchId = 0;\nlet headingId;\nfunction _getNextWatchId() {\n  nextWatchId++;\n  return nextWatchId;\n}\nfunction _getCurrentWatchId() {\n  return nextWatchId;\n}\n\nlet watchCallbacks: {\n  [watchId: number]: LocationCallback | HeadingCallback;\n} = {};\n\nlet deviceEventSubscription: Subscription | null;\nlet headingEventSub: Subscription | null;\nlet googleApiKey;\nconst googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n\nexport async function getProviderStatusAsync(): Promise<ProviderStatus> {\n  return ExpoLocation.getProviderStatusAsync();\n}\n\nexport async function enableNetworkProviderAsync(): Promise<void> {\n  // If network provider is disabled (user's location mode is set to \"Device only\"),\n  // Android's location provider may not give you any results. Use this method in order to ask the user\n  // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n  // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\n\nexport async function getCurrentPositionAsync(\n  options: LocationOptions = {}\n): Promise<LocationData> {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\n\nexport async function getLastKnownPositionAsync(): Promise<LocationData> {\n  return ExpoLocation.getLastKnownPositionAsync();\n}\n\n// Start Compass Module\n\n// To simplify, we will call watchHeadingAsync and wait for one update To ensure accuracy, we wait\n// for a couple of watch updates if the data has low accuracy\nexport async function getHeadingAsync(): Promise<HeadingData> {\n  return new Promise<HeadingData>(async (resolve, reject) => {\n    try {\n      // If there is already a compass active (would be a watch)\n      if (headingEventSub) {\n        let tries = 0;\n        const headingSub = LocationEventEmitter.addListener(\n          'Expo.headingChanged',\n          ({ heading }: { heading: HeadingData }) => {\n            if (heading.accuracy > 1 || tries > 5) {\n              resolve(heading);\n              LocationEventEmitter.removeSubscription(headingSub);\n            } else {\n              tries += 1;\n            }\n          }\n        );\n      } else {\n        let done = false;\n        let subscription;\n        let tries = 0;\n        subscription = await watchHeadingAsync((heading: HeadingData) => {\n          if (!done) {\n            if (heading.accuracy > 1 || tries > 5) {\n              subscription.remove();\n              resolve(heading);\n              done = true;\n            } else {\n              tries += 1;\n            }\n          } else {\n            subscription.remove();\n          }\n        });\n\n        if (done) {\n          subscription.remove();\n        }\n      }\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport async function watchHeadingAsync(\n  callback: HeadingCallback\n): Promise<{ remove: () => void }> {\n  // Check if there is already a compass event watch.\n  if (headingEventSub) {\n    _removeHeadingWatcher(headingId);\n  }\n\n  headingEventSub = LocationEventEmitter.addListener(\n    'Expo.headingChanged',\n    ({ watchId, heading }: { watchId: string; heading: HeadingData }) => {\n      const callback = watchCallbacks[watchId];\n      if (callback) {\n        callback(heading);\n      } else {\n        ExpoLocation.removeWatchAsync(watchId);\n      }\n    }\n  );\n\n  headingId = _getNextWatchId();\n  watchCallbacks[headingId] = callback;\n  await ExpoLocation.watchDeviceHeading(headingId);\n  return {\n    remove() {\n      _removeHeadingWatcher(headingId);\n    },\n  };\n}\n\n// Removes the compass listener and sub from JS and Native\nfunction _removeHeadingWatcher(watchId) {\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n  delete watchCallbacks[watchId];\n  ExpoLocation.removeWatchAsync(watchId);\n  if (headingEventSub) {\n    LocationEventEmitter.removeSubscription(headingEventSub);\n    headingEventSub = null;\n  }\n}\n// End Compass Module\n\nfunction _maybeInitializeEmitterSubscription() {\n  if (!deviceEventSubscription) {\n    deviceEventSubscription = LocationEventEmitter.addListener(\n      'Expo.locationChanged',\n      ({ watchId, location }: { watchId: string; location: LocationData }) => {\n        const callback = watchCallbacks[watchId];\n        if (callback) {\n          callback(location);\n        } else {\n          ExpoLocation.removeWatchAsync(watchId);\n        }\n      }\n    );\n  }\n}\n\nexport async function geocodeAsync(address: string): Promise<Array<GeocodedLocation>> {\n  return ExpoLocation.geocodeAsync(address).catch(error => {\n    const platformUsesGoogleMaps = Platform.OS === 'android' || Platform.OS === 'web';\n\n    if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n      if (!googleApiKey) {\n        throw new CodedError(\n          error.code,\n          `${error.message} Please set a Google API Key to use geocoding.`\n        );\n      }\n      return _googleGeocodeAsync(address);\n    }\n    throw error;\n  });\n}\n\nexport async function reverseGeocodeAsync(location: {\n  latitude: number;\n  longitude: number;\n}): Promise<Address[]> {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError(\n      'Location should be an object with number properties `latitude` and `longitude`.'\n    );\n  }\n  return ExpoLocation.reverseGeocodeAsync(location).catch(error => {\n    const platformUsesGoogleMaps = Platform.OS === 'android' || Platform.OS === 'web';\n\n    if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n      if (!googleApiKey) {\n        throw new CodedError(\n          error.code,\n          `${error.message} Please set a Google API Key to use geocoding.`\n        );\n      }\n      return _googleReverseGeocodeAsync(location);\n    }\n    throw error;\n  });\n}\n\nexport function setApiKey(apiKey: string) {\n  googleApiKey = apiKey;\n}\n\nasync function _googleGeocodeAsync(address: string): Promise<GeocodedLocation[]> {\n  const result = await fetch(`${googleApiUrl}?key=${googleApiKey}&address=${encodeURI(address)}`);\n  const resultObject = await result.json();\n\n  if (resultObject.status === 'ZERO_RESULTS') {\n    return [];\n  }\n\n  assertGeocodeResults(resultObject);\n\n  return resultObject.results.map(result => {\n    let location = result.geometry.location;\n    // TODO: This is missing a lot of props\n    return {\n      latitude: location.lat,\n      longitude: location.lng,\n    };\n  });\n}\n\nasync function _googleReverseGeocodeAsync(options: {\n  latitude: number;\n  longitude: number;\n}): Promise<Address[]> {\n  const result = await fetch(\n    `${googleApiUrl}?key=${googleApiKey}&latlng=${options.latitude},${options.longitude}`\n  );\n  const resultObject = await result.json();\n\n  if (resultObject.status === 'ZERO_RESULTS') {\n    return [];\n  }\n\n  assertGeocodeResults(resultObject);\n\n  return resultObject.results.map(result => {\n    const address: any = {};\n\n    result.address_components.forEach(component => {\n      if (component.types.includes('locality')) {\n        address.city = component.long_name;\n      } else if (component.types.includes('street_address')) {\n        address.street = component.long_name;\n      } else if (component.types.includes('administrative_area_level_1')) {\n        address.region = component.long_name;\n      } else if (component.types.includes('country')) {\n        address.country = component.long_name;\n      } else if (component.types.includes('postal_code')) {\n        address.postalCode = component.long_name;\n      } else if (component.types.includes('point_of_interest')) {\n        address.name = component.long_name;\n      }\n    });\n    return address as Address;\n  });\n}\n\n// https://developers.google.com/maps/documentation/geocoding/intro\nfunction assertGeocodeResults(resultObject: any): void {\n  const { status, error_message } = resultObject;\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(\n        status,\n        'the request could not be processed due to a server error. The request may succeed if you try again.'\n      );\n    }\n    throw new CodedError(status, `An error occurred during geocoding.`);\n  }\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback,\n  options: LocationOptions\n) {\n  _maybeInitializeEmitterSubscription();\n\n  const watchId = _getNextWatchId();\n  watchCallbacks[watchId] = success;\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(err => {\n    _removeWatcher(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\nexport async function watchPositionAsync(options: LocationOptions, callback: LocationCallback) {\n  _maybeInitializeEmitterSubscription();\n\n  const watchId = _getNextWatchId();\n  watchCallbacks[watchId] = callback;\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n\n  return {\n    remove() {\n      _removeWatcher(watchId);\n    },\n  };\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  _removeWatcher(watchId);\n}\n\nfunction _removeWatcher(watchId) {\n  // Do nothing if we have already removed the subscription\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n\n  ExpoLocation.removeWatchAsync(watchId);\n  delete watchCallbacks[watchId];\n  if (Object.keys(watchCallbacks).length === 0 && deviceEventSubscription) {\n    LocationEventEmitter.removeSubscription(deviceEventSubscription);\n    deviceEventSubscription = null;\n  }\n}\n\ntype GeoSuccessCallback = (data: LocationData) => void;\ntype GeoErrorCallback = (error: any) => void;\n\nfunction getCurrentPosition(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback = () => {},\n  options: LocationOptions = {}\n): void {\n  invariant(typeof success === 'function', 'Must provide a valid success callback.');\n\n  invariant(typeof options === 'object', 'options must be an object.');\n\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback,\n  options: LocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await getCurrentPositionAsync(options);\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.requestPermissionsAsync();\n}\n\n// --- Location service\n\nexport async function hasServicesEnabledAsync(): Promise<boolean> {\n  return await ExpoLocation.hasServicesEnabledAsync();\n}\n\n// --- Background location updates\n\nfunction _validateTaskName(taskName: string) {\n  invariant(taskName && typeof taskName === 'string', '`taskName` must be a non-empty string.');\n}\n\nexport async function isBackgroundLocationAvailableAsync(): Promise<boolean> {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\n\nexport async function startLocationUpdatesAsync(\n  taskName: string,\n  options: LocationTaskOptions = { accuracy: LocationAccuracy.Balanced }\n): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\n\nexport async function stopLocationUpdatesAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\n\nexport async function hasStartedLocationUpdatesAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n}\n\n// --- Geofencing\n\nfunction _validateRegions(regions: Array<Region>) {\n  if (!regions || regions.length === 0) {\n    throw new Error(\n      'Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions'\n    );\n  }\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(\n        `Region's longitude must be a number. Got '${region.longitude}' instead.`\n      );\n    }\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\n\nexport async function startGeofencingAsync(\n  taskName: string,\n  regions: Array<Region> = []\n): Promise<void> {\n  _validateTaskName(taskName);\n  _validateRegions(regions);\n  await ExpoLocation.startGeofencingAsync(taskName, { regions });\n}\n\nexport async function stopGeofencingAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\n\nexport async function hasStartedGeofencingAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}\n\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Polyfill navigator.geolocation for interop with the core react-native and web API approach to\n    // geolocation\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nexport {\n  // For internal purposes\n  LocationEventEmitter as EventEmitter,\n  _getCurrentWatchId,\n};\n"],"sourceRoot":""}