{"version":3,"sources":["CardStack.tsx"],"names":["maybeExpoVersion","global","isInsufficientExpoVersion","Number","EPSILON","FAR_FAR_AWAY","dimensions","Dimensions","layout","width","height","MaybeScreenContainer","style","rest","enabled","Platform","overflow","MaybeScreen","top","transform","translateY","inputRange","outputRange","FALLBACK_DESCRIPTOR","options","getHeaderHeights","descriptors","curr","previous","StyleSheet","safeAreaInsets","headerStatusBarHeight","acc","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getProgressFromGesture","distance","React","props","state","gestures","descriptor","animationEnabled","Animated","routes","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","undefined","__memo","headerHeights","e","previousHeight","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerMode","headerStyleInterpolator","forNoAnimationHeader","insets","right","bottom","left","isScreensEnabled","styles","handleLayout","focused","gesture","isScreenActive","extrapolate","transitionSpec","cardStyleInterpolator","forNoAnimationCard","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","getPreviousRoute","previousScene","j","s","closingRouteKeys","getGesturesEnabled","gestureVelocityImpact","renderHeader","getFocusedRoute","onContentHeightChange","styleInterpolator","floating","container","flex","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n  ViewProps,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer, Screen, screensEnabled } from 'react-native-screens'; // Import with * as to prevent getters being called\nimport { Route, StackNavigationState } from '@react-navigation/native';\n\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\n// @ts-ignore\nconst maybeExpoVersion = global.Expo?.Constants.manifest.sdkVersion.split(\n  '.'\n)[0];\nconst isInsufficientExpoVersion = maybeExpoVersion\n  ? Number(maybeExpoVersion) <= 36\n  : maybeExpoVersion === 'UNVERSIONED';\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\nconst FAR_FAR_AWAY = 9000;\n\nconst dimensions = Dimensions.get('window');\nconst layout = { width: dimensions.width, height: dimensions.height };\n\nconst MaybeScreenContainer = ({\n  enabled,\n  style,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && screensEnabled()) {\n    return <ScreenContainer style={style} {...rest} />;\n  }\n\n  return (\n    <View\n      collapsable={!enabled}\n      removeClippedSubviews={Platform.OS !== 'ios' && enabled}\n      style={[style, { overflow: 'hidden' }]}\n      {...rest}\n    />\n  );\n};\n\nconst MaybeScreen = ({\n  enabled,\n  active,\n  style,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: number | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && screensEnabled()) {\n    // @ts-ignore\n    return <Screen active={active} style={style} {...rest} />;\n  }\n\n  return (\n    <Animated.View\n      style={[\n        style,\n        {\n          overflow: 'hidden',\n          // Position the screen offscreen to take advantage of offscreen perf optimization\n          // https://facebook.github.io/react-native/docs/view#removeclippedsubviews\n          // This can be useful if screens is not enabled\n          // It's buggy on iOS, so we don't enable it there\n          top:\n            enabled && typeof active === 'number' && !active ? FAR_FAR_AWAY : 0,\n          transform: [\n            {\n              // If the `active` prop is animated node, we can't use the `left` property due to native driver\n              // So we use `translateY` instead\n              translateY:\n                enabled && typeof active !== 'number'\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [FAR_FAR_AWAY, 0],\n                    })\n                  : 0,\n            },\n          ],\n        },\n      ]}\n      {...rest}\n    />\n  );\n};\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const { height = previous[curr.key] } = StyleSheet.flatten(\n      options.headerStyle || {}\n    );\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(mode, layout, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  state: State = {\n    routes: [],\n    scenes: [],\n    gestures: {},\n    layout,\n    descriptors: this.props.descriptors,\n    // Used when card's header is null and mode is float to make transition\n    // between screens with headers and those without headers smooth.\n    // This is not a great heuristic here. We don't know synchronously\n    // on mount what the header height is so we have just used the most\n    // common cases here.\n    headerHeights: {},\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          {}\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS, so we don't enable it there\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled =\n      Platform.OS !== 'ios' &&\n      (isInsufficientExpoVersion ? mode !== 'modal' : true);\n\n    return (\n      <React.Fragment>\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // Display current screen and a screen beneath.\n            let isScreenActive: Animated.AnimatedInterpolation | 0 | 1 =\n              index >= self.length - 2 ? 1 : 0;\n\n            if (isInsufficientExpoVersion) {\n              isScreenActive =\n                index === self.length - 1\n                  ? 1\n                  : Platform.OS === 'android'\n                  ? scene.progress.next\n                    ? scene.progress.next.interpolate({\n                        inputRange: [0, 1 - EPSILON, 1],\n                        outputRange: [1, 1, 0],\n                        extrapolate: 'clamp',\n                      })\n                    : 1\n                  : index === self.length - 2\n                  ? 1\n                  : 0;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const previousRoute = getPreviousRoute({ route: scene.route });\n\n            let previousScene = scenes[index - 1];\n\n            if (previousRoute) {\n              // The previous scene will be shortly before the current scene in the array\n              // So loop back from current index to avoid looping over the full array\n              for (let j = index - 1; j >= 0; j--) {\n                const s = scenes[j];\n\n                if (s && s.route.key === previousRoute.key) {\n                  previousScene = s;\n                  break;\n                }\n              }\n            }\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  previousScene={previousScene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeights[route.key]}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousRoute={getPreviousRoute}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerTransparent={headerTransparent}\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {headerMode === 'float'\n          ? renderHeader({\n              mode: 'float',\n              layout,\n              insets: { top, right, bottom, left },\n              scenes,\n              getPreviousRoute,\n              getFocusedRoute: this.getFocusedRoute,\n              onContentHeightChange: this.handleHeaderLayout,\n              gestureDirection:\n                focusedOptions.gestureDirection !== undefined\n                  ? focusedOptions.gestureDirection\n                  : defaultTransitionPreset.gestureDirection,\n              styleInterpolator:\n                focusedOptions.headerStyleInterpolator !== undefined\n                  ? focusedOptions.headerStyleInterpolator\n                  : defaultTransitionPreset.headerStyleInterpolator,\n              style: styles.floating,\n            })\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}