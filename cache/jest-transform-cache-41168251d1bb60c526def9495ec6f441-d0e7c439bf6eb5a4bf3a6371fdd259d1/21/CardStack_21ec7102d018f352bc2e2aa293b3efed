5bea25f15ef3a18bac717c58704da56d
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty3 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeScreens = require("react-native-screens");

var _HeaderSegment = require("../Header/HeaderSegment");

var _CardContainer = _interopRequireDefault(require("./CardContainer"));

var _TransitionPresets = require("../../TransitionConfigs/TransitionPresets");

var _HeaderStyleInterpolators = require("../../TransitionConfigs/HeaderStyleInterpolators");

var _CardStyleInterpolators = require("../../TransitionConfigs/CardStyleInterpolators");

var _getDistanceForDirection = _interopRequireDefault(require("../../utils/getDistanceForDirection"));

var _global$Expo;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var maybeExpoVersion = (_global$Expo = global.Expo) === null || _global$Expo === void 0 ? void 0 : _global$Expo.Constants.manifest.sdkVersion.split('.')[0];
var isInsufficientExpoVersion = maybeExpoVersion ? Number(maybeExpoVersion) <= 36 : maybeExpoVersion === 'UNVERSIONED';
var EPSILON = 0.01;
var FAR_FAR_AWAY = 9000;

var dimensions = _reactNative.Dimensions.get('window');

var layout = {
  width: dimensions.width,
  height: dimensions.height
};

var MaybeScreenContainer = function MaybeScreenContainer(_ref) {
  var enabled = _ref.enabled,
      style = _ref.style,
      rest = _objectWithoutProperties(_ref, ["enabled", "style"]);

  if (enabled && (0, _reactNativeScreens.screensEnabled)()) {
    return React.createElement(_reactNativeScreens.ScreenContainer, _extends({
      style: style
    }, rest));
  }

  return React.createElement(_reactNative.View, _extends({
    collapsable: !enabled,
    removeClippedSubviews: _reactNative.Platform.OS !== 'ios' && enabled,
    style: [style, {
      overflow: 'hidden'
    }]
  }, rest));
};

var MaybeScreen = function MaybeScreen(_ref2) {
  var enabled = _ref2.enabled,
      active = _ref2.active,
      style = _ref2.style,
      rest = _objectWithoutProperties(_ref2, ["enabled", "active", "style"]);

  if (enabled && (0, _reactNativeScreens.screensEnabled)()) {
    return React.createElement(_reactNativeScreens.Screen, _extends({
      active: active,
      style: style
    }, rest));
  }

  return React.createElement(_reactNative.Animated.View, _extends({
    style: [style, {
      overflow: 'hidden',
      top: enabled && typeof active === 'number' && !active ? FAR_FAR_AWAY : 0,
      transform: [{
        translateY: enabled && typeof active !== 'number' ? active.interpolate({
          inputRange: [0, 1],
          outputRange: [FAR_FAR_AWAY, 0]
        }) : 0
      }]
    }]
  }, rest));
};

var FALLBACK_DESCRIPTOR = Object.freeze({
  options: {}
});

var getHeaderHeights = function getHeaderHeights(routes, insets, descriptors, layout, previous) {
  return routes.reduce(function (acc, curr) {
    var _ref5 = descriptors[curr.key] || {},
        _ref5$options = _ref5.options,
        options = _ref5$options === void 0 ? {} : _ref5$options;

    var _reactNative$StyleShe = _reactNative.StyleSheet.flatten(options.headerStyle || {}),
        _reactNative$StyleShe2 = _reactNative$StyleShe.height,
        height = _reactNative$StyleShe2 === void 0 ? previous[curr.key] : _reactNative$StyleShe2;

    var safeAreaInsets = _objectSpread({}, insets, {}, options.safeAreaInsets);

    var _options$headerStatus = options.headerStatusBarHeight,
        headerStatusBarHeight = _options$headerStatus === void 0 ? safeAreaInsets.top : _options$headerStatus;
    acc[curr.key] = typeof height === 'number' ? height : (0, _HeaderSegment.getDefaultHeaderHeight)(layout, headerStatusBarHeight);
    return acc;
  }, {});
};

var getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {
  var _ref6 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},
      _ref6$gestureDirectio = _ref6.gestureDirection,
      gestureDirection = _ref6$gestureDirectio === void 0 ? mode === 'modal' ? _TransitionPresets.ModalTransition.gestureDirection : _TransitionPresets.DefaultTransition.gestureDirection : _ref6$gestureDirectio;

  return (0, _getDistanceForDirection.default)(layout, gestureDirection);
};

var getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {
  var distance = getDistanceFromOptions(mode, layout, descriptor);

  if (distance > 0) {
    return gesture.interpolate({
      inputRange: [0, distance],
      outputRange: [1, 0]
    });
  }

  return gesture.interpolate({
    inputRange: [distance, 0],
    outputRange: [0, 1]
  });
};

var CardStack = function (_React$Component) {
  (0, _inherits2.default)(CardStack, _React$Component);

  function CardStack() {
    var _this;

    (0, _classCallCheck2.default)(this, CardStack);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CardStack).apply(this, arguments));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "state", {
      routes: [],
      scenes: [],
      gestures: {},
      layout: layout,
      descriptors: _this.props.descriptors,
      headerHeights: {}
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleLayout", function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          height = _e$nativeEvent$layout.height,
          width = _e$nativeEvent$layout.width;
      var layout = {
        width: width,
        height: height
      };

      _this.setState(function (state, props) {
        if (height === state.layout.height && width === state.layout.width) {
          return null;
        }

        return {
          layout: layout,
          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, {})
        };
      });
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleHeaderLayout", function (_ref3) {
      var route = _ref3.route,
          height = _ref3.height;

      _this.setState(function (_ref4) {
        var headerHeights = _ref4.headerHeights;
        var previousHeight = headerHeights[route.key];

        if (previousHeight === height) {
          return null;
        }

        return {
          headerHeights: _objectSpread({}, headerHeights, (0, _defineProperty3.default)({}, route.key, height))
        };
      });
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "getFocusedRoute", function () {
      var state = _this.props.state;
      return state.routes[state.index];
    });

    return _this;
  }

  (0, _createClass2.default)(CardStack, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          mode = _this$props.mode,
          insets = _this$props.insets,
          descriptors = _this$props.descriptors,
          state = _this$props.state,
          routes = _this$props.routes,
          closingRouteKeys = _this$props.closingRouteKeys,
          onOpenRoute = _this$props.onOpenRoute,
          onCloseRoute = _this$props.onCloseRoute,
          getPreviousRoute = _this$props.getPreviousRoute,
          getGesturesEnabled = _this$props.getGesturesEnabled,
          renderHeader = _this$props.renderHeader,
          renderScene = _this$props.renderScene,
          headerMode = _this$props.headerMode,
          onTransitionStart = _this$props.onTransitionStart,
          onTransitionEnd = _this$props.onTransitionEnd,
          onPageChangeStart = _this$props.onPageChangeStart,
          onPageChangeConfirm = _this$props.onPageChangeConfirm,
          onPageChangeCancel = _this$props.onPageChangeCancel;
      var _this$state = this.state,
          scenes = _this$state.scenes,
          layout = _this$state.layout,
          gestures = _this$state.gestures,
          headerHeights = _this$state.headerHeights;
      var focusedRoute = state.routes[state.index];
      var focusedDescriptor = descriptors[focusedRoute.key];
      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};
      var defaultTransitionPreset = mode === 'modal' ? _TransitionPresets.ModalTransition : _TransitionPresets.DefaultTransition;

      if (headerMode === 'screen') {
        defaultTransitionPreset = _objectSpread({}, defaultTransitionPreset, {
          headerStyleInterpolator: _HeaderStyleInterpolators.forNoAnimation
        });
      }

      var _ref7 = focusedOptions.safeAreaInsets || {},
          _ref7$top = _ref7.top,
          top = _ref7$top === void 0 ? insets.top : _ref7$top,
          _ref7$right = _ref7.right,
          right = _ref7$right === void 0 ? insets.right : _ref7$right,
          _ref7$bottom = _ref7.bottom,
          bottom = _ref7$bottom === void 0 ? insets.bottom : _ref7$bottom,
          _ref7$left = _ref7.left,
          left = _ref7$left === void 0 ? insets.left : _ref7$left;

      var isScreensEnabled = _reactNative.Platform.OS !== 'ios' && (isInsufficientExpoVersion ? mode !== 'modal' : true);
      return React.createElement(React.Fragment, null, React.createElement(MaybeScreenContainer, {
        enabled: isScreensEnabled,
        style: styles.container,
        onLayout: this.handleLayout
      }, routes.map(function (route, index, self) {
        var focused = focusedRoute.key === route.key;
        var gesture = gestures[route.key];
        var scene = scenes[index];
        var isScreenActive = index >= self.length - 2 ? 1 : 0;

        if (isInsufficientExpoVersion) {
          isScreenActive = index === self.length - 1 ? 1 : _reactNative.Platform.OS === 'android' ? scene.progress.next ? scene.progress.next.interpolate({
            inputRange: [0, 1 - EPSILON, 1],
            outputRange: [1, 1, 0],
            extrapolate: 'clamp'
          }) : 1 : index === self.length - 2 ? 1 : 0;
        }

        var _ref8 = scene.descriptor ? scene.descriptor.options : {},
            safeAreaInsets = _ref8.safeAreaInsets,
            headerShown = _ref8.headerShown,
            headerTransparent = _ref8.headerTransparent,
            cardShadowEnabled = _ref8.cardShadowEnabled,
            cardOverlayEnabled = _ref8.cardOverlayEnabled,
            cardStyle = _ref8.cardStyle,
            animationEnabled = _ref8.animationEnabled,
            gestureResponseDistance = _ref8.gestureResponseDistance,
            gestureVelocityImpact = _ref8.gestureVelocityImpact,
            _ref8$gestureDirectio = _ref8.gestureDirection,
            gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,
            _ref8$transitionSpec = _ref8.transitionSpec,
            transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,
            _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,
            cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,
            _ref8$headerStyleInte = _ref8.headerStyleInterpolator,
            headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;

        var transitionConfig = {
          gestureDirection: gestureDirection,
          transitionSpec: transitionSpec,
          cardStyleInterpolator: cardStyleInterpolator,
          headerStyleInterpolator: headerStyleInterpolator
        };

        if (index !== self.length - 1) {
          var nextScene = scenes[index + 1];

          if (nextScene) {
            var _ref9 = nextScene.descriptor ? nextScene.descriptor.options : {},
                _animationEnabled = _ref9.animationEnabled,
                _ref9$gestureDirectio = _ref9.gestureDirection,
                _gestureDirection = _ref9$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref9$gestureDirectio,
                _ref9$transitionSpec = _ref9.transitionSpec,
                _transitionSpec = _ref9$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref9$transitionSpec,
                _ref9$cardStyleInterp = _ref9.cardStyleInterpolator,
                _cardStyleInterpolator = _ref9$cardStyleInterp === void 0 ? _animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _ref9$cardStyleInterp,
                _ref9$headerStyleInte = _ref9.headerStyleInterpolator,
                _headerStyleInterpolator = _ref9$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref9$headerStyleInte;

            transitionConfig = {
              gestureDirection: _gestureDirection,
              transitionSpec: _transitionSpec,
              cardStyleInterpolator: _cardStyleInterpolator,
              headerStyleInterpolator: _headerStyleInterpolator
            };
          }
        }

        var _ref10 = safeAreaInsets || {},
            _ref10$top = _ref10.top,
            safeAreaInsetTop = _ref10$top === void 0 ? insets.top : _ref10$top,
            _ref10$right = _ref10.right,
            safeAreaInsetRight = _ref10$right === void 0 ? insets.right : _ref10$right,
            _ref10$bottom = _ref10.bottom,
            safeAreaInsetBottom = _ref10$bottom === void 0 ? insets.bottom : _ref10$bottom,
            _ref10$left = _ref10.left,
            safeAreaInsetLeft = _ref10$left === void 0 ? insets.left : _ref10$left;

        var previousRoute = getPreviousRoute({
          route: scene.route
        });
        var previousScene = scenes[index - 1];

        if (previousRoute) {
          for (var j = index - 1; j >= 0; j--) {
            var s = scenes[j];

            if (s && s.route.key === previousRoute.key) {
              previousScene = s;
              break;
            }
          }
        }

        return React.createElement(MaybeScreen, {
          key: route.key,
          style: _reactNative.StyleSheet.absoluteFill,
          enabled: isScreensEnabled,
          active: isScreenActive,
          pointerEvents: "box-none"
        }, React.createElement(_CardContainer.default, _extends({
          index: index,
          active: index === self.length - 1,
          focused: focused,
          closing: closingRouteKeys.includes(route.key),
          layout: layout,
          gesture: gesture,
          scene: scene,
          previousScene: previousScene,
          safeAreaInsetTop: safeAreaInsetTop,
          safeAreaInsetRight: safeAreaInsetRight,
          safeAreaInsetBottom: safeAreaInsetBottom,
          safeAreaInsetLeft: safeAreaInsetLeft,
          cardOverlayEnabled: cardOverlayEnabled,
          cardShadowEnabled: cardShadowEnabled,
          cardStyle: cardStyle,
          onPageChangeStart: onPageChangeStart,
          onPageChangeConfirm: onPageChangeConfirm,
          onPageChangeCancel: onPageChangeCancel,
          gestureResponseDistance: gestureResponseDistance,
          headerHeight: headerHeights[route.key],
          onHeaderHeightChange: _this2.handleHeaderLayout,
          getPreviousRoute: getPreviousRoute,
          getFocusedRoute: _this2.getFocusedRoute,
          headerMode: headerMode,
          headerShown: headerShown,
          headerTransparent: headerTransparent,
          renderHeader: renderHeader,
          renderScene: renderScene,
          onOpenRoute: onOpenRoute,
          onCloseRoute: onCloseRoute,
          onTransitionStart: onTransitionStart,
          onTransitionEnd: onTransitionEnd,
          gestureEnabled: index !== 0 && getGesturesEnabled({
            route: route
          }),
          gestureVelocityImpact: gestureVelocityImpact
        }, transitionConfig)));
      })), headerMode === 'float' ? renderHeader({
        mode: 'float',
        layout: layout,
        insets: {
          top: top,
          right: right,
          bottom: bottom,
          left: left
        },
        scenes: scenes,
        getPreviousRoute: getPreviousRoute,
        getFocusedRoute: this.getFocusedRoute,
        onContentHeightChange: this.handleHeaderLayout,
        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,
        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,
        style: styles.floating
      }) : null);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.routes === state.routes && props.descriptors === state.descriptors) {
        return null;
      }

      var gestures = props.routes.reduce(function (acc, curr) {
        var descriptor = props.descriptors[curr.key];

        var _ref11 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},
            animationEnabled = _ref11.animationEnabled;

        acc[curr.key] = state.gestures[curr.key] || new _reactNative.Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);
        return acc;
      }, {});
      return {
        routes: props.routes,
        scenes: props.routes.map(function (route, index, self) {
          var previousRoute = self[index - 1];
          var nextRoute = self[index + 1];
          var oldScene = state.scenes[index];
          var currentGesture = gestures[route.key];
          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;
          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;
          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);
          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];
          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];
          var scene = {
            route: route,
            descriptor: descriptor,
            progress: {
              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),
              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,
              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined
            },
            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]
          };

          if (oldScene && scene.__memo.every(function (it, i) {
            return oldScene.__memo[i] === it;
          })) {
            return oldScene;
          }

          return scene;
        }),
        gestures: gestures,
        descriptors: props.descriptors,
        headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)
      };
    }
  }]);
  return CardStack;
}(React.Component);

exports.default = CardStack;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden'
  },
  floating: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,