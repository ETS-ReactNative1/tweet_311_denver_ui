a9325ab6804571434d6fa4495aae7dfb
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  test: function test(value) {
    return value && value instanceof Object && value.hasOwnProperty('tag') && value.hasOwnProperty('key') && value.hasOwnProperty('type');
  },
  serialize: function serialize(node, config, indentation, depth, refs, printer) {
    return (config.min ? '' : 'FiberNode ') + "{" + _printProperties(node, ['tag', 'key', 'type'], config, indentation, depth, refs, printer) + "}";
  }
};
exports.default = _default;

function _printProperties(object, keys, config, indentation, depth, refs, printer) {
  var result = config.spacingOuter;
  var propertyIndentation = indentation + config.indent;

  for (var ii = 0; ii < keys.length; ii++) {
    var key = keys[ii];
    var name = printer(key, config, propertyIndentation, depth, refs);
    var value = printer(object[key], config, propertyIndentation, depth, refs);
    result += "" + propertyIndentation + name + ": " + value;

    if (ii < keys.length - 1) {
      result += ',' + config.spacingInner;
    } else if (!config.min) {
      result += ',';
    }
  }

  result += config.spacingOuter + indentation;
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2dzL2Zvcm1hdC9SZWFjdE5vZGVGb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztlQUllO0FBQ2IsRUFBQSxJQURhLGdCQUNSLEtBRFEsRUFDRTtBQUNiLFdBQ0UsS0FBSyxJQUNMLEtBQUssWUFBWSxNQURqQixJQUVBLEtBQUssQ0FBQyxjQUFOLENBQXFCLEtBQXJCLENBRkEsSUFHQSxLQUFLLENBQUMsY0FBTixDQUFxQixLQUFyQixDQUhBLElBSUEsS0FBSyxDQUFDLGNBQU4sQ0FBcUIsTUFBckIsQ0FMRjtBQU9ELEdBVFk7QUFXYixFQUFBLFNBWGEscUJBV0gsSUFYRyxFQVdHLE1BWEgsRUFXVyxXQVhYLEVBV3dCLEtBWHhCLEVBVytCLElBWC9CLEVBV3FDLE9BWHJDLEVBVzRDO0FBQ3ZELFlBQVUsTUFBTSxDQUFDLEdBQVAsR0FBYSxFQUFiLEdBQWtCLFlBQTVCLFVBQTRDLGdCQUFnQixDQUMxRCxJQUQwRCxFQUUxRCxDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsTUFBZixDQUYwRCxFQUcxRCxNQUgwRCxFQUkxRCxXQUowRCxFQUsxRCxLQUwwRCxFQU0xRCxJQU4wRCxFQU8xRCxPQVAwRCxDQUE1RDtBQVNEO0FBckJZLEM7OztBQXdCZixTQUFTLGdCQUFULENBQTBCLE1BQTFCLEVBQWtDLElBQWxDLEVBQXdDLE1BQXhDLEVBQWdELFdBQWhELEVBQTZELEtBQTdELEVBQW9FLElBQXBFLEVBQTBFLE9BQTFFLEVBQWlGO0FBQy9FLE1BQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFwQjtBQUNBLE1BQUksbUJBQW1CLEdBQUcsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUEvQzs7QUFFQSxPQUFLLElBQUksRUFBRSxHQUFHLENBQWQsRUFBaUIsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUEzQixFQUFtQyxFQUFFLEVBQXJDLEVBQXlDO0FBQ3ZDLFFBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFELENBQWQ7QUFDQSxRQUFJLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRCxFQUFNLE1BQU4sRUFBYyxtQkFBZCxFQUFtQyxLQUFuQyxFQUEwQyxJQUExQyxDQUFsQjtBQUNBLFFBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRCxDQUFQLEVBQWMsTUFBZCxFQUFzQixtQkFBdEIsRUFBMkMsS0FBM0MsRUFBa0QsSUFBbEQsQ0FBbkI7QUFFQSxJQUFBLE1BQU0sU0FBTyxtQkFBUCxHQUE2QixJQUE3QixVQUFzQyxLQUE1Qzs7QUFFQSxRQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTCxHQUFjLENBQXZCLEVBQTBCO0FBQ3hCLE1BQUEsTUFBTSxJQUFJLE1BQU0sTUFBTSxDQUFDLFlBQXZCO0FBQ0QsS0FGRCxNQUVPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixFQUFpQjtBQUN0QixNQUFBLE1BQU0sSUFBSSxHQUFWO0FBQ0Q7QUFDRjs7QUFFRCxFQUFBLE1BQU0sSUFBSSxNQUFNLENBQUMsWUFBUCxHQUFzQixXQUFoQztBQUNBLFNBQU8sTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHByZXR0eS1mb3JtYXQgcGx1Z2luIGZvciBSZWFjdCdzIEZpYmVyTm9kZSBvYmplY3RzLCB3aGljaCBhcmUgdmVyeSBsYXJnZSB0cmVlcyB0aGF0IGFyZSB0b29cbiAqIGxhcmdlIGFuZCB2ZXJib3NlIHRvIHByaW50LlxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRlc3QodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICB2YWx1ZSAmJlxuICAgICAgdmFsdWUgaW5zdGFuY2VvZiBPYmplY3QgJiZcbiAgICAgIHZhbHVlLmhhc093blByb3BlcnR5KCd0YWcnKSAmJlxuICAgICAgdmFsdWUuaGFzT3duUHJvcGVydHkoJ2tleScpICYmXG4gICAgICB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgndHlwZScpXG4gICAgKTtcbiAgfSxcblxuICBzZXJpYWxpemUobm9kZSwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMsIHByaW50ZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHtjb25maWcubWluID8gJycgOiAnRmliZXJOb2RlICd9eyR7X3ByaW50UHJvcGVydGllcyhcbiAgICAgIG5vZGUsXG4gICAgICBbJ3RhZycsICdrZXknLCAndHlwZSddLFxuICAgICAgY29uZmlnLFxuICAgICAgaW5kZW50YXRpb24sXG4gICAgICBkZXB0aCxcbiAgICAgIHJlZnMsXG4gICAgICBwcmludGVyXG4gICAgKX19YDtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIF9wcmludFByb3BlcnRpZXMob2JqZWN0LCBrZXlzLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikge1xuICBsZXQgcmVzdWx0ID0gY29uZmlnLnNwYWNpbmdPdXRlcjtcbiAgbGV0IHByb3BlcnR5SW5kZW50YXRpb24gPSBpbmRlbnRhdGlvbiArIGNvbmZpZy5pbmRlbnQ7XG5cbiAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGtleXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgbGV0IGtleSA9IGtleXNbaWldO1xuICAgIGxldCBuYW1lID0gcHJpbnRlcihrZXksIGNvbmZpZywgcHJvcGVydHlJbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMpO1xuICAgIGxldCB2YWx1ZSA9IHByaW50ZXIob2JqZWN0W2tleV0sIGNvbmZpZywgcHJvcGVydHlJbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMpO1xuXG4gICAgcmVzdWx0ICs9IGAke3Byb3BlcnR5SW5kZW50YXRpb259JHtuYW1lfTogJHt2YWx1ZX1gO1xuXG4gICAgaWYgKGlpIDwga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXN1bHQgKz0gJywnICsgY29uZmlnLnNwYWNpbmdJbm5lcjtcbiAgICB9IGVsc2UgaWYgKCFjb25maWcubWluKSB7XG4gICAgICByZXN1bHQgKz0gJywnO1xuICAgIH1cbiAgfVxuXG4gIHJlc3VsdCArPSBjb25maWcuc3BhY2luZ091dGVyICsgaW5kZW50YXRpb247XG4gIHJldHVybiByZXN1bHQ7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9