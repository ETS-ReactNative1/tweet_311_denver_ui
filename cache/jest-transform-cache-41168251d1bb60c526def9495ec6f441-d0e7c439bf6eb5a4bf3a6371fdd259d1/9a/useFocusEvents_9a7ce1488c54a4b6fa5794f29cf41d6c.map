{"version":3,"sources":["useFocusEvents.tsx"],"names":["emitter","navigation","React","NavigationContext","lastFocusedKeyRef","currentFocusedKey","state","type","target","lastFocusedKey"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,uBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWe,SAAA,cAAA,CAAA,IAAA,EAAqD;AAAA,MAA7B,KAA6B,GAAA,IAAA,CAA7B,KAA6B;AAAA,MAApBA,OAAoB,GAAA,IAAA,CAApBA,OAAoB;AAClE,MAAMC,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAiBC,kBAAAA,CAApC,OAAmBD,CAAnB;AACA,MAAME,iBAAiB,GAAGF,KAAK,CAA/B,MAA0BA,EAA1B;AAEA,MAAMG,iBAAiB,GAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAJwC,GAIlE;AAIAJ,EAAAA,KAAK,CAALA,SAAAA,CACE;AAAA,WACE,UADF,KAAA,IACE,IAAA,UADF,KAAA,KAAA,CACE,GADF,KAAA,CACE,GAAA,UAAU,CAAV,WAAA,CAAA,OAAA,EAAiC;AAAA,aAC/B,OAAO,CAAP,IAAA,CAAa;AAAEK,QAAAA,IAAI,EAAN,OAAA;AAAiBC,QAAAA,MAAM,EAAEH;AAAzB,OAAb,CAD+B;AAAA,KAAjC,CADF;AAAA,GADFH,EAKE,CAAA,iBAAA,EAAA,OAAA,EALFA,UAKE,CALFA;AAQAA,EAAAA,KAAK,CAALA,SAAAA,CACE;AAAA,WACE,UADF,KAAA,IACE,IAAA,UADF,KAAA,KAAA,CACE,GADF,KAAA,CACE,GAAA,UAAU,CAAV,WAAA,CAAA,MAAA,EAAgC;AAAA,aAC9B,OAAO,CAAP,IAAA,CAAa;AAAEK,QAAAA,IAAI,EAAN,MAAA;AAAgBC,QAAAA,MAAM,EAAEH;AAAxB,OAAb,CAD8B;AAAA,KAAhC,CADF;AAAA,GADFH,EAKE,CAAA,iBAAA,EAAA,OAAA,EALFA,UAKE,CALFA;AAQAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMO,cAAc,GAAGL,iBAAiB,CAAxC,OAAA;AAEAA,IAAAA,iBAAiB,CAAjBA,OAAAA,GAHoB,iBAGpBA;;AAIA,QAAIK,cAAc,KAAdA,SAAAA,IAAgC,CAApC,UAAA,EAAiD;AAC/CT,MAAAA,OAAO,CAAPA,IAAAA,CAAa;AAAEO,QAAAA,IAAI,EAAN,OAAA;AAAiBC,QAAAA,MAAM,EAAEH;AAAzB,OAAbL;AARkB;;AAapB,QACES,cAAc,KAAdA,iBAAAA,IACA,EAAER,UAAU,GAAGA,UAAU,CAAb,SAAGA,EAAH,GAFd,IAEE,CAFF,EAGE;AACA;AACD;;AAED,QAAIQ,cAAc,KAAlB,SAAA,EAAkC;AAEhC;AACD;;AAEDT,IAAAA,OAAO,CAAPA,IAAAA,CAAa;AACXO,MAAAA,IAAI,EADO,OAAA;AAEXC,MAAAA,MAAM,EAAEH;AAFG,KAAbL;AAKAA,IAAAA,OAAO,CAAPA,IAAAA,CAAa;AACXO,MAAAA,IAAI,EADO,MAAA;AAEXC,MAAAA,MAAM,EAAEC;AAFG,KAAbT;AA9BFE,GAAAA,EAkCG,CAAA,iBAAA,EAAA,OAAA,EAlCHA,UAkCG,CAlCHA;AAmCD","sourcesContent":["import * as React from 'react';\nimport { NavigationState } from '@react-navigation/routers';\nimport NavigationContext from './NavigationContext';\nimport { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options = {\n  state: NavigationState;\n  emitter: NavigationEventEmitter;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents({ state, emitter }: Options) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () =>\n        emitter.emit({ type: 'focus', target: currentFocusedKey })\n      ),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () =>\n        emitter.emit({ type: 'blur', target: currentFocusedKey })\n      ),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only dispatch events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey,\n    });\n\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey,\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]}