cb8f1c2a6d46f5ab917b4d39902b98b0
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TOUCHABLE_STATE = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _GestureHandler = require("../GestureHandler");

var _propTypes = _interopRequireDefault(require("prop-types"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var TOUCHABLE_STATE = {
  UNDETERMINED: 0,
  BEGAN: 1,
  MOVED_OUTSIDE: 2
};
exports.TOUCHABLE_STATE = TOUCHABLE_STATE;
var PublicPropTypes = {
  accessible: _propTypes.default.bool,
  accessibilityLabel: _propTypes.default.node,
  accessibilityHint: _propTypes.default.string,
  hitSlop: _propTypes.default.shape({
    top: _propTypes.default.number,
    left: _propTypes.default.number,
    bottom: _propTypes.default.number,
    right: _propTypes.default.number
  }),
  disabled: _propTypes.default.bool,
  onPress: _propTypes.default.func,
  onPressIn: _propTypes.default.func,
  onPressOut: _propTypes.default.func,
  onLayout: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  nativeID: _propTypes.default.string,
  testID: _propTypes.default.string,
  delayPressIn: _propTypes.default.number,
  delayPressOut: _propTypes.default.number,
  delayLongPress: _propTypes.default.number,
  shouldActivateOnStart: _propTypes.default.bool,
  disallowInterruption: _propTypes.default.bool
};
var InternalPropTypes = {
  extraButtonProps: _propTypes.default.object,
  onStateChange: _propTypes.default.func
};

var GenericTouchable = function (_Component) {
  (0, _inherits2.default)(GenericTouchable, _Component);

  function GenericTouchable() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, GenericTouchable);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(GenericTouchable)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.longPressDetected = false;
    _this.pointerInside = true;
    _this.STATE = TOUCHABLE_STATE.UNDETERMINED;

    _this.onGestureEvent = function (_ref) {
      var pointerInside = _ref.nativeEvent.pointerInside;

      if (_this.pointerInside !== pointerInside) {
        if (pointerInside) {
          _this.onMoveIn();
        } else {
          _this.onMoveOut();
        }
      }

      _this.pointerInside = pointerInside;
    };

    _this.onHandlerStateChange = function (_ref2) {
      var nativeEvent = _ref2.nativeEvent;
      var state = nativeEvent.state;

      if (state === _GestureHandler.State.CANCELLED || state === _GestureHandler.State.FAILED) {
        _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
      } else if (state === (_reactNative.Platform.OS !== 'android' ? _GestureHandler.State.ACTIVE : _GestureHandler.State.BEGAN) && _this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
        _this.handlePressIn();
      } else if (state === _GestureHandler.State.END) {
        var shouldCallOnPress = !_this.longPressDetected && _this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && _this.pressOutTimeout === null;

        _this.handleGoToUndetermined();

        if (shouldCallOnPress) {
          _this.props.onPress && _this.props.onPress();
        }
      }
    };

    _this.onLongPressDetected = function () {
      _this.longPressDetected = true;

      _this.props.onLongPress();
    };

    return _this;
  }

  (0, _createClass2.default)(GenericTouchable, [{
    key: "handlePressIn",
    value: function handlePressIn() {
      var _this2 = this;

      if (this.props.delayPressIn) {
        this.pressInTimeout = setTimeout(function () {
          _this2.moveToState(TOUCHABLE_STATE.BEGAN);

          _this2.pressInTimeout = null;
        }, this.props.delayPressIn);
      } else {
        this.moveToState(TOUCHABLE_STATE.BEGAN);
      }

      if (this.props.onLongPress) {
        var time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);
        this.longPressTimeout = setTimeout(this.onLongPressDetected, time);
      }
    }
  }, {
    key: "handleMoveOutside",
    value: function handleMoveOutside() {
      var _this3 = this;

      if (this.props.delayPressOut) {
        this.pressOutTimeout = this.pressOutTimeout || setTimeout(function () {
          _this3.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);

          _this3.pressOutTimeout = null;
        }, this.props.delayPressOut);
      } else {
        this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);
      }
    }
  }, {
    key: "handleGoToUndetermined",
    value: function handleGoToUndetermined() {
      var _this4 = this;

      clearTimeout(this.pressOutTimeout);

      if (this.props.delayPressOut) {
        this.pressOutTimeout = setTimeout(function () {
          if (_this4.STATE === TOUCHABLE_STATE.UNDETERMINED) {
            _this4.moveToState(TOUCHABLE_STATE.BEGAN);
          }

          _this4.moveToState(TOUCHABLE_STATE.UNDETERMINED);

          _this4.pressOutTimeout = null;
        }, this.props.delayPressOut);
      } else {
        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
          this.moveToState(TOUCHABLE_STATE.BEGAN);
        }

        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.reset();
    }
  }, {
    key: "reset",
    value: function reset() {
      this.longPressDetected = false;
      this.pointerInside = true;
      clearTimeout(this.pressInTimeout);
      clearTimeout(this.pressOutTimeout);
      clearTimeout(this.longPressTimeout);
      this.pressOutTimeout = null;
      this.longPressTimeout = null;
      this.pressInTimeout = null;
    }
  }, {
    key: "moveToState",
    value: function moveToState(newState) {
      if (newState === this.STATE) {
        return;
      }

      if (newState === TOUCHABLE_STATE.BEGAN) {
        this.props.onPressIn && this.props.onPressIn();
      } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {
        this.props.onPressOut && this.props.onPressOut();
      } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {
        this.reset();

        if (this.STATE === TOUCHABLE_STATE.BEGAN) {
          this.props.onPressOut && this.props.onPressOut();
        }
      }

      this.props.onStateChange && this.props.onStateChange(this.STATE, newState);
      this.STATE = newState;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.reset();
    }
  }, {
    key: "onMoveIn",
    value: function onMoveIn() {
      if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {
        this.moveToState(TOUCHABLE_STATE.BEGAN);
      }
    }
  }, {
    key: "onMoveOut",
    value: function onMoveOut() {
      clearTimeout(this.longPressTimeout);
      this.longPressTimeout = null;

      if (this.STATE === TOUCHABLE_STATE.BEGAN) {
        this.handleMoveOutside();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var coreProps = {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        accessibilityTraits: this.props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop
      };
      return _react.default.createElement(_GestureHandler.BaseButton, (0, _extends2.default)({
        style: this.props.containerStyle,
        onHandlerStateChange: this.props.disabled ? null : this.onHandlerStateChange,
        onGestureEvent: this.onGestureEvent,
        hitSlop: this.props.hitSlop,
        shouldActivateOnStart: this.props.shouldActivateOnStart,
        disallowInterruption: this.props.disallowInterruption
      }, this.props.extraButtonProps), _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, coreProps, {
        style: this.props.style
      }), this.props.children));
    }
  }]);
  return GenericTouchable;
}(_react.Component);

exports.default = GenericTouchable;
GenericTouchable.publicPropTypes = PublicPropTypes;
GenericTouchable.internalPropTypes = InternalPropTypes;
GenericTouchable.propTypes = _objectSpread({}, InternalPropTypes, {}, PublicPropTypes);
GenericTouchable.defaultProps = {
  delayLongPress: 600,
  extraButtonProps: {
    rippleColor: 'transparent'
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdlbmVyaWNUb3VjaGFibGUuanMiXSwibmFtZXMiOlsiVE9VQ0hBQkxFX1NUQVRFIiwiVU5ERVRFUk1JTkVEIiwiQkVHQU4iLCJNT1ZFRF9PVVRTSURFIiwiUHVibGljUHJvcFR5cGVzIiwiYWNjZXNzaWJsZSIsIlByb3BUeXBlcyIsImJvb2wiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJub2RlIiwiYWNjZXNzaWJpbGl0eUhpbnQiLCJzdHJpbmciLCJoaXRTbG9wIiwic2hhcGUiLCJ0b3AiLCJudW1iZXIiLCJsZWZ0IiwiYm90dG9tIiwicmlnaHQiLCJkaXNhYmxlZCIsIm9uUHJlc3MiLCJmdW5jIiwib25QcmVzc0luIiwib25QcmVzc091dCIsIm9uTGF5b3V0Iiwib25Mb25nUHJlc3MiLCJuYXRpdmVJRCIsInRlc3RJRCIsImRlbGF5UHJlc3NJbiIsImRlbGF5UHJlc3NPdXQiLCJkZWxheUxvbmdQcmVzcyIsInNob3VsZEFjdGl2YXRlT25TdGFydCIsImRpc2FsbG93SW50ZXJydXB0aW9uIiwiSW50ZXJuYWxQcm9wVHlwZXMiLCJleHRyYUJ1dHRvblByb3BzIiwib2JqZWN0Iiwib25TdGF0ZUNoYW5nZSIsIkdlbmVyaWNUb3VjaGFibGUiLCJsb25nUHJlc3NEZXRlY3RlZCIsInBvaW50ZXJJbnNpZGUiLCJTVEFURSIsIm9uR2VzdHVyZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJvbk1vdmVJbiIsIm9uTW92ZU91dCIsIm9uSGFuZGxlclN0YXRlQ2hhbmdlIiwic3RhdGUiLCJTdGF0ZSIsIkNBTkNFTExFRCIsIkZBSUxFRCIsIm1vdmVUb1N0YXRlIiwiUGxhdGZvcm0iLCJPUyIsIkFDVElWRSIsImhhbmRsZVByZXNzSW4iLCJFTkQiLCJzaG91bGRDYWxsT25QcmVzcyIsInByZXNzT3V0VGltZW91dCIsImhhbmRsZUdvVG9VbmRldGVybWluZWQiLCJwcm9wcyIsIm9uTG9uZ1ByZXNzRGV0ZWN0ZWQiLCJwcmVzc0luVGltZW91dCIsInNldFRpbWVvdXQiLCJ0aW1lIiwibG9uZ1ByZXNzVGltZW91dCIsImNsZWFyVGltZW91dCIsInJlc2V0IiwibmV3U3RhdGUiLCJoYW5kbGVNb3ZlT3V0c2lkZSIsImNvcmVQcm9wcyIsImFjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJhY2Nlc3NpYmlsaXR5U3RhdGVzIiwiYWNjZXNzaWJpbGl0eVRyYWl0cyIsImNvbnRhaW5lclN0eWxlIiwic3R5bGUiLCJjaGlsZHJlbiIsIkNvbXBvbmVudCIsInB1YmxpY1Byb3BUeXBlcyIsImludGVybmFsUHJvcFR5cGVzIiwicHJvcFR5cGVzIiwiZGVmYXVsdFByb3BzIiwicmlwcGxlQ29sb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQVNPLElBQU1BLGVBQWUsR0FBRztBQUM3QkMsRUFBQUEsWUFBWSxFQUFFLENBRGU7QUFFN0JDLEVBQUFBLEtBQUssRUFBRSxDQUZzQjtBQUc3QkMsRUFBQUEsYUFBYSxFQUFFO0FBSGMsQ0FBeEI7O0FBTVAsSUFBTUMsZUFBZSxHQUFHO0FBR3RCQyxFQUFBQSxVQUFVLEVBQUVDLG1CQUFVQyxJQUhBO0FBSXRCQyxFQUFBQSxrQkFBa0IsRUFBRUYsbUJBQVVHLElBSlI7QUFLdEJDLEVBQUFBLGlCQUFpQixFQUFFSixtQkFBVUssTUFMUDtBQU10QkMsRUFBQUEsT0FBTyxFQUFFTixtQkFBVU8sS0FBVixDQUFnQjtBQUN2QkMsSUFBQUEsR0FBRyxFQUFFUixtQkFBVVMsTUFEUTtBQUV2QkMsSUFBQUEsSUFBSSxFQUFFVixtQkFBVVMsTUFGTztBQUd2QkUsSUFBQUEsTUFBTSxFQUFFWCxtQkFBVVMsTUFISztBQUl2QkcsSUFBQUEsS0FBSyxFQUFFWixtQkFBVVM7QUFKTSxHQUFoQixDQU5hO0FBWXRCSSxFQUFBQSxRQUFRLEVBQUViLG1CQUFVQyxJQVpFO0FBYXRCYSxFQUFBQSxPQUFPLEVBQUVkLG1CQUFVZSxJQWJHO0FBY3RCQyxFQUFBQSxT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QixDQU9aMkMsUyxxQkFDRi9DLGlCLE1BQ0E3QixlO0FBVGNpQyxnQixDQVlaNEMsWSxHQUFlO0FBQ3BCbkQsRUFBQUEsY0FBYyxFQUFFLEdBREk7QUFFcEJJLEVBQUFBLGdCQUFnQixFQUFFO0FBQ2hCZ0QsSUFBQUEsV0FBVyxFQUFFO0FBREc7QUFGRSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEFuaW1hdGVkLCBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBTdGF0ZSwgQmFzZUJ1dHRvbiB9IGZyb20gJy4uL0dlc3R1cmVIYW5kbGVyJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbi8qKlxuICogRWFjaCB0b3VjaGFibGUgaXMgYSBzdGF0ZXMnIG1hY2hpbmUgd2hpY2ggcHJlZm9ybXMgdHJhbnNpdGlvbnMuXG4gKiBPbiB2ZXJ5IGJlZ2lubmluZyAoYW5kIG9uIHRoZSB2ZXJ5IGVuZCBvciByZWNvZ25pdGlvbikgdG91Y2hhYmxlIGlzXG4gKiBVTkRFVEVSTUlORUQuIFRoZW4gaXQgbW92ZXMgdG8gQkVHQU4uIElmIHRvdWNoYWJsZSByZWNvZ25pemVzIHRoYXQgZmluZ2VyXG4gKiB0cmF2ZWwgb3V0c2lkZSBpdCB0cmFuc2l0cyB0byBzcGVjaWFsIE1PVkVEX09VVFNJREUgc3RhdGUuIEdlc3R1cmUgcmVjb2duaXRpb25cbiAqIGZpbmlzaGVzIGluIFVOREVURVJNSU5FRCBzdGF0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFRPVUNIQUJMRV9TVEFURSA9IHtcbiAgVU5ERVRFUk1JTkVEOiAwLFxuICBCRUdBTjogMSxcbiAgTU9WRURfT1VUU0lERTogMixcbn07XG5cbmNvbnN0IFB1YmxpY1Byb3BUeXBlcyA9IHtcbiAgLy8gRGVjaWRlZCB0byBkcm9wIG5vdCB1c2VkIGZpZWxkcyBmcm9tIFJOJ3MgaW1wbGVtZW50YXRpb24uXG4gIC8vIGUuZy4gb25CbHVyIGFuZCBvbkZvY3VzIGFzIHdlbGwgYXMgZGVwcmVjYXRlZCBwcm9wcy5cbiAgYWNjZXNzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGFjY2Vzc2liaWxpdHlMYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIGFjY2Vzc2liaWxpdHlIaW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBoaXRTbG9wOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHRvcDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBsZWZ0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGJvdHRvbTogUHJvcFR5cGVzLm51bWJlcixcbiAgICByaWdodDogUHJvcFR5cGVzLm51bWJlcixcbiAgfSksXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25QcmVzczogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUHJlc3NJbjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUHJlc3NPdXQ6IFByb3BUeXBlcy5mdW5jLFxuICBvbkxheW91dDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTG9uZ1ByZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgbmF0aXZlSUQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRlc3RJRDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVsYXlQcmVzc0luOiBQcm9wVHlwZXMubnVtYmVyLFxuICBkZWxheVByZXNzT3V0OiBQcm9wVHlwZXMubnVtYmVyLFxuICBkZWxheUxvbmdQcmVzczogUHJvcFR5cGVzLm51bWJlcixcbiAgc2hvdWxkQWN0aXZhdGVPblN0YXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzYWxsb3dJbnRlcnJ1cHRpb246IFByb3BUeXBlcy5ib29sLFxufTtcblxuY29uc3QgSW50ZXJuYWxQcm9wVHlwZXMgPSB7XG4gIGV4dHJhQnV0dG9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIG9uU3RhdGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuLyoqXG4gKiBHZW5lcmljVG91Y2hhYmxlIGlzIG5vdCBpbnRlbnRlZCB0byBiZSB1c2VkIGFzIGl0LlxuICogU2hvdWxkIGJlIHRyZWF0ZWQgYXMgYSBzb3VyY2UgZm9yIHRoZSByZXN0IG9mIHRvdWNoYWJsZXNcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZW5lcmljVG91Y2hhYmxlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHB1YmxpY1Byb3BUeXBlcyA9IFB1YmxpY1Byb3BUeXBlcztcbiAgc3RhdGljIGludGVybmFsUHJvcFR5cGVzID0gSW50ZXJuYWxQcm9wVHlwZXM7XG5cbiAgLy8gVGhlIHByb3AgdHlwZSBjb2xsZWN0aW9ucyBoYXZlIHRvIGJlIG91dHNpZGUgb2YgdGhlIGNsYXNzLCBhcyBtZXRyb1xuICAvLyBhdCB0aGlzIHRpbWUgZG9lcyBub3QgY29tcGlsZSBgdGhpcy5mb29gIGNvcnJlY3RseSBpZiBITVIgaXMgZW5hYmxlZC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3NvZnR3YXJlLW1hbnNpb24vcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9wdWxsLzQwNiNpc3N1ZWNvbW1lbnQtNDUzNzc5OTc3XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLi4uSW50ZXJuYWxQcm9wVHlwZXMsXG4gICAgLi4uUHVibGljUHJvcFR5cGVzLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgZGVsYXlMb25nUHJlc3M6IDYwMCxcbiAgICBleHRyYUJ1dHRvblByb3BzOiB7XG4gICAgICByaXBwbGVDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICB9LFxuICB9O1xuXG4gIC8vIHRpbWVvdXQgaGFuZGxlcnNcbiAgcHJlc3NJblRpbWVvdXQ7XG4gIHByZXNzT3V0VGltZW91dDtcbiAgbG9uZ1ByZXNzVGltZW91dDtcblxuICAvLyBUaGlzIGZsYWcgaXMgcmVxdWlyZWQgc2luY2UgcmVjb2duaXRpb24gb2YgbG9uZ1ByZXNzIGltcGxpZXMgbm90LWludm9raW5nIG9uUHJlc3NcbiAgbG9uZ1ByZXNzRGV0ZWN0ZWQgPSBmYWxzZTtcblxuICBwb2ludGVySW5zaWRlID0gdHJ1ZTtcblxuICAvLyBTdGF0ZSBvZiB0b3VjaGFibGVcbiAgU1RBVEUgPSBUT1VDSEFCTEVfU1RBVEUuVU5ERVRFUk1JTkVEO1xuXG4gIC8vIGhhbmRsZVByZXNzSW4gaW4gY2FsbGVkIG9uIGZpcnN0IHRvdWNoIG9uIHRyYXZlbGluZyBpbnNpZGUgY29tcG9uZW50LlxuICAvLyBIYW5kbGVzIHN0YXRlIHRyYW5zaXRpb24gd2l0aCBkZWxheS5cbiAgaGFuZGxlUHJlc3NJbigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5kZWxheVByZXNzSW4pIHtcbiAgICAgIHRoaXMucHJlc3NJblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5tb3ZlVG9TdGF0ZShUT1VDSEFCTEVfU1RBVEUuQkVHQU4pO1xuICAgICAgICB0aGlzLnByZXNzSW5UaW1lb3V0ID0gbnVsbDtcbiAgICAgIH0sIHRoaXMucHJvcHMuZGVsYXlQcmVzc0luKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb3ZlVG9TdGF0ZShUT1VDSEFCTEVfU1RBVEUuQkVHQU4pO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5vbkxvbmdQcmVzcykge1xuICAgICAgY29uc3QgdGltZSA9XG4gICAgICAgICh0aGlzLnByb3BzLmRlbGF5UHJlc3NJbiB8fCAwKSArICh0aGlzLnByb3BzLmRlbGF5TG9uZ1ByZXNzIHx8IDApO1xuICAgICAgdGhpcy5sb25nUHJlc3NUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLm9uTG9uZ1ByZXNzRGV0ZWN0ZWQsIHRpbWUpO1xuICAgIH1cbiAgfVxuICAvLyBoYW5kbGVNb3ZlT3V0c2lkZSBpbiBjYWxsZWQgb24gdHJhdmVsaW5nIG91dHNpZGUgY29tcG9uZW50LlxuICAvLyBIYW5kbGVzIHN0YXRlIHRyYW5zaXRpb24gd2l0aCBkZWxheS5cbiAgaGFuZGxlTW92ZU91dHNpZGUoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGVsYXlQcmVzc091dCkge1xuICAgICAgdGhpcy5wcmVzc091dFRpbWVvdXQgPVxuICAgICAgICB0aGlzLnByZXNzT3V0VGltZW91dCB8fFxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLm1vdmVUb1N0YXRlKFRPVUNIQUJMRV9TVEFURS5NT1ZFRF9PVVRTSURFKTtcbiAgICAgICAgICB0aGlzLnByZXNzT3V0VGltZW91dCA9IG51bGw7XG4gICAgICAgIH0sIHRoaXMucHJvcHMuZGVsYXlQcmVzc091dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZVRvU3RhdGUoVE9VQ0hBQkxFX1NUQVRFLk1PVkVEX09VVFNJREUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGhhbmRsZUdvVG9VbmRldGVybWluZWQgdHJhbnNpdHMgdG8gVU5ERVRFUk1JTkVEIHN0YXRlIHdpdGggcHJvcGVyIGRlbGF5XG4gIGhhbmRsZUdvVG9VbmRldGVybWluZWQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucHJlc3NPdXRUaW1lb3V0KTtcbiAgICBpZiAodGhpcy5wcm9wcy5kZWxheVByZXNzT3V0KSB7XG4gICAgICB0aGlzLnByZXNzT3V0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5TVEFURSA9PT0gVE9VQ0hBQkxFX1NUQVRFLlVOREVURVJNSU5FRCkge1xuICAgICAgICAgIHRoaXMubW92ZVRvU3RhdGUoVE9VQ0hBQkxFX1NUQVRFLkJFR0FOKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vdmVUb1N0YXRlKFRPVUNIQUJMRV9TVEFURS5VTkRFVEVSTUlORUQpO1xuICAgICAgICB0aGlzLnByZXNzT3V0VGltZW91dCA9IG51bGw7XG4gICAgICB9LCB0aGlzLnByb3BzLmRlbGF5UHJlc3NPdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5TVEFURSA9PT0gVE9VQ0hBQkxFX1NUQVRFLlVOREVURVJNSU5FRCkge1xuICAgICAgICB0aGlzLm1vdmVUb1N0YXRlKFRPVUNIQUJMRV9TVEFURS5CRUdBTik7XG4gICAgICB9XG4gICAgICB0aGlzLm1vdmVUb1N0YXRlKFRPVUNIQUJMRV9TVEFURS5VTkRFVEVSTUlORUQpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuICAvLyByZXNldCB0aW1lb3V0IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLlxuICByZXNldCgpIHtcbiAgICB0aGlzLmxvbmdQcmVzc0RldGVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5wb2ludGVySW5zaWRlID0gdHJ1ZTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5wcmVzc0luVGltZW91dCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucHJlc3NPdXRUaW1lb3V0KTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5sb25nUHJlc3NUaW1lb3V0KTtcbiAgICB0aGlzLnByZXNzT3V0VGltZW91dCA9IG51bGw7XG4gICAgdGhpcy5sb25nUHJlc3NUaW1lb3V0ID0gbnVsbDtcbiAgICB0aGlzLnByZXNzSW5UaW1lb3V0ID0gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCBzdGF0ZXMnIHRyYW5zaXRpb25zIGFyZSBkZWZpbmVkIGhlcmUuXG4gIG1vdmVUb1N0YXRlKG5ld1N0YXRlKSB7XG4gICAgaWYgKG5ld1N0YXRlID09PSB0aGlzLlNUQVRFKSB7XG4gICAgICAvLyBJZ25vcmUgZHVtbXkgdHJhbnNpdGlvbnNcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG5ld1N0YXRlID09PSBUT1VDSEFCTEVfU1RBVEUuQkVHQU4pIHtcbiAgICAgIC8vIEZpcnN0IHRvdWNoIGFuZCBtb3ZpbmcgaW5zaWRlXG4gICAgICB0aGlzLnByb3BzLm9uUHJlc3NJbiAmJiB0aGlzLnByb3BzLm9uUHJlc3NJbigpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhdGUgPT09IFRPVUNIQUJMRV9TVEFURS5NT1ZFRF9PVVRTSURFKSB7XG4gICAgICAvLyBNb3Zpbmcgb3V0c2lkZVxuICAgICAgdGhpcy5wcm9wcy5vblByZXNzT3V0ICYmIHRoaXMucHJvcHMub25QcmVzc091dCgpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhdGUgPT09IFRPVUNIQUJMRV9TVEFURS5VTkRFVEVSTUlORUQpIHtcbiAgICAgIC8vIE5lZWQgdG8gcmVzZXQgZWFjaCB0aW1lIG9uIHRyYW5zaXRpb24gdG8gVU5ERVRFUk1JTkVEXG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICBpZiAodGhpcy5TVEFURSA9PT0gVE9VQ0hBQkxFX1NUQVRFLkJFR0FOKSB7XG4gICAgICAgIC8vIC4uLiBhbmQgaWYgaXQgaGFwcGVucyBpbnNpZGUgYnV0dG9uLlxuICAgICAgICB0aGlzLnByb3BzLm9uUHJlc3NPdXQgJiYgdGhpcy5wcm9wcy5vblByZXNzT3V0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEZpbmFsbHkgY2FsbCBsaXN0ZXIgKHVzZWQgYnkgc3ViY2xhc3NlcylcbiAgICB0aGlzLnByb3BzLm9uU3RhdGVDaGFuZ2UgJiYgdGhpcy5wcm9wcy5vblN0YXRlQ2hhbmdlKHRoaXMuU1RBVEUsIG5ld1N0YXRlKTtcbiAgICAvLyAuLi4gYW5kIG1ha2UgdHJhbnNpdGlvbi5cbiAgICB0aGlzLlNUQVRFID0gbmV3U3RhdGU7XG4gIH1cblxuICBvbkdlc3R1cmVFdmVudCA9ICh7IG5hdGl2ZUV2ZW50OiB7IHBvaW50ZXJJbnNpZGUgfSB9KSA9PiB7XG4gICAgaWYgKHRoaXMucG9pbnRlckluc2lkZSAhPT0gcG9pbnRlckluc2lkZSkge1xuICAgICAgaWYgKHBvaW50ZXJJbnNpZGUpIHtcbiAgICAgICAgdGhpcy5vbk1vdmVJbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbk1vdmVPdXQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5wb2ludGVySW5zaWRlID0gcG9pbnRlckluc2lkZTtcbiAgfTtcblxuICBvbkhhbmRsZXJTdGF0ZUNoYW5nZSA9ICh7IG5hdGl2ZUV2ZW50IH0pID0+IHtcbiAgICBjb25zdCB7IHN0YXRlIH0gPSBuYXRpdmVFdmVudDtcbiAgICBpZiAoc3RhdGUgPT09IFN0YXRlLkNBTkNFTExFRCB8fCBzdGF0ZSA9PT0gU3RhdGUuRkFJTEVEKSB7XG4gICAgICAvLyBOZWVkIHRvIGhhbmRsZSBjYXNlIHdpdGggZXh0ZXJuYWwgY2FuY2VsbGF0aW9uIChlLmcuIGJ5IFNjcm9sbFZpZXcpXG4gICAgICB0aGlzLm1vdmVUb1N0YXRlKFRPVUNIQUJMRV9TVEFURS5VTkRFVEVSTUlORUQpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBUaGlzIHBsYXRmb3JtIGNoZWNrIGlzIGFuIGltcGxpY2F0aW9uIG9mIHNsaWdodGx5IGRpZmZlcmVudCBiZWhhdmlvciBvZiBoYW5kbGVycyBvbiBkaWZmZXJlbnQgcGxhdGZvcm0uXG4gICAgICAvLyBBbmQgQW5kcm9pZCBcIkFjdGl2ZVwiIHN0YXRlIGlzIGFjaGlldmluZyBvbiBmaXJzdCBtb3ZlIG9mIGEgZmluZ2VyLCBub3Qgb24gcHJlc3MgaW4uXG4gICAgICAvLyBPbiBpT1MgZXZlbnQgb24gXCJCZWdhblwiIGlzIG5vdCBkZWxpdmVyZWQuXG4gICAgICBzdGF0ZSA9PT0gKFBsYXRmb3JtLk9TICE9PSAnYW5kcm9pZCcgPyBTdGF0ZS5BQ1RJVkUgOiBTdGF0ZS5CRUdBTikgJiZcbiAgICAgIHRoaXMuU1RBVEUgPT09IFRPVUNIQUJMRV9TVEFURS5VTkRFVEVSTUlORURcbiAgICApIHtcbiAgICAgIC8vIE1vdmluZyBpbnNpZGUgcmVxdWlyZXNcbiAgICAgIHRoaXMuaGFuZGxlUHJlc3NJbigpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IFN0YXRlLkVORCkge1xuICAgICAgY29uc3Qgc2hvdWxkQ2FsbE9uUHJlc3MgPVxuICAgICAgICAhdGhpcy5sb25nUHJlc3NEZXRlY3RlZCAmJlxuICAgICAgICB0aGlzLlNUQVRFICE9PSBUT1VDSEFCTEVfU1RBVEUuTU9WRURfT1VUU0lERSAmJlxuICAgICAgICB0aGlzLnByZXNzT3V0VGltZW91dCA9PT0gbnVsbDtcbiAgICAgIHRoaXMuaGFuZGxlR29Ub1VuZGV0ZXJtaW5lZCgpO1xuICAgICAgaWYgKHNob3VsZENhbGxPblByZXNzKSB7XG4gICAgICAgIC8vIENhbGxzIG9ubHkgaW5zaWRlIGNvbXBvbmVudCB3aGV0aGVyIG5vIGxvbmcgcHJlc3Mgd2FzIGNhbGxlZCBwcmV2aW91c2x5XG4gICAgICAgIHRoaXMucHJvcHMub25QcmVzcyAmJiB0aGlzLnByb3BzLm9uUHJlc3MoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgb25Mb25nUHJlc3NEZXRlY3RlZCA9ICgpID0+IHtcbiAgICB0aGlzLmxvbmdQcmVzc0RldGVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLnByb3BzLm9uTG9uZ1ByZXNzKCk7XG4gIH07XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgLy8gdG8gcHJldmVudCBtZW1vcnkgbGVha3NcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICBvbk1vdmVJbigpIHtcbiAgICBpZiAodGhpcy5TVEFURSA9PT0gVE9VQ0hBQkxFX1NUQVRFLk1PVkVEX09VVFNJREUpIHtcbiAgICAgIC8vIFRoaXMgY2FsbCBpcyBub3QgdGhyb3R0bGVkIHdpdGggZGVsYXlzIChsaWtlIGluIFJOJ3MgaW1wbGVtZW50YXRpb24pLlxuICAgICAgdGhpcy5tb3ZlVG9TdGF0ZShUT1VDSEFCTEVfU1RBVEUuQkVHQU4pO1xuICAgIH1cbiAgfVxuXG4gIG9uTW92ZU91dCgpIHtcbiAgICAvLyBsb25nIHByZXNzIHNob3VsZCBubyBsb25nZXIgYmUgZGV0ZWN0ZWRcbiAgICBjbGVhclRpbWVvdXQodGhpcy5sb25nUHJlc3NUaW1lb3V0KTtcbiAgICB0aGlzLmxvbmdQcmVzc1RpbWVvdXQgPSBudWxsO1xuICAgIGlmICh0aGlzLlNUQVRFID09PSBUT1VDSEFCTEVfU1RBVEUuQkVHQU4pIHtcbiAgICAgIHRoaXMuaGFuZGxlTW92ZU91dHNpZGUoKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgY29yZVByb3BzID0ge1xuICAgICAgYWNjZXNzaWJsZTogdGhpcy5wcm9wcy5hY2Nlc3NpYmxlICE9PSBmYWxzZSxcbiAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbDogdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5TGFiZWwsXG4gICAgICBhY2Nlc3NpYmlsaXR5SGludDogdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5SGludCxcbiAgICAgIGFjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlOiB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlLFxuICAgICAgYWNjZXNzaWJpbGl0eVJvbGU6IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVJvbGUsXG4gICAgICBhY2Nlc3NpYmlsaXR5U3RhdGVzOiB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZXMsXG4gICAgICBhY2Nlc3NpYmlsaXR5VHJhaXRzOiB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlUcmFpdHMsXG4gICAgICBuYXRpdmVJRDogdGhpcy5wcm9wcy5uYXRpdmVJRCxcbiAgICAgIHRlc3RJRDogdGhpcy5wcm9wcy50ZXN0SUQsXG4gICAgICBvbkxheW91dDogdGhpcy5wcm9wcy5vbkxheW91dCxcbiAgICAgIGhpdFNsb3A6IHRoaXMucHJvcHMuaGl0U2xvcCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCYXNlQnV0dG9uXG4gICAgICAgIHN0eWxlPXt0aGlzLnByb3BzLmNvbnRhaW5lclN0eWxlfVxuICAgICAgICBvbkhhbmRsZXJTdGF0ZUNoYW5nZT17XG4gICAgICAgICAgdGhpcy5wcm9wcy5kaXNhYmxlZCA/IG51bGwgOiB0aGlzLm9uSGFuZGxlclN0YXRlQ2hhbmdlXG4gICAgICAgIH1cbiAgICAgICAgb25HZXN0dXJlRXZlbnQ9e3RoaXMub25HZXN0dXJlRXZlbnR9XG4gICAgICAgIGhpdFNsb3A9e3RoaXMucHJvcHMuaGl0U2xvcH1cbiAgICAgICAgc2hvdWxkQWN0aXZhdGVPblN0YXJ0PXt0aGlzLnByb3BzLnNob3VsZEFjdGl2YXRlT25TdGFydH1cbiAgICAgICAgZGlzYWxsb3dJbnRlcnJ1cHRpb249e3RoaXMucHJvcHMuZGlzYWxsb3dJbnRlcnJ1cHRpb259XG4gICAgICAgIHsuLi50aGlzLnByb3BzLmV4dHJhQnV0dG9uUHJvcHN9PlxuICAgICAgICA8QW5pbWF0ZWQuVmlldyB7Li4uY29yZVByb3BzfSBzdHlsZT17dGhpcy5wcm9wcy5zdHlsZX0+XG4gICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvQW5pbWF0ZWQuVmlldz5cbiAgICAgIDwvQmFzZUJ1dHRvbj5cbiAgICApO1xuICB9XG59XG4iXX0=