{"version":3,"sources":["MapPolyline.js"],"names":["viewPropTypes","ViewPropTypes","View","propTypes","coordinates","PropTypes","arrayOf","shape","latitude","number","isRequired","longitude","onPress","func","tappable","bool","fillColor","ColorPropType","strokeWidth","strokeColor","strokeColors","zIndex","lineCap","oneOf","lineJoin","miterLimit","geodesic","lineDashPhase","lineDashPattern","defaultProps","MapPolyline","props","polyline","setNativeProps","AIRMapPolyline","getAirComponent","ref","React","Component","componentType","providers","google","ios","SUPPORTED","android","USES_DEFAULT_IMPLEMENTATION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAMA,IAAMA,aAAa,GAAGC,8BAAiBC,kBAAKC,SAA5C;;AAEA,IAAMA,SAAS,qBACVH,aADU;AAMbI,EAAAA,WAAW,EAAEC,mBAAUC,OAAV,CACXD,mBAAUE,KAAV,CAAgB;AAIdC,IAAAA,QAAQ,EAAEH,mBAAUI,MAAV,CAAiBC,UAJb;AAKdC,IAAAA,SAAS,EAAEN,mBAAUI,MAAV,CAAiBC;AALd,GAAhB,CADW,CANA;AAmBbE,EAAAA,OAAO,EAAEP,mBAAUQ,IAnBN;AAwBbC,EAAAA,QAAQ,EAAET,mBAAUU,IAxBP;AA6BbC,EAAAA,SAAS,EAAEC,0BA7BE;AAkCbC,EAAAA,WAAW,EAAEb,mBAAUI,MAlCV;AAuCbU,EAAAA,WAAW,EAAEF,0BAvCA;AA4CbG,EAAAA,YAAY,EAAEf,mBAAUC,OAAV,CAAkBW,0BAAlB,CA5CD;AAqDbI,EAAAA,MAAM,EAAEhB,mBAAUI,MArDL;AA6Dba,EAAAA,OAAO,EAAEjB,mBAAUkB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,CAAhB,CA7DI;AAqEbC,EAAAA,QAAQ,EAAEnB,mBAAUkB,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAhB,CArEG;AAiFbE,EAAAA,UAAU,EAAEpB,mBAAUI,MAjFT;AA2FbiB,EAAAA,QAAQ,EAAErB,mBAAUU,IA3FP;AAwGbY,EAAAA,aAAa,EAAEtB,mBAAUI,MAxGZ;AAsHbmB,EAAAA,eAAe,EAAEvB,mBAAUC,OAAV,CAAkBD,mBAAUI,MAA5B;AAtHJ,EAAf;;AAyHA,IAAMoB,YAAY,GAAG;AACnBV,EAAAA,WAAW,EAAE,MADM;AAEnBD,EAAAA,WAAW,EAAE,CAFM;AAGnBM,EAAAA,QAAQ,EAAE,OAHS;AAInBF,EAAAA,OAAO,EAAE;AAJU,CAArB;;IAOMQ,W;;;;;;;;;;mCACWC,K,EAAO;AACpB,WAAKC,QAAL,CAAcC,cAAd,CAA6BF,KAA7B;AACD;;;6BAEQ;AAAA;;AACP,UAAMG,cAAc,GAAG,KAAKC,eAAL,EAAvB;AACA,aACE,6BAAC,cAAD,6BACM,KAAKJ,KADX;AAEE,QAAA,GAAG,EAAE,aAAAK,IAAG,EAAI;AACV,UAAA,KAAI,CAACJ,QAAL,GAAgBI,IAAhB;AACD;AAJH,SADF;AAQD;;;EAfuBC,eAAMC,S;;AAkBhCR,WAAW,CAAC3B,SAAZ,GAAwBA,SAAxB;AACA2B,WAAW,CAACD,YAAZ,GAA2BA,YAA3B;;eAEe,mCAAqBC,WAArB,EAAkC;AAC/CS,EAAAA,aAAa,EAAE,UADgC;AAE/CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEC,+BADC;AAENC,MAAAA,OAAO,EAAEC;AAFH;AADC;AAFoC,CAAlC,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ColorPropType, ViewPropTypes, View } from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  /**\n   * An array of coordinates to describe the polygon\n   */\n  coordinates: PropTypes.arrayOf(\n    PropTypes.shape({\n      /**\n       * Latitude/Longitude coordinates\n       */\n      latitude: PropTypes.number.isRequired,\n      longitude: PropTypes.number.isRequired,\n    })\n  ),\n\n  /**\n   * Callback that is called when the user presses on the polyline\n   */\n  onPress: PropTypes.func,\n\n  /* Boolean to allow a polyline to be tappable and use the\n   * onPress function\n   */\n  tappable: PropTypes.bool,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The stroke colors to use for the path.\n   */\n  strokeColors: PropTypes.arrayOf(ColorPropType),\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * Boolean to indicate whether to draw each segment of the line as a geodesic as opposed to\n   * straight lines on the Mercator projection. A geodesic is the shortest path between two\n   * points on the Earth's surface. The geodesic curve is constructed assuming the Earth is\n   * a sphere.\n   *\n   * @platform android\n   */\n  geodesic: PropTypes.bool,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n  lineJoin: 'round',\n  lineCap: 'round',\n};\n\nclass MapPolyline extends React.Component {\n  setNativeProps(props) {\n    this.polyline.setNativeProps(props);\n  }\n\n  render() {\n    const AIRMapPolyline = this.getAirComponent();\n    return (\n      <AIRMapPolyline\n        {...this.props}\n        ref={ref => {\n          this.polyline = ref;\n        }}\n      />\n    );\n  }\n}\n\nMapPolyline.propTypes = propTypes;\nMapPolyline.defaultProps = defaultProps;\n\nexport default decorateMapComponent(MapPolyline, {\n  componentType: 'Polyline',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]}