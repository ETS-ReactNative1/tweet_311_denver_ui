74d116815952e3ad6662f17bf20d0ec1
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Asset = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _core = require("@unimodules/core");

var _AssetRegistry = require("./AssetRegistry");

var AssetSources = _interopRequireWildcard(require("./AssetSources"));

var AssetUris = _interopRequireWildcard(require("./AssetUris"));

var _EmbeddedAssets = require("./EmbeddedAssets");

var ImageAssets = _interopRequireWildcard(require("./ImageAssets"));

var _PlatformUtils = require("./PlatformUtils");

var _resolveAssetSource2 = _interopRequireDefault(require("./resolveAssetSource"));

var Asset = function () {
  function Asset(_ref) {
    var name = _ref.name,
        type = _ref.type,
        _ref$hash = _ref.hash,
        hash = _ref$hash === void 0 ? null : _ref$hash,
        uri = _ref.uri,
        width = _ref.width,
        height = _ref.height;
    (0, _classCallCheck2.default)(this, Asset);
    this.hash = null;
    this.localUri = null;
    this.width = null;
    this.height = null;
    this.downloading = false;
    this.downloaded = false;
    this._downloadCallbacks = [];
    this.name = name;
    this.type = type;
    this.hash = hash;
    this.uri = uri;

    if (typeof width === 'number') {
      this.width = width;
    }

    if (typeof height === 'number') {
      this.height = height;
    }

    if (_PlatformUtils.IS_MANAGED_ENV && hash) {
      this.localUri = (0, _EmbeddedAssets.getEmbeddedAssetUri)(hash, type);

      if (this.localUri) {
        this.downloaded = true;
      }
    }

    if (_core.Platform.OS === 'web') {
      if (!name) {
        this.name = AssetUris.getFilename(uri);
      }

      if (!type) {
        this.type = AssetUris.getFileExtension(uri);
      }
    }
  }

  (0, _createClass2.default)(Asset, [{
    key: "downloadAsync",
    value: function downloadAsync() {
      var _this = this;

      var _ref2, width, height, name;

      return _regenerator.default.async(function downloadAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.downloaded) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              if (!this.downloading) {
                _context.next = 6;
                break;
              }

              _context.next = 5;
              return _regenerator.default.awrap(new Promise(function (resolve, reject) {
                _this._downloadCallbacks.push({
                  resolve: resolve,
                  reject: reject
                });
              }));

            case 5:
              return _context.abrupt("return");

            case 6:
              this.downloading = true;
              _context.prev = 7;

              if (!(_core.Platform.OS === 'web')) {
                _context.next = 22;
                break;
              }

              if (!ImageAssets.isImageType(this.type)) {
                _context.next = 21;
                break;
              }

              _context.next = 12;
              return _regenerator.default.awrap(ImageAssets.getImageInfoAsync(this.uri));

            case 12:
              _ref2 = _context.sent;
              width = _ref2.width;
              height = _ref2.height;
              name = _ref2.name;
              this.width = width;
              this.height = height;
              this.name = name;
              _context.next = 22;
              break;

            case 21:
              this.name = AssetUris.getFilename(this.uri);

            case 22:
              _context.next = 24;
              return _regenerator.default.awrap((0, _PlatformUtils.downloadAsync)(this.uri, this.hash, this.type, this.name));

            case 24:
              this.localUri = _context.sent;
              this.downloaded = true;

              this._downloadCallbacks.forEach(function (_ref3) {
                var resolve = _ref3.resolve;
                return resolve();
              });

              _context.next = 33;
              break;

            case 29:
              _context.prev = 29;
              _context.t0 = _context["catch"](7);

              this._downloadCallbacks.forEach(function (_ref4) {
                var reject = _ref4.reject;
                return reject(_context.t0);
              });

              throw _context.t0;

            case 33:
              _context.prev = 33;
              this.downloading = false;
              this._downloadCallbacks = [];
              return _context.finish(33);

            case 37:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[7, 29, 33, 37]]);
    }
  }], [{
    key: "loadAsync",
    value: function loadAsync(moduleId) {
      var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];
      return Promise.all(moduleIds.map(function (moduleId) {
        return Asset.fromModule(moduleId).downloadAsync();
      }));
    }
  }, {
    key: "fromModule",
    value: function fromModule(virtualAssetModule) {
      if (typeof virtualAssetModule === 'string') {
        return Asset.fromURI(virtualAssetModule);
      }

      var meta = (0, _AssetRegistry.getAssetByID)(virtualAssetModule);

      if (!meta) {
        throw new Error("Module \"" + virtualAssetModule + "\" is missing from the asset registry");
      }

      if (!_PlatformUtils.IS_MANAGED_ENV) {
        var _resolveAssetSource = (0, _resolveAssetSource2.default)(virtualAssetModule),
            uri = _resolveAssetSource.uri;

        var asset = new Asset({
          name: meta.name,
          type: meta.type,
          hash: meta.hash,
          uri: uri,
          width: meta.width,
          height: meta.height
        });

        if (_core.Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {
          asset.localUri = asset.uri;
          asset.downloaded = true;
        }

        Asset.byHash[meta.hash] = asset;
        return asset;
      }

      return Asset.fromMetadata(meta);
    }
  }, {
    key: "fromMetadata",
    value: function fromMetadata(meta) {
      var metaHash = meta.hash;

      if (Asset.byHash[metaHash]) {
        return Asset.byHash[metaHash];
      } else if (!_PlatformUtils.IS_MANAGED_ENV && !Asset.byHash[metaHash]) {
        throw new Error('Assets must be initialized with Asset.fromModule');
      }

      var _AssetSources$selectA = AssetSources.selectAssetSource(meta),
          uri = _AssetSources$selectA.uri,
          hash = _AssetSources$selectA.hash;

      var asset = new Asset({
        name: meta.name,
        type: meta.type,
        hash: hash,
        uri: uri,
        width: meta.width,
        height: meta.height
      });
      Asset.byHash[metaHash] = asset;
      return asset;
    }
  }, {
    key: "fromURI",
    value: function fromURI(uri) {
      if (Asset.byUri[uri]) {
        return Asset.byUri[uri];
      }

      var type = '';

      if (uri.indexOf(';base64') > -1) {
        type = uri.split(';')[0].split('/')[1];
      } else {
        var extension = AssetUris.getFileExtension(uri);
        type = extension.startsWith('.') ? extension.substring(1) : extension;
      }

      var asset = new Asset({
        name: '',
        type: type,
        hash: null,
        uri: uri
      });
      Asset.byUri[uri] = asset;
      return asset;
    }
  }]);
  return Asset;
}();

exports.Asset = Asset;
Asset.byHash = {};
Asset.byUri = {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,