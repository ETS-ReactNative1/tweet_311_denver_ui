9253fa1420c4d15bb301c7023a39f4a8
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));

var _expoConstants = _interopRequireDefault(require("expo-constants"));

var Permissions = _interopRequireWildcard(require("expo-permissions"));

var Form = function (_Component) {
  (0, _inherits2.default)(Form, _Component);

  function Form(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Form);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Form).call(this, props));

    _this.componentDidMount = function () {
      _this.getPermissions();
    };

    _this.selectImage = function _callee() {
      var result;
      return _regenerator.default.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _regenerator.default.awrap(ImagePicker.launchImageLibraryAsync({
                quality: 1
              }));

            case 2:
              result = _context.sent;

              _this.setState({
                photo: result.uri
              });

            case 4:
            case "end":
              return _context.stop();
          }
        }
      });
    };

    _this.getPermissions = function _callee2() {
      var _ref, status;

      return _regenerator.default.async(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!_expoConstants.default.platform.ios) {
                _context2.next = 6;
                break;
              }

              _context2.next = 3;
              return _regenerator.default.awrap(Permissions.askAsync(Permissions.CAMERA_ROLL));

            case 3:
              _ref = _context2.sent;
              status = _ref.status;

              if (status !== 'granted') {
                alert('Sorry, we need camera roll permissions to make this work!');
              }

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      });
    };

    _this.handlePhotoUpload = function _callee3() {
      return _regenerator.default.async(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              try {
                _this.selectImage();
              } catch (error) {
                _this.setState({
                  error: error
                });
              }

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      });
    };

    _this.validateSubmit = function () {
      var description = _this.state.description;
      var location = _this.props.location;
      return _this.validateEmail() && description && location.lat && location.long ? true : false;
    };

    _this.validateEmail = function () {
      return /\S+@\S+\.\S+/.test(_this.state.email);
    };

    _this.handleSubmit = function () {
      var _this$props = _this.props,
          navigation = _this$props.navigation,
          location = _this$props.location;
      var payload = {
        report: {
          category: _this.state.isSnowRemoval ? 'snow_removal' : 'other',
          description: _this.state.description,
          image: _this.state.images,
          email: _this.state.email
        },
        location: location
      };

      if (_this.validateSubmit()) {
        _this.props.desc(_this.state.description);

        _this.resetState();

        navigation.navigate('Tweet');
      } else {
        _this.setState({
          error: 'Please add a valid email, description, and location.'
        });
      }
    };

    _this.handleChange = function (value, type) {
      if (_this.validateSubmit()) {
        _this.setState({
          error: ''
        });
      }

      _this.setState((0, _defineProperty2.default)({}, type, value));
    };

    _this.resetState = function () {
      _this.setState({
        email: '',
        description: '',
        isSnowRemoval: false,
        photo: '',
        error: ''
      });
    };

    _this.state = {
      email: '',
      description: '',
      isSnowRemoval: false,
      photo: '',
      error: ''
    };
    return _this;
  }

  (0, _createClass2.default)(Form, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          navigation = _this$props2.navigation,
          location = _this$props2.location;
      var photoButtonText = this.state.photo ? 'Change Photo' : 'Add Photo';
      var mapButtonText = location.lat && location.long ? 'Change Location' : 'Add Location';
      return _react.default.createElement(_reactNative.View, {
        style: styles.container
      }, _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_reactNative.Text, {
        style: styles.h1
      }, "Tweet", _react.default.createElement(_reactNative.Text, {
        style: styles.h1Color
      }, "311"), "Denver"), _react.default.createElement(_reactNative.Text, {
        style: styles.label
      }, "Enter Email:"), _react.default.createElement(_reactNative.TextInput, {
        style: styles.smallInput,
        value: this.state.email,
        onChangeText: function onChangeText(text) {
          return _this2.handleChange(text, 'email');
        }
      }), _react.default.createElement(_reactNative.View, {
        style: styles.smallWrapper
      }, _react.default.createElement(_reactNative.Switch, {
        style: styles.CheckBox,
        value: this.state.isSnowRemoval,
        onValueChange: function onValueChange(value) {
          return _this2.setState({
            isSnowRemoval: value
          });
        }
      }), _react.default.createElement(_reactNative.Text, {
        style: styles.iconLabel
      }, "Snow Removal?")), _react.default.createElement(_reactNative.Text, {
        style: styles.label
      }, "Description:"), _react.default.createElement(_reactNative.TextInput, {
        multiline: true,
        style: styles.largeInput,
        value: this.state.description,
        onChangeText: function onChangeText(text) {
          return _this2.setState({
            description: text
          });
        }
      }), _react.default.createElement(_reactNative.TouchableOpacity, {
        style: styles.addButton,
        onPress: function onPress() {
          return navigation.navigate('Location');
        }
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.iconLabel
      }, mapButtonText)), _react.default.createElement(_reactNative.TouchableOpacity, {
        style: styles.addButton,
        onPress: this.handlePhotoUpload
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.iconLabel
      }, photoButtonText)), _react.default.createElement(_reactNative.Text, {
        style: styles.error
      }, this.state.error), _react.default.createElement(_reactNative.TouchableOpacity, {
        style: styles.button,
        onPress: function onPress() {
          return _this2.handleSubmit();
        }
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.buttonLabel
      }, "Submit"))));
    }
  }]);
  return Form;
}(_react.Component);

;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff'
  },
  h1: {
    color: '#3976EA',
    fontSize: 45,
    marginTop: 60,
    marginLeft: 'auto',
    marginRight: 'auto'
  },
  h1Color: {
    color: '#000000'
  },
  smallInput: {
    borderColor: '#000000',
    borderWidth: 1,
    fontSize: 30,
    height: 50,
    marginLeft: 'auto',
    marginRight: 'auto',
    padding: 5,
    width: '80%'
  },
  largeInput: {
    borderColor: '#000000',
    borderWidth: 1,
    fontSize: 20,
    height: 200,
    marginLeft: 'auto',
    marginRight: 'auto',
    padding: 5,
    width: '80%'
  },
  label: {
    color: '#3976EA',
    fontSize: 20,
    marginBottom: 10,
    marginLeft: '10%',
    marginTop: 40
  },
  smallWrapper: {
    alignItems: 'center',
    alignSelf: 'center',
    flex: 0,
    flexDirection: 'row',
    height: 50,
    marginLeft: 'auto',
    marginRight: 'auto',
    marginTop: 40,
    width: '80%'
  },
  icon: {
    height: 50,
    marginRight: 15,
    width: 50
  },
  iconLabel: {
    color: '#3976EA',
    fontSize: 20
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#3976EA',
    borderRadius: 20,
    height: 40,
    justifyContent: 'center',
    marginBottom: 40,
    marginLeft: 'auto',
    marginRight: 'auto',
    marginTop: 40,
    width: '40%'
  },
  buttonLabel: {
    color: '#FFFFFF',
    fontSize: 20
  },
  CheckBox: {
    marginRight: 15
  },
  error: {
    color: 'red',
    marginLeft: 'auto',
    marginRight: 'auto',
    marginTop: 40,
    width: '80%'
  },
  addButton: {
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
    borderRadius: 4,
    height: 40,
    justifyContent: 'center',
    marginLeft: 'auto',
    marginRight: 'auto',
    marginTop: 40,
    width: '80%'
  }
});

var _default = Form;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,