8ed52030f975d100a62abfb401706710
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useNavigationBuilder;

var React = _interopRequireWildcard(require("react"));

var _reactIs = require("react-is");

var _routers = require("@react-navigation/routers");

var _BaseNavigationContainer = require("./BaseNavigationContainer");

var _NavigationRouteContext = _interopRequireDefault(require("./NavigationRouteContext"));

var _Screen = _interopRequireDefault(require("./Screen"));

var _useEventEmitter = _interopRequireDefault(require("./useEventEmitter"));

var _useRegisterNavigator = _interopRequireDefault(require("./useRegisterNavigator"));

var _useDescriptors = _interopRequireDefault(require("./useDescriptors"));

var _useNavigationHelpers = _interopRequireDefault(require("./useNavigationHelpers"));

var _useOnAction = _interopRequireDefault(require("./useOnAction"));

var _useFocusEvents = _interopRequireDefault(require("./useFocusEvents"));

var _useOnRouteFocus = _interopRequireDefault(require("./useOnRouteFocus"));

var _useChildActionListeners = _interopRequireDefault(require("./useChildActionListeners"));

var _useFocusedListeners = _interopRequireDefault(require("./useFocusedListeners"));

var _useFocusedListenersChildrenAdapter = _interopRequireDefault(require("./useFocusedListenersChildrenAdapter"));

var _types = require("./types");

var _useStateGetters = _interopRequireDefault(require("./useStateGetters"));

var _useOnGetState = _interopRequireDefault(require("./useOnGetState"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

_types.PrivateValueStore;

var isArrayEqual = function isArrayEqual(a, b) {
  return a.length === b.length && a.every(function (it, index) {
    return it === b[index];
  });
};

var getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children) {
  var configs = React.Children.toArray(children).reduce(function (acc, child) {
    if (React.isValidElement(child)) {
      if (child.type === _Screen.default) {
        acc.push(child.props);
        return acc;
      }

      if (child.type === React.Fragment) {
        acc.push.apply(acc, (0, _toConsumableArray2.default)(getRouteConfigsFromChildren(child.props.children)));
        return acc;
      }
    }

    throw new Error("A navigator can only contain 'Screen' components as its direct children (found '".concat(child.type && child.type.name ? child.type.name : String(child), "')"));
  }, []);

  if (process.env.NODE_ENV !== 'production') {
    configs.forEach(function (config) {
      var name = config.name,
          children = config.children,
          component = config.component;

      if (typeof name !== 'string' || !name) {
        throw new Error("Got an invalid name (".concat(JSON.stringify(name), ") for the screen. It must be a non-empty string."));
      }

      if (children != null || component !== undefined) {
        if (children != null && component !== undefined) {
          throw new Error("Got both 'component' and 'children' props for the screen '".concat(name, "'. You must pass only one of them."));
        }

        if (children != null && typeof children !== 'function') {
          throw new Error("Got an invalid value for 'children' prop for the screen '".concat(name, "'. It must be a function returning a React Element."));
        }

        if (component !== undefined && !(0, _reactIs.isValidElementType)(component)) {
          throw new Error("Got an invalid value for 'component' prop for the screen '".concat(name, "'. It must be a a valid React Component."));
        }

        if (typeof component === 'function' && component.name === 'component') {
          console.warn("Looks like you're passing an inline function for 'component' prop for the screen '".concat(name, "' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour."));
        }
      } else {
        throw new Error("Couldn't find a 'component' or 'children' prop for the screen '".concat(name, "'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing."));
      }
    });
  }

  return configs;
};

function useNavigationBuilder(createRouter, options) {
  var navigatorKey = (0, _useRegisterNavigator.default)();
  var route = React.useContext(_NavigationRouteContext.default);
  var previousRouteRef = React.useRef(route);
  React.useEffect(function () {
    previousRouteRef.current = route;
  }, [route]);

  var children = options.children,
      rest = _objectWithoutProperties(options, ["children"]);

  var _React$useRef = React.useRef(createRouter(_objectSpread({}, rest, {}, (route === null || route === void 0 ? void 0 : route.params) && typeof route.params.screen === 'string' ? {
    initialRouteName: route.params.screen
  } : null))),
      router = _React$useRef.current;

  var screens = getRouteConfigsFromChildren(children).reduce(function (acc, curr) {
    if (curr.name in acc) {
      throw new Error("A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '".concat(curr.name, "')"));
    }

    acc[curr.name] = curr;
    return acc;
  }, {});
  var routeNames = Object.keys(screens);
  var routeParamList = routeNames.reduce(function (acc, curr) {
    var initialParams = screens[curr].initialParams;
    var initialParamsFromParams = (route === null || route === void 0 ? void 0 : route.params) && route.params.screen === curr ? route.params.params : undefined;
    acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread({}, initialParams, {}, initialParamsFromParams) : undefined;
    return acc;
  }, {});

  if (!routeNames.length) {
    throw new Error("Couldn't find any screens for the navigator. Have you defined any screens as its children?");
  }

  var isStateValid = React.useCallback(function (state) {
    return state.type === undefined || state.type === router.type;
  }, [router.type]);
  var isStateInitialized = React.useCallback(function (state) {
    return state !== undefined && state.stale === false && isStateValid(state);
  }, [isStateValid]);

  var _React$useContext = React.useContext(_BaseNavigationContainer.NavigationStateContext),
      currentState = _React$useContext.state,
      getCurrentState = _React$useContext.getState,
      setState = _React$useContext.setState,
      setKey = _React$useContext.setKey,
      getKey = _React$useContext.getKey,
      performTransaction = _React$useContext.performTransaction;

  var previousStateRef = React.useRef();
  var initializedStateRef = React.useRef();

  if (initializedStateRef.current === undefined || currentState !== previousStateRef.current) {
    initializedStateRef.current = currentState === undefined || !isStateValid(currentState) ? router.getInitialState({
      routeNames: routeNames,
      routeParamList: routeParamList
    }) : router.getRehydratedState(currentState, {
      routeNames: routeNames,
      routeParamList: routeParamList
    });
  }

  React.useEffect(function () {
    previousStateRef.current = currentState;
  }, [currentState]);
  var state = isStateInitialized(currentState) ? currentState : initializedStateRef.current;
  var nextState = state;

  if (!isArrayEqual(state.routeNames, routeNames)) {
    nextState = router.getStateForRouteNamesChange(state, {
      routeNames: routeNames,
      routeParamList: routeParamList
    });
  }

  if (previousRouteRef.current && route && route.params && typeof route.params.screen === 'string' && route.params !== previousRouteRef.current.params) {
    var updatedState = router.getStateForAction(state, _routers.CommonActions.navigate(route.params.screen, route.params.params), {
      routeNames: routeNames,
      routeParamList: routeParamList
    });
    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {
      routeNames: routeNames,
      routeParamList: routeParamList
    }) : state;
  }

  if (state !== nextState) {
    performTransaction(function () {
      setState(nextState);
    });
  }

  state = nextState;
  React.useEffect(function () {
    setKey(navigatorKey);
    return function () {
      performTransaction(function () {
        if (getCurrentState() !== undefined && getKey() === navigatorKey) {
          setState(undefined);
        }
      });
    };
  }, []);
  var getState = React.useCallback(function () {
    var currentState = getCurrentState();
    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;
  }, [getCurrentState, isStateInitialized]);
  var emitter = (0, _useEventEmitter.default)();
  (0, _useFocusEvents.default)({
    state: state,
    emitter: emitter
  });
  React.useEffect(function () {
    emitter.emit({
      type: 'state',
      data: {
        state: state
      }
    });
  }, [emitter, state]);

  var _ref = (0, _useChildActionListeners.default)(),
      actionListeners = _ref.listeners,
      addActionListener = _ref.addListener;

  var _ref2 = (0, _useFocusedListeners.default)(),
      focusedListeners = _ref2.listeners,
      addFocusedListener = _ref2.addListener;

  var _ref3 = (0, _useStateGetters.default)(),
      getStateForRoute = _ref3.getStateForRoute,
      addStateGetter = _ref3.addStateGetter;

  var onAction = (0, _useOnAction.default)({
    router: router,
    getState: getState,
    setState: setState,
    key: route === null || route === void 0 ? void 0 : route.key,
    listeners: actionListeners,
    routerConfigOptions: {
      routeNames: routeNames,
      routeParamList: routeParamList
    }
  });
  var onRouteFocus = (0, _useOnRouteFocus.default)({
    router: router,
    key: route === null || route === void 0 ? void 0 : route.key,
    getState: getState,
    setState: setState
  });
  var navigation = (0, _useNavigationHelpers.default)({
    onAction: onAction,
    getState: getState,
    emitter: emitter,
    router: router
  });
  (0, _useFocusedListenersChildrenAdapter.default)({
    navigation: navigation,
    focusedListeners: focusedListeners
  });
  (0, _useOnGetState.default)({
    getState: getState,
    getStateForRoute: getStateForRoute
  });
  var descriptors = (0, _useDescriptors.default)({
    state: state,
    screens: screens,
    navigation: navigation,
    screenOptions: options.screenOptions,
    onAction: onAction,
    getState: getState,
    setState: setState,
    onRouteFocus: onRouteFocus,
    addActionListener: addActionListener,
    addFocusedListener: addFocusedListener,
    addStateGetter: addStateGetter,
    router: router,
    emitter: emitter
  });
  return {
    state: state,
    navigation: navigation,
    descriptors: descriptors
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,