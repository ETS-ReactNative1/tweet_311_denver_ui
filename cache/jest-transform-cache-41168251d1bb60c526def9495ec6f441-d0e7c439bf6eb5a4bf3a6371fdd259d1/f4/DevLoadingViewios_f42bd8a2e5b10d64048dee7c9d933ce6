a5708286e1387ac22859d09ba35ee170
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DevLoadingView;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var NativeDevLoadingView = _reactNative.NativeModules.DevLoadingView;
var nativeDevLoadingViewEventEmitter = new _reactNative.NativeEventEmitter(NativeDevLoadingView);

function DevLoadingView() {
  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isDevLoading = _useState2[0],
      setIsDevLoading = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isAnimating = _useState4[0],
      setIsAnimating = _useState4[1];

  var translateY = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  (0, _react.useEffect)(function () {
    function handleShowMessage(_ref) {
      var message = _ref.message;

      if (message !== 'Refreshing...') {
        return;
      }

      translateY.setValue(0);
      setIsDevLoading(true);
    }

    function handleHide() {
      setIsAnimating(true);
      setIsDevLoading(false);

      _reactNative.Animated.timing(translateY, {
        toValue: 150,
        delay: 1000,
        duration: 350,
        useNativeDriver: true
      }).start(function (_ref2) {
        var finished = _ref2.finished;

        if (finished) {
          setIsAnimating(false);
          translateY.setValue(0);
        }
      });
    }

    nativeDevLoadingViewEventEmitter.addListener('devLoadingView:showMessage', handleShowMessage);
    nativeDevLoadingViewEventEmitter.addListener('devLoadingView:hide', handleHide);
    return function cleanup() {
      nativeDevLoadingViewEventEmitter.removeListener('devLoadingView:showMessage', handleShowMessage);
      nativeDevLoadingViewEventEmitter.removeListener('devLoadingView:hide', handleHide);
    };
  }, []);

  if (isDevLoading || isAnimating) {
    return _react.default.createElement(_reactNative.Animated.View, {
      style: [styles.animatedContainer, {
        transform: [{
          translateY: translateY
        }]
      }],
      pointerEvents: "none"
    }, _react.default.createElement(_reactNative.SafeAreaView, {
      style: styles.banner
    }, _react.default.createElement(_reactNative.View, {
      style: styles.contentContainer
    }, _react.default.createElement(_reactNative.View, {
      style: {
        flexDirection: 'row'
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.text
    }, isDevLoading ? 'Refreshing...' : 'Refreshed')), _react.default.createElement(_reactNative.View, {
      style: {
        flex: 1
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.subtitle
    }, isDevLoading ? 'Using Fast Refresh' : "Don't see your changes? Reload the app")))));
  } else {
    return null;
  }
}

var styles = _reactNative.StyleSheet.create({
  animatedContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    zIndex: 42
  },
  banner: {
    flex: 1,
    overflow: 'visible',
    backgroundColor: 'rgba(0,0,0,0.75)'
  },
  contentContainer: {
    flex: 1,
    paddingTop: 10,
    paddingBottom: 5,
    alignItems: 'center',
    justifyContent: 'center',
    textAlign: 'center'
  },
  text: {
    color: '#fff',
    fontSize: 15
  },
  subtitle: {
    color: 'rgba(255,255,255,0.8)'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,