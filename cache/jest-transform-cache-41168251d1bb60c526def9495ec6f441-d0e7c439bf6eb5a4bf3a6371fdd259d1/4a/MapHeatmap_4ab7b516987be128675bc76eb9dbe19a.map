{"version":3,"sources":["MapHeatmap.js"],"names":["viewPropTypes","ViewPropTypes","View","propTypes","points","PropTypes","arrayOf","shape","latitude","number","isRequired","longitude","weight","radius","opacity","gradient","colors","string","startPoints","colorMapSize","defaultProps","strokeColor","strokeWidth","MapHeatmap","props","heatmap","setNativeProps","AIRMapHeatmap","getAirComponent","map","c","ref","React","Component","componentType","providers","google","ios","SUPPORTED","android","USES_DEFAULT_IMPLEMENTATION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAMA,IAAMA,aAAa,GAAGC,8BAAiBC,kBAAKC,SAA5C;;AAEA,IAAMA,SAAS,qBACVH,aADU;AAMbI,EAAAA,MAAM,EAAEC,mBAAUC,OAAV,CACND,mBAAUE,KAAV,CAAgB;AAIdC,IAAAA,QAAQ,EAAEH,mBAAUI,MAAV,CAAiBC,UAJb;AAKdC,IAAAA,SAAS,EAAEN,mBAAUI,MAAV,CAAiBC,UALd;AAMdE,IAAAA,MAAM,EAAEP,mBAAUI;AANJ,GAAhB,CADM,CANK;AAqBbI,EAAAA,MAAM,EAAER,mBAAUI,MArBL;AA0BbK,EAAAA,OAAO,EAAET,mBAAUI,MA1BN;AA+BbM,EAAAA,QAAQ,EAAEV,mBAAUE,KAAV,CAAgB;AAIxBS,IAAAA,MAAM,EAAEX,mBAAUC,OAAV,CAAkBD,mBAAUY,MAA5B,CAJgB;AASxBC,IAAAA,WAAW,EAAEb,mBAAUC,OAAV,CAAkBD,mBAAUI,MAA5B,CATW;AAcxBU,IAAAA,YAAY,EAAEd,mBAAUI;AAdA,GAAhB;AA/BG,EAAf;;AAiDA,IAAMW,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,MADM;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;;IAKMC,U;;;;;;;;;;mCACWC,K,EAAO;AACpB,WAAKC,OAAL,CAAaC,cAAb,CAA4BF,KAA5B;AACD;;;6BAEQ;AAAA;;AACP,UAAMG,aAAa,GAAG,KAAKC,eAAL,EAAtB;AACA,UAAIb,QAAJ;;AACA,UAAI,KAAKS,KAAL,CAAWT,QAAf,EAAyB;AACvBA,QAAAA,QAAQ,GAAG,uBAAc,EAAd,EAAkB,KAAKS,KAAL,CAAWT,QAA7B,CAAX;AACAA,QAAAA,QAAQ,CAACC,MAAT,GAAkBD,QAAQ,CAACC,MAAT,CAAgBa,GAAhB,CAAoB,UAAAC,CAAC;AAAA,iBAAI,+BAAaA,CAAb,CAAJ;AAAA,SAArB,CAAlB;AACD;;AACD,aACE,6BAAC,aAAD,6BACM,KAAKN,KADX;AAEE,QAAA,QAAQ,EAAET,QAFZ;AAGE,QAAA,GAAG,EAAE,aAAAgB,IAAG,EAAI;AACV,UAAA,KAAI,CAACN,OAAL,GAAeM,IAAf;AACD;AALH,SADF;AASD;;;EArBsBC,eAAMC,S;;AAwB/BV,UAAU,CAACpB,SAAX,GAAuBA,SAAvB;AACAoB,UAAU,CAACH,YAAX,GAA0BA,YAA1B;;eAEe,mCAAqBG,UAArB,EAAiC;AAC9CW,EAAAA,aAAa,EAAE,SAD+B;AAE9CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEC,+BADC;AAENC,MAAAA,OAAO,EAAEC;AAFH;AADC;AAFmC,CAAjC,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ViewPropTypes, View, processColor } from 'react-native';\nimport decorateMapComponent, {\n  SUPPORTED,\n  USES_DEFAULT_IMPLEMENTATION,\n} from './decorateMapComponent';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  /**\n   * Array of heatmap entries to apply towards density.\n   */\n  points: PropTypes.arrayOf(\n    PropTypes.shape({\n      /**\n       * Latitude/Longitude coordinates\n       */\n      latitude: PropTypes.number.isRequired,\n      longitude: PropTypes.number.isRequired,\n      weight: PropTypes.number,\n    })\n  ),\n\n  /**\n   * The radius of the heatmap points in pixels, between 10 and 50\n   * (default 20).\n   */\n  radius: PropTypes.number,\n\n  /**\n   * The opacity of the heatmap (default 0.7).\n   */\n  opacity: PropTypes.number,\n\n  /**\n   * Heatmap gradient configuration.\n   */\n  gradient: PropTypes.shape({\n    /**\n     * Colors (one or more) to use for gradient.\n     */\n    colors: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * Array of floating point values from 0 to 1 representing\n     * where each color starts.\n     */\n    startPoints: PropTypes.arrayOf(PropTypes.number),\n    /**\n     * Resolution of color map -- number corresponding to the\n     * number of steps colors are interpolated into (default 256).\n     */\n    colorMapSize: PropTypes.number,\n  }),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n};\n\nclass MapHeatmap extends React.Component {\n  setNativeProps(props) {\n    this.heatmap.setNativeProps(props);\n  }\n\n  render() {\n    const AIRMapHeatmap = this.getAirComponent();\n    let gradient;\n    if (this.props.gradient) {\n      gradient = Object.assign({}, this.props.gradient);\n      gradient.colors = gradient.colors.map(c => processColor(c));\n    }\n    return (\n      <AIRMapHeatmap\n        {...this.props}\n        gradient={gradient}\n        ref={ref => {\n          this.heatmap = ref;\n        }}\n      />\n    );\n  }\n}\n\nMapHeatmap.propTypes = propTypes;\nMapHeatmap.defaultProps = defaultProps;\n\nexport default decorateMapComponent(MapHeatmap, {\n  componentType: 'Heatmap',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]}