8463f635c2ef77fbe84c5107e6c3bc1e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _NativeHeadlessJsTaskSupport = _interopRequireDefault(require("./NativeHeadlessJsTaskSupport"));

var _HeadlessJsTaskError = _interopRequireDefault(require("./HeadlessJsTaskError"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var BatchedBridge = require("../BatchedBridge/BatchedBridge");

var BugReporting = require("../BugReporting/BugReporting");

var ReactNative = require("../Renderer/shims/ReactNative");

var SceneTracker = require("../Utilities/SceneTracker");

var infoLog = require("../Utilities/infoLog");

var invariant = require('invariant');

var renderApplication = require("./renderApplication");

var createPerformanceLogger = require("../Utilities/createPerformanceLogger");

var runnables = {};
var runCount = 1;
var sections = {};
var taskProviders = new Map();
var taskCancelProviders = new Map();

var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
  return component();
};

var wrapperComponentProvider;
var showFabricIndicator = false;
var AppRegistry = {
  setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
    wrapperComponentProvider = provider;
  },
  enableFabricIndicator: function enableFabricIndicator(enabled) {
    showFabricIndicator = enabled;
  },
  registerConfig: function registerConfig(config) {
    config.forEach(function (appConfig) {
      if (appConfig.run) {
        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
      } else {
        invariant(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
        AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
      }
    });
  },
  registerComponent: function registerComponent(appKey, componentProvider, section) {
    var scopedPerformanceLogger = createPerformanceLogger();
    runnables[appKey] = {
      componentProvider: componentProvider,
      run: function run(appParameters) {
        renderApplication(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.fabric, showFabricIndicator, scopedPerformanceLogger);
      }
    };

    if (section) {
      sections[appKey] = runnables[appKey];
    }

    return appKey;
  },
  registerRunnable: function registerRunnable(appKey, run) {
    runnables[appKey] = {
      run: run
    };
    return appKey;
  },
  registerSection: function registerSection(appKey, component) {
    AppRegistry.registerComponent(appKey, component, true);
  },
  getAppKeys: function getAppKeys() {
    return Object.keys(runnables);
  },
  getSectionKeys: function getSectionKeys() {
    return Object.keys(sections);
  },
  getSections: function getSections() {
    return _objectSpread({}, sections);
  },
  getRunnable: function getRunnable(appKey) {
    return runnables[appKey];
  },
  getRegistry: function getRegistry() {
    return {
      sections: AppRegistry.getSectionKeys(),
      runnables: _objectSpread({}, runnables)
    };
  },
  setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
    componentProviderInstrumentationHook = hook;
  },
  runApplication: function runApplication(appKey, appParameters) {
    var msg = 'Running "' + appKey + '" with ' + JSON.stringify(appParameters);
    infoLog(msg);
    BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
      return msg;
    });
    invariant(runnables[appKey] && runnables[appKey].run, "\"" + appKey + "\" has not been registered. This can happen if:\n" + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
    SceneTracker.setActiveScene({
      name: appKey
    });
    runnables[appKey].run(appParameters);
  },
  unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
    ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
  },
  registerHeadlessTask: function registerHeadlessTask(taskKey, taskProvider) {
    this.registerCancellableHeadlessTask(taskKey, taskProvider, function () {
      return function () {};
    });
  },
  registerCancellableHeadlessTask: function registerCancellableHeadlessTask(taskKey, taskProvider, taskCancelProvider) {
    if (taskProviders.has(taskKey)) {
      console.warn("registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '" + taskKey + "'");
    }

    taskProviders.set(taskKey, taskProvider);
    taskCancelProviders.set(taskKey, taskCancelProvider);
  },
  startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
    var taskProvider = taskProviders.get(taskKey);

    if (!taskProvider) {
      console.warn("No task registered for key " + taskKey);

      if (_NativeHeadlessJsTaskSupport.default) {
        _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
      }

      return;
    }

    taskProvider()(data).then(function () {
      if (_NativeHeadlessJsTaskSupport.default) {
        _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
      }
    }).catch(function (reason) {
      console.error(reason);

      if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {
        _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then(function (retryPosted) {
          if (!retryPosted) {
            _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
          }
        });
      }
    });
  },
  cancelHeadlessTask: function cancelHeadlessTask(taskId, taskKey) {
    var taskCancelProvider = taskCancelProviders.get(taskKey);

    if (!taskCancelProvider) {
      throw new Error("No task canceller registered for key '" + taskKey + "'");
    }

    taskCancelProvider()();
  }
};
BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);
module.exports = AppRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,