29ef0362028102041ca7d45b5f78b02b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var Platform = require("../../Utilities/Platform");

var React = require('react');

var ScrollView = require("../../Components/ScrollView/ScrollView");

var StyleSheet = require("../../StyleSheet/StyleSheet");

var Text = require("../../Text/Text");

var View = require("../../Components/View/View");

var YellowBoxCategory = require("../Data/YellowBoxCategory");

var YellowBoxInspectorFooter = require("./YellowBoxInspectorFooter");

var YellowBoxInspectorHeader = require("./YellowBoxInspectorHeader");

var YellowBoxInspectorSourceMapStatus = require("./YellowBoxInspectorSourceMapStatus");

var YellowBoxInspectorStackFrame = require("./YellowBoxInspectorStackFrame");

var YellowBoxStyle = require("./YellowBoxStyle");

var openFileInEditor = require("../../Core/Devtools/openFileInEditor");

var YellowBoxInspector = function (_React$Component) {
  (0, _inherits2.default)(YellowBoxInspector, _React$Component);

  function YellowBoxInspector() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, YellowBoxInspector);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(YellowBoxInspector)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      selectedIndex: 0
    };

    _this._handleRetrySymbolication = function () {
      _this._cancelSymbolication();

      _this.forceUpdate(function () {
        var warning = _this.props.warnings[_this.state.selectedIndex];
        _this._symbolication = warning.retrySymbolicate(function () {
          _this.forceUpdate();
        });
      });
    };

    _this._handleSelectIndex = function (selectedIndex) {
      _this.setState({
        selectedIndex: selectedIndex
      });
    };

    return _this;
  }

  (0, _createClass2.default)(YellowBoxInspector, [{
    key: "render",
    value: function render() {
      var warnings = this.props.warnings;
      var selectedIndex = this.state.selectedIndex;
      var warning = warnings[selectedIndex];
      return React.createElement(View, {
        style: styles.root
      }, React.createElement(YellowBoxInspectorHeader, {
        onSelectIndex: this._handleSelectIndex,
        selectedIndex: selectedIndex,
        warnings: warnings
      }), React.createElement(ScrollView, {
        contentContainerStyle: styles.bodyContent,
        key: selectedIndex,
        style: styles.body
      }, React.createElement(View, null, React.createElement(View, {
        style: styles.bodyHeading
      }, React.createElement(Text, {
        style: styles.bodyHeadingText
      }, "Warning")), React.createElement(Text, {
        style: styles.bodyText
      }, YellowBoxCategory.render(warning.message, styles.substitutionText))), React.createElement(View, {
        style: styles.bodySection
      }, React.createElement(View, {
        style: styles.bodyHeading
      }, React.createElement(Text, {
        style: styles.bodyHeadingText
      }, "Stack"), React.createElement(YellowBoxInspectorSourceMapStatus, {
        onPress: warning.symbolicated.status === 'FAILED' ? this._handleRetrySymbolication : null,
        status: warning.symbolicated.status
      })), warning.getAvailableStack().map(function (frame, index) {
        var file = frame.file,
            lineNumber = frame.lineNumber;
        return React.createElement(YellowBoxInspectorStackFrame, {
          key: index,
          frame: frame,
          onPress: warning.symbolicated.status === 'COMPLETE' && file != null && lineNumber != null ? function () {
            openFileInEditor(file, lineNumber);
          } : null
        });
      }))), React.createElement(YellowBoxInspectorFooter, {
        onDismiss: this.props.onDismiss,
        onMinimize: this.props.onMinimize
      }));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._handleSymbolication();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevProps.warnings !== this.props.warnings || prevState.selectedIndex !== this.state.selectedIndex) {
        this._cancelSymbolication();

        this._handleSymbolication();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._cancelSymbolication();
    }
  }, {
    key: "_handleSymbolication",
    value: function _handleSymbolication() {
      var _this2 = this;

      var warning = this.props.warnings[this.state.selectedIndex];

      if (warning.symbolicated.status !== 'COMPLETE') {
        this._symbolication = warning.symbolicate(function () {
          _this2.forceUpdate();
        });
      }
    }
  }, {
    key: "_cancelSymbolication",
    value: function _cancelSymbolication() {
      if (this._symbolication != null) {
        this._symbolication.abort();

        this._symbolication = null;
      }
    }
  }]);
  return YellowBoxInspector;
}(React.Component);

var styles = StyleSheet.create({
  root: {
    elevation: Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined,
    height: '100%'
  },
  body: {
    backgroundColor: YellowBoxStyle.getBackgroundColor(0.95),
    borderBottomColor: YellowBoxStyle.getDividerColor(0.95),
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderTopColor: YellowBoxStyle.getDividerColor(0.95),
    borderTopWidth: StyleSheet.hairlineWidth,
    flex: 1
  },
  bodyContent: {
    paddingVertical: 12
  },
  bodyHeading: {
    alignItems: 'center',
    flexDirection: 'row',
    marginBottom: 6,
    paddingHorizontal: 12
  },
  bodyHeadingText: {
    color: YellowBoxStyle.getTextColor(1),
    flex: 1,
    fontSize: 20,
    fontWeight: '600',
    includeFontPadding: false,
    lineHeight: 28
  },
  bodyText: {
    color: YellowBoxStyle.getTextColor(1),
    fontSize: 14,
    includeFontPadding: false,
    lineHeight: 18,
    paddingHorizontal: 12
  },
  substitutionText: {
    color: YellowBoxStyle.getTextColor(0.6)
  },
  bodySection: {
    marginTop: 20
  }
});
module.exports = YellowBoxInspector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,