8da9d37f647b8ef912212c55c894ae13
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createHandler;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _areEqual = _interopRequireDefault(require("fbjs/lib/areEqual"));

var _RNGestureHandlerModule = _interopRequireDefault(require("./RNGestureHandlerModule"));

var _State = _interopRequireDefault(require("./State"));

var _stateToPropMappings;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function findNodeHandle(node) {
  if (_reactNative.Platform.OS === 'web') return node;
  return (0, _reactNative.findNodeHandle)(node);
}

var _NativeModules$UIMana = _reactNative.NativeModules.UIManager,
    UIManager = _NativeModules$UIMana === void 0 ? {} : _NativeModules$UIMana;
var customGHEventsConfig = {
  onGestureHandlerEvent: {
    registrationName: 'onGestureHandlerEvent'
  },
  onGestureHandlerStateChange: {
    registrationName: 'onGestureHandlerStateChange'
  }
};
UIManager.genericDirectEventTypes = _objectSpread({}, UIManager.genericDirectEventTypes, {}, customGHEventsConfig);

if (UIManager.getConstants) {
  UIManager.getConstants().genericDirectEventTypes = _objectSpread({}, UIManager.getConstants().genericDirectEventTypes, {}, customGHEventsConfig);
}

var _UIManager$setJSRespo = UIManager.setJSResponder,
    oldSetJSResponder = _UIManager$setJSRespo === void 0 ? function () {} : _UIManager$setJSRespo,
    _UIManager$clearJSRes = UIManager.clearJSResponder,
    oldClearJSResponder = _UIManager$clearJSRes === void 0 ? function () {} : _UIManager$clearJSRes;

UIManager.setJSResponder = function (tag, blockNativeResponder) {
  _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);

  oldSetJSResponder(tag, blockNativeResponder);
};

UIManager.clearJSResponder = function () {
  _RNGestureHandlerModule.default.handleClearJSResponder();

  oldClearJSResponder();
};

var handlerTag = 1;
var handlerIDToTag = {};

function isConfigParam(param, name) {
  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';
}

function filterConfig(props, validProps) {
  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var res = _objectSpread({}, defaults);

  Object.keys(validProps).forEach(function (key) {
    var value = props[key];

    if (isConfigParam(value, key)) {
      var _value = props[key];

      if (key === 'simultaneousHandlers' || key === 'waitFor') {
        _value = transformIntoHandlerTags(props[key]);
      } else if (key === 'hitSlop') {
        if (typeof _value !== 'object') {
          _value = {
            top: _value,
            left: _value,
            bottom: _value,
            right: _value
          };
        }
      }

      res[key] = _value;
    }
  });
  return res;
}

function transformIntoHandlerTags(handlerIDs) {
  if (!Array.isArray(handlerIDs)) {
    handlerIDs = [handlerIDs];
  }

  if (_reactNative.Platform.OS === 'web') {
    return handlerIDs.map(function (_ref) {
      var current = _ref.current;
      return current;
    }).filter(function (handle) {
      return handle;
    });
  }

  return handlerIDs.map(function (handlerID) {
    return handlerIDToTag[handlerID] || handlerID.current && handlerID.current._handlerTag || -1;
  }).filter(function (handlerTag) {
    return handlerTag > 0;
  });
}

function hasUnresolvedRefs(props) {
  var extract = function extract(refs) {
    if (!Array.isArray(refs)) {
      return refs && refs.current === null;
    }

    return refs.some(function (r) {
      return r && r.current === null;
    });
  };

  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);
}

var stateToPropMappings = (_stateToPropMappings = {}, (0, _defineProperty2.default)(_stateToPropMappings, _State.default.BEGAN, 'onBegan'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.FAILED, 'onFailed'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.CANCELLED, 'onCancelled'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.ACTIVE, 'onActivated'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.END, 'onEnded'), _stateToPropMappings);

function createHandler(handlerName) {
  var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var transformProps = arguments.length > 3 ? arguments[3] : undefined;
  var customNativeProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  var Handler = function (_React$Component) {
    (0, _inherits2.default)(Handler, _React$Component);

    function Handler(props) {
      var _this;

      (0, _classCallCheck2.default)(this, Handler);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Handler).call(this, props));

      _this._onGestureHandlerEvent = function (event) {
        if (event.nativeEvent.handlerTag === _this._handlerTag) {
          _this.props.onGestureEvent && _this.props.onGestureEvent(event);
        } else {
          _this.props.onGestureHandlerEvent && _this.props.onGestureHandlerEvent(event);
        }
      };

      _this._onGestureHandlerStateChange = function (event) {
        if (event.nativeEvent.handlerTag === _this._handlerTag) {
          _this.props.onHandlerStateChange && _this.props.onHandlerStateChange(event);
          var stateEventName = stateToPropMappings[event.nativeEvent.state];

          if (typeof _this.props[stateEventName] === 'function') {
            _this.props[stateEventName](event);
          }
        } else {
          _this.props.onGestureHandlerStateChange && _this.props.onGestureHandlerStateChange(event);
        }
      };

      _this._refHandler = function (node) {
        _this._viewNode = node;

        var child = _react.default.Children.only(_this.props.children);

        var ref = child.ref;

        if (ref !== null) {
          if (typeof ref === 'function') {
            ref(node);
          } else {
            ref.current = node;
          }
        }
      };

      _this._createGestureHandler = function (newConfig) {
        _this._config = newConfig;

        _RNGestureHandlerModule.default.createGestureHandler(handlerName, _this._handlerTag, newConfig);
      };

      _this._attachGestureHandler = function (newViewTag) {
        _this._viewTag = newViewTag;

        _RNGestureHandlerModule.default.attachGestureHandler(_this._handlerTag, newViewTag);
      };

      _this._updateGestureHandler = function (newConfig) {
        _this._config = newConfig;

        _RNGestureHandlerModule.default.updateGestureHandler(_this._handlerTag, newConfig);
      };

      _this._handlerTag = handlerTag++;
      _this._config = {};

      if (props.id) {
        if (handlerIDToTag[props.id] !== undefined) {
          throw new Error("Handler with ID \"" + props.id + "\" already registered");
        }

        handlerIDToTag[props.id] = _this._handlerTag;
      }

      return _this;
    }

    (0, _createClass2.default)(Handler, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _RNGestureHandlerModule.default.dropGestureHandler(this._handlerTag);

        if (this._updateEnqueued) {
          clearImmediate(this._updateEnqueued);
        }

        if (this.props.id) {
          delete handlerIDToTag[this.props.id];
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (hasUnresolvedRefs(this.props)) {
          this._updateEnqueued = setImmediate(function () {
            _this2._updateEnqueued = null;

            _this2._update();
          });
        }

        this._createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, _objectSpread({}, this.constructor.propTypes, {}, customNativeProps), config));

        this._attachGestureHandler(findNodeHandle(this._viewNode));
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var viewTag = findNodeHandle(this._viewNode);

        if (this._viewTag !== viewTag) {
          this._attachGestureHandler(viewTag);
        }

        this._update();
      }
    }, {
      key: "_update",
      value: function _update() {
        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, _objectSpread({}, this.constructor.propTypes, {}, customNativeProps), config);

        if (!(0, _areEqual.default)(this._config, newConfig)) {
          this._updateGestureHandler(newConfig);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(updates) {
        var mergedProps = _objectSpread({}, this.props, {}, updates);

        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, _objectSpread({}, this.constructor.propTypes, {}, customNativeProps), config);

        this._updateGestureHandler(newConfig);
      }
    }, {
      key: "render",
      value: function render() {
        var gestureEventHandler = this._onGestureHandlerEvent;
        var _this$props = this.props,
            onGestureEvent = _this$props.onGestureEvent,
            onGestureHandlerEvent = _this$props.onGestureHandlerEvent;

        if (onGestureEvent && typeof onGestureEvent !== 'function') {
          if (onGestureHandlerEvent) {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }

          gestureEventHandler = this.props.onGestureEvent;
        } else {
          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
        }

        var gestureStateEventHandler = this._onGestureHandlerStateChange;
        var _this$props2 = this.props,
            onHandlerStateChange = _this$props2.onHandlerStateChange,
            onGestureHandlerStateChange = _this$props2.onGestureHandlerStateChange;

        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {
          if (onGestureHandlerStateChange) {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }

          gestureStateEventHandler = this.props.onHandlerStateChange;
        } else {
          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
        }

        var child = _react.default.Children.only(this.props.children);

        var grandChildren = child.props.children;

        if (_reactNative.Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {
          grandChildren = _react.default.Children.toArray(grandChildren);
          grandChildren.push(_reactNative.Touchable.renderDebugView({
            color: 'mediumspringgreen',
            hitSlop: child.props.hitSlop
          }));
        }

        return _react.default.cloneElement(child, {
          ref: this._refHandler,
          collapsable: false,
          onGestureHandlerEvent: gestureEventHandler,
          onGestureHandlerStateChange: gestureStateEventHandler
        }, grandChildren);
      }
    }]);
    return Handler;
  }(_react.default.Component);

  Handler.displayName = handlerName;
  Handler.propTypes = propTypes;
  return Handler;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,