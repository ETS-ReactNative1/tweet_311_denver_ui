{"version":3,"sources":["useLinking.native.tsx"],"names":["isUsingLinking","getStateFromPath","getStateFromPathDefault","React","prefixesRef","configRef","getStateFromPathRef","extractPathFromURL","url","getInitialState","Linking","path","listener","navigation","ref","state","action"],"mappings":";;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAIA,cAAc,GAAlB,KAAA;;AAEe,SAAA,UAAA,CAAA,GAAA,EAAA,IAAA,EAOb;AAAA,MALA,QAKA,GAAA,IAAA,CALA,QAKA;AAAA,MALA,MAKA,GAAA,IAAA,CALA,MAKA;AAAA,8BAAA,IAAA,CAFEC,gBAEF;AAAA,MAFEA,gBAEF,sCAFqBC,KAAAA,CAAAA,gBAErB;AACAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAA,cAAA,EAAoB;AAClB,YAAM,IAAA,KAAA,CAAN,gKAAM,CAAN;AADF,KAAA,MAIO;AACLH,MAAAA,cAAc,GAAdA,IAAAA;AACD;;AAED,WAAO,YAAM;AACXA,MAAAA,cAAc,GAAdA,KAAAA;AADF,KAAA;AAVF,GACAG;AAiBA,MAAMC,WAAW,GAAGD,KAAK,CAALA,MAAAA,CAApB,QAAoBA,CAApB;AACA,MAAME,SAAS,GAAGF,KAAK,CAALA,MAAAA,CAAlB,MAAkBA,CAAlB;AACA,MAAMG,mBAAmB,GAAGH,KAAK,CAALA,MAAAA,CAA5B,gBAA4BA,CAA5B;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBC,IAAAA,WAAW,CAAXA,OAAAA,GAAAA,QAAAA;AACAC,IAAAA,SAAS,CAATA,OAAAA,GAAAA,MAAAA;AACAC,IAAAA,mBAAmB,CAAnBA,OAAAA,GAAAA,gBAAAA;AAHFH,GAAAA,EAIG,CAAA,MAAA,EAAA,gBAAA,EAJHA,QAIG,CAJHA;AAMA,MAAMI,kBAAkB,GAAG,KAAK,CAAL,WAAA,CAAmBC,UAAAA,GAAD,EAAiB;AAC5D,yBAAqBJ,WAAW,CAAhC,OAAA,gKAA0C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAA1C,OAA0C;;AACxC,UAAII,GAAG,CAAHA,UAAAA,CAAJ,OAAIA,CAAJ,EAA4B;AAC1B,eAAOA,GAAG,CAAHA,OAAAA,CAAAA,OAAAA,EAAP,EAAOA,CAAP;AACD;AACF;;AAED,WAAA,SAAA;AAPyB,GAAA,EAA3B,EAA2B,CAA3B;AAUA,MAAMC,eAAe,GAAG,KAAK,CAAL,WAAA,CAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACtBC,YAAAA,CAAAA,OAAAA,CAAlB,aAAkBA,EADsB;;AAAA;AAClCF,YAAAA,GADkC;AAElCG,YAAAA,IAFkC,GAE3BH,GAAG,GAAGD,kBAAkB,CAArB,GAAqB,CAArB,GAAhB,IAFwC;;AAAA,iBAIxC,IAJwC;AAAA;AAAA;AAAA;;AAAA,6CAK/BD,mBAAmB,CAAnBA,OAAAA,CAAAA,IAAAA,EAAkCD,SAAS,CAAlD,OAAOC,CAL+B;;AAAA;AAAA,6CAOtC,SAPsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB,EASrB,CATH,kBASG,CATqB,CAAxB;AAWAH,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMS,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAA8B;AAAA,UAA3BJ,GAA2B,GAAA,KAAA,CAA3BA,GAA2B;AAC7C,UAAMG,IAAI,GAAGJ,kBAAkB,CAA/B,GAA+B,CAA/B;AACA,UAAMM,UAAU,GAAGC,GAAG,CAAtB,OAAA;;AAEA,UAAID,UAAU,IAAd,IAAA,EAAwB;AACtB,YAAME,KAAK,GAAGT,mBAAmB,CAAnBA,OAAAA,CAAAA,IAAAA,EAAkCD,SAAS,CAAzD,OAAcC,CAAd;;AAEA,YAAA,KAAA,EAAW;AACT,cAAMU,MAAM,GAAG,CAAA,GAAA,KAAA,CAAA,kBAAA,EAAf,KAAe,CAAf;;AAEA,cAAIA,MAAM,KAAV,SAAA,EAA0B;AACxBH,YAAAA,UAAU,CAAVA,QAAAA,CAAAA,MAAAA;AADF,WAAA,MAEO;AACLA,YAAAA,UAAU,CAAVA,SAAAA,CAAAA,KAAAA;AACD;AACF;AACF;AAhBH,KAAA;;AAmBAH,IAAAA,YAAAA,CAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,KAAAA,EAAAA,QAAAA;;AAEA,WAAO;AAAA,aAAMA,YAAAA,CAAAA,OAAAA,CAAAA,mBAAAA,CAAAA,KAAAA,EAAb,QAAaA,CAAN;AAAA,KAAP;AAtBFP,GAAAA,EAuBG,CAAA,kBAAA,EAvBHA,GAuBG,CAvBHA;AAyBA,SAAO;AACLM,IAAAA,eAAAA,EAAAA;AADK,GAAP;AAGD","sourcesContent":["import * as React from 'react';\nimport { Linking } from 'react-native';\nimport {\n  getActionFromState,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport { LinkingOptions } from './types';\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    prefixes,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (isUsingLinking) {\n      throw new Error(\n        \"Looks like you are using 'useLinking' in multiple components. This is likely an error since deep links should only be handled in one place to avoid conflicts.\"\n      );\n    } else {\n      isUsingLinking = true;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const prefixesRef = React.useRef(prefixes);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n\n  React.useEffect(() => {\n    prefixesRef.current = prefixes;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n  }, [config, getStateFromPath, prefixes]);\n\n  const extractPathFromURL = React.useCallback((url: string) => {\n    for (const prefix of prefixesRef.current) {\n      if (url.startsWith(prefix)) {\n        return url.replace(prefix, '');\n      }\n    }\n\n    return undefined;\n  }, []);\n\n  const getInitialState = React.useCallback(async () => {\n    const url = await Linking.getInitialURL();\n    const path = url ? extractPathFromURL(url) : null;\n\n    if (path) {\n      return getStateFromPathRef.current(path, configRef.current);\n    } else {\n      return undefined;\n    }\n  }, [extractPathFromURL]);\n\n  React.useEffect(() => {\n    const listener = ({ url }: { url: string }) => {\n      const path = extractPathFromURL(url);\n      const navigation = ref.current;\n\n      if (navigation && path) {\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        if (state) {\n          const action = getActionFromState(state);\n\n          if (action !== undefined) {\n            navigation.dispatch(action);\n          } else {\n            navigation.resetRoot(state);\n          }\n        }\n      }\n    };\n\n    Linking.addEventListener('url', listener);\n\n    return () => Linking.removeEventListener('url', listener);\n  }, [extractPathFromURL, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"]}