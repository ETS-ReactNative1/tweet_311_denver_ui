015de6045ebb7f36673477436ec9987a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLinking;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _core = require("@react-navigation/core");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var isUsingLinking = false;

function useLinking(ref, _ref) {
  var prefixes = _ref.prefixes,
      config = _ref.config,
      _ref$getStateFromPath = _ref.getStateFromPath,
      getStateFromPath = _ref$getStateFromPath === void 0 ? _core.getStateFromPath : _ref$getStateFromPath;
  React.useEffect(function () {
    if (isUsingLinking) {
      throw new Error("Looks like you are using 'useLinking' in multiple components. This is likely an error since deep links should only be handled in one place to avoid conflicts.");
    } else {
      isUsingLinking = true;
    }

    return function () {
      isUsingLinking = false;
    };
  });
  var prefixesRef = React.useRef(prefixes);
  var configRef = React.useRef(config);
  var getStateFromPathRef = React.useRef(getStateFromPath);
  React.useEffect(function () {
    prefixesRef.current = prefixes;
    configRef.current = config;
    getStateFromPathRef.current = getStateFromPath;
  }, [config, getStateFromPath, prefixes]);
  var extractPathFromURL = React.useCallback(function (url) {
    for (var _iterator = prefixesRef.current, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref3;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref3 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref3 = _i.value;
      }

      var _prefix = _ref3;

      if (url.startsWith(_prefix)) {
        return url.replace(_prefix, '');
      }
    }

    return undefined;
  }, []);
  var getInitialState = React.useCallback(function _callee() {
    var url, path;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(_reactNative.Linking.getInitialURL());

          case 2:
            url = _context.sent;
            path = url ? extractPathFromURL(url) : null;

            if (!path) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", getStateFromPathRef.current(path, configRef.current));

          case 8:
            return _context.abrupt("return", undefined);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    });
  }, [extractPathFromURL]);
  React.useEffect(function () {
    var listener = function listener(_ref2) {
      var url = _ref2.url;
      var path = extractPathFromURL(url);
      var navigation = ref.current;

      if (navigation && path) {
        var state = getStateFromPathRef.current(path, configRef.current);

        if (state) {
          var action = (0, _core.getActionFromState)(state);

          if (action !== undefined) {
            navigation.dispatch(action);
          } else {
            navigation.resetRoot(state);
          }
        }
      }
    };

    _reactNative.Linking.addEventListener('url', listener);

    return function () {
      return _reactNative.Linking.removeEventListener('url', listener);
    };
  }, [extractPathFromURL, ref]);
  return {
    getInitialState: getInitialState
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZUxpbmtpbmcubmF0aXZlLnRzeCJdLCJuYW1lcyI6WyJpc1VzaW5nTGlua2luZyIsImdldFN0YXRlRnJvbVBhdGgiLCJnZXRTdGF0ZUZyb21QYXRoRGVmYXVsdCIsIlJlYWN0IiwicHJlZml4ZXNSZWYiLCJjb25maWdSZWYiLCJnZXRTdGF0ZUZyb21QYXRoUmVmIiwiZXh0cmFjdFBhdGhGcm9tVVJMIiwidXJsIiwiZ2V0SW5pdGlhbFN0YXRlIiwiTGlua2luZyIsInBhdGgiLCJsaXN0ZW5lciIsIm5hdmlnYXRpb24iLCJyZWYiLCJzdGF0ZSIsImFjdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxHQUFBLE9BQUEsQ0FBQSx3QkFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQSxJQUFJQSxjQUFjLEdBQWxCLEtBQUE7O0FBRWUsU0FBQSxVQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsRUFPYjtBQUFBLE1BTEEsUUFLQSxHQUFBLElBQUEsQ0FMQSxRQUtBO0FBQUEsTUFMQSxNQUtBLEdBQUEsSUFBQSxDQUxBLE1BS0E7QUFBQSw4QkFBQSxJQUFBLENBRkVDLGdCQUVGO0FBQUEsTUFGRUEsZ0JBRUYsc0NBRnFCQyxLQUFBQSxDQUFBQSxnQkFFckI7QUFDQUMsRUFBQUEsS0FBSyxDQUFMQSxTQUFBQSxDQUFnQixZQUFNO0FBQ3BCLFFBQUEsY0FBQSxFQUFvQjtBQUNsQixZQUFNLElBQUEsS0FBQSxDQUFOLGdLQUFNLENBQU47QUFERixLQUFBLE1BSU87QUFDTEgsTUFBQUEsY0FBYyxHQUFkQSxJQUFBQTtBQUNEOztBQUVELFdBQU8sWUFBTTtBQUNYQSxNQUFBQSxjQUFjLEdBQWRBLEtB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QUEsS0FBQUEsRUFBQUEsUUFBQUE7O0FBRUEsV0FBTztBQUFBLGFBQU1BLFlBQUFBLENBQUFBLE9BQUFBLENBQUFBLG1CQUFBQSxDQUFBQSxLQUFBQSxFQUFiLFFBQWFBLENBQU47QUFBQSxLQUFQO0FBdEJGUCxHQUFBQSxFQXVCRyxDQUFBLGtCQUFBLEVBdkJIQSxHQXVCRyxDQXZCSEE7QUF5QkEsU0FBTztBQUNMTSxJQUFBQSxlQUFBQSxFQUFBQTtBQURLLEdBQVA7QUFHRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmtpbmcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHtcbiAgZ2V0QWN0aW9uRnJvbVN0YXRlLFxuICBnZXRTdGF0ZUZyb21QYXRoIGFzIGdldFN0YXRlRnJvbVBhdGhEZWZhdWx0LFxuICBOYXZpZ2F0aW9uQ29udGFpbmVyUmVmLFxufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9jb3JlJztcbmltcG9ydCB7IExpbmtpbmdPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbmxldCBpc1VzaW5nTGlua2luZyA9IGZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VMaW5raW5nKFxuICByZWY6IFJlYWN0LlJlZk9iamVjdDxOYXZpZ2F0aW9uQ29udGFpbmVyUmVmPixcbiAge1xuICAgIHByZWZpeGVzLFxuICAgIGNvbmZpZyxcbiAgICBnZXRTdGF0ZUZyb21QYXRoID0gZ2V0U3RhdGVGcm9tUGF0aERlZmF1bHQsXG4gIH06IExpbmtpbmdPcHRpb25zXG4pIHtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNVc2luZ0xpbmtpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJMb29rcyBsaWtlIHlvdSBhcmUgdXNpbmcgJ3VzZUxpbmtpbmcnIGluIG11bHRpcGxlIGNvbXBvbmVudHMuIFRoaXMgaXMgbGlrZWx5IGFuIGVycm9yIHNpbmNlIGRlZXAgbGlua3Mgc2hvdWxkIG9ubHkgYmUgaGFuZGxlZCBpbiBvbmUgcGxhY2UgdG8gYXZvaWQgY29uZmxpY3RzLlwiXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc1VzaW5nTGlua2luZyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlzVXNpbmdMaW5raW5nID0gZmFsc2U7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gV2Ugc3RvcmUgdGhlc2Ugb3B0aW9ucyBpbiByZWYgdG8gYXZvaWQgcmUtY3JlYXRpbmcgZ2V0SW5pdGlhbFN0YXRlIGFuZCByZS1zdWJzY3JpYmluZyBsaXN0ZW5lcnNcbiAgLy8gVGhpcyBsZXRzIHVzZXIgYXZvaWQgd3JhcHBpbmcgdGhlIGl0ZW1zIGluIGBSZWFjdC51c2VDYWxsYmFja2Agb3IgYFJlYWN0LnVzZU1lbW9gXG4gIC8vIE5vdCByZS1jcmVhdGluZyBgZ2V0SW5pdGlhbFN0YXRlYCBpcyBpbXBvcnRhbnQgY296IGl0IG1ha2VzIGl0IGVhc2llciBmb3IgdGhlIHVzZXIgdG8gdXNlIGluIGFuIGVmZmVjdFxuICBjb25zdCBwcmVmaXhlc1JlZiA9IFJlYWN0LnVzZVJlZihwcmVmaXhlcyk7XG4gIGNvbnN0IGNvbmZpZ1JlZiA9IFJlYWN0LnVzZVJlZihjb25maWcpO1xuICBjb25zdCBnZXRTdGF0ZUZyb21QYXRoUmVmID0gUmVhY3QudXNlUmVmKGdldFN0YXRlRnJvbVBhdGgpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHJlZml4ZXNSZWYuY3VycmVudCA9IHByZWZpeGVzO1xuICAgIGNvbmZpZ1JlZi5jdXJyZW50ID0gY29uZmlnO1xuICAgIGdldFN0YXRlRnJvbVBhdGhSZWYuY3VycmVudCA9IGdldFN0YXRlRnJvbVBhdGg7XG4gIH0sIFtjb25maWcsIGdldFN0YXRlRnJvbVBhdGgsIHByZWZpeGVzXSk7XG5cbiAgY29uc3QgZXh0cmFjdFBhdGhGcm9tVVJMID0gUmVhY3QudXNlQ2FsbGJhY2soKHVybDogc3RyaW5nKSA9PiB7XG4gICAgZm9yIChjb25zdCBwcmVmaXggb2YgcHJlZml4ZXNSZWYuY3VycmVudCkge1xuICAgICAgaWYgKHVybC5zdGFydHNXaXRoKHByZWZpeCkpIHtcbiAgICAgICAgcmV0dXJuIHVybC5yZXBsYWNlKHByZWZpeCwgJycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtdKTtcblxuICBjb25zdCBnZXRJbml0aWFsU3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdXJsID0gYXdhaXQgTGlua2luZy5nZXRJbml0aWFsVVJMKCk7XG4gICAgY29uc3QgcGF0aCA9IHVybCA/IGV4dHJhY3RQYXRoRnJvbVVSTCh1cmwpIDogbnVsbDtcblxuICAgIGlmIChwYXRoKSB7XG4gICAgICByZXR1cm4gZ2V0U3RhdGVGcm9tUGF0aFJlZi5jdXJyZW50KHBhdGgsIGNvbmZpZ1JlZi5jdXJyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIFtleHRyYWN0UGF0aEZyb21VUkxdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKHsgdXJsIH06IHsgdXJsOiBzdHJpbmcgfSkgPT4ge1xuICAgICAgY29uc3QgcGF0aCA9IGV4dHJhY3RQYXRoRnJvbVVSTCh1cmwpO1xuICAgICAgY29uc3QgbmF2aWdhdGlvbiA9IHJlZi5jdXJyZW50O1xuXG4gICAgICBpZiAobmF2aWdhdGlvbiAmJiBwYXRoKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0U3RhdGVGcm9tUGF0aFJlZi5jdXJyZW50KHBhdGgsIGNvbmZpZ1JlZi5jdXJyZW50KTtcblxuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICBjb25zdCBhY3Rpb24gPSBnZXRBY3Rpb25Gcm9tU3RhdGUoc3RhdGUpO1xuXG4gICAgICAgICAgaWYgKGFjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuYXZpZ2F0aW9uLmRpc3BhdGNoKGFjdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5hdmlnYXRpb24ucmVzZXRSb290KHN0YXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTGlua2luZy5hZGRFdmVudExpc3RlbmVyKCd1cmwnLCBsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gKCkgPT4gTGlua2luZy5yZW1vdmVFdmVudExpc3RlbmVyKCd1cmwnLCBsaXN0ZW5lcik7XG4gIH0sIFtleHRyYWN0UGF0aEZyb21VUkwsIHJlZl0pO1xuXG4gIHJldHVybiB7XG4gICAgZ2V0SW5pdGlhbFN0YXRlLFxuICB9O1xufVxuIl19