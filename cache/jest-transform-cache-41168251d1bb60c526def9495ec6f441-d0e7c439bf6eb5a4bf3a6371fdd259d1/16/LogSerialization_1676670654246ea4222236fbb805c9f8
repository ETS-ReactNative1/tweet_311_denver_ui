b6505f2f6b43706a6a3393d956ca10f4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EXPO_CONSOLE_METHOD_NAME = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _expoConstants = _interopRequireDefault(require("expo-constants"));

var _prettyFormat = _interopRequireDefault(require("pretty-format"));

var _parseErrorStack = _interopRequireDefault(require("react-native/Libraries/Core/Devtools/parseErrorStack"));

var _symbolicateStackTrace = _interopRequireDefault(require("react-native/Libraries/Core/Devtools/symbolicateStackTrace"));

var _ReactNodeFormatter = _interopRequireDefault(require("./format/ReactNodeFormatter"));

var EXPO_CONSOLE_METHOD_NAME = '__expoConsoleLog';
exports.EXPO_CONSOLE_METHOD_NAME = EXPO_CONSOLE_METHOD_NAME;

function serializeLogDataAsync(data, level) {
  var serializedValues, includesStack, rawStack, syntheticError, stack, errorMessage, serializedError, error, _errorMessage, _serializedError;

  return _regenerator.default.async(function serializeLogDataAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          includesStack = false;

          if (!_stackTraceLogsSupported()) {
            _context.next = 32;
            break;
          }

          if (!_isUnhandledPromiseRejection(data, level)) {
            _context.next = 11;
            break;
          }

          rawStack = data[0];
          syntheticError = {
            stack: rawStack
          };
          _context.next = 7;
          return _regenerator.default.awrap(_symbolicateErrorAsync(syntheticError));

        case 7:
          stack = _context.sent;

          if (!stack.length) {
            serializedValues = _stringifyLogData(data);
          } else {
            errorMessage = rawStack.split('\n')[1];
            serializedValues = [{
              message: "[Unhandled promise rejection: " + errorMessage + "]",
              stack: _formatStack(stack)
            }];
            includesStack = true;
          }

          _context.next = 30;
          break;

        case 11:
          if (!(data.length === 1 && data[0] instanceof Error)) {
            _context.next = 19;
            break;
          }

          _context.next = 14;
          return _regenerator.default.awrap(_serializeErrorAsync(data[0]));

        case 14:
          serializedError = _context.sent;
          serializedValues = [serializedError];
          includesStack = serializedError.hasOwnProperty('stack');
          _context.next = 30;
          break;

        case 19:
          if (!(level === 'warn' || level === 'error')) {
            _context.next = 29;
            break;
          }

          error = _captureConsoleStackTrace();
          _errorMessage = _stringifyLogData(data).join(', ');
          _context.next = 24;
          return _regenerator.default.awrap(_serializeErrorAsync(error, _errorMessage));

        case 24:
          _serializedError = _context.sent;
          serializedValues = [_serializedError];
          includesStack = _serializedError.hasOwnProperty('stack');
          _context.next = 30;
          break;

        case 29:
          serializedValues = _stringifyLogData(data);

        case 30:
          _context.next = 33;
          break;

        case 32:
          serializedValues = _stringifyLogData(data);

        case 33:
          return _context.abrupt("return", {
            body: (0, _toConsumableArray2.default)(serializedValues),
            includesStack: includesStack
          });

        case 34:
        case "end":
          return _context.stop();
      }
    }
  });
}

function _stringifyLogData(data) {
  return data.map(function (item) {
    if (typeof item === 'string') {
      return item;
    } else {
      var LOG_MESSAGE_MAX_LENGTH = 10000;
      var result = (0, _prettyFormat.default)(item, {
        plugins: [_ReactNodeFormatter.default]
      });

      if (result.length > LOG_MESSAGE_MAX_LENGTH) {
        var truncatedResult = result.substring(0, LOG_MESSAGE_MAX_LENGTH);
        truncatedResult += "...(truncated to the first " + LOG_MESSAGE_MAX_LENGTH + " characters)";
        return truncatedResult;
      } else {
        return result;
      }
    }
  });
}

function _serializeErrorAsync(error, message) {
  var messageParts, firstUselessLine, stack, formattedStack;
  return _regenerator.default.async(function _serializeErrorAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (message == null) {
            message = error.message;
          }

          messageParts = message.split('\n');
          firstUselessLine = messageParts.indexOf('This error is located at:');

          if (firstUselessLine > 0) {
            message = messageParts.slice(0, firstUselessLine - 1).join('\n');
          }

          if (!(!error.stack || !error.stack.length)) {
            _context2.next = 6;
            break;
          }

          return _context2.abrupt("return", (0, _prettyFormat.default)(error));

        case 6:
          _context2.next = 8;
          return _regenerator.default.awrap(_symbolicateErrorAsync(error));

        case 8:
          stack = _context2.sent;
          formattedStack = _formatStack(stack);
          return _context2.abrupt("return", {
            message: message,
            stack: formattedStack
          });

        case 11:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function _symbolicateErrorAsync(error) {
  var parsedStack, symbolicatedStack;
  return _regenerator.default.async(function _symbolicateErrorAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          parsedStack = (0, _parseErrorStack.default)(error);
          _context3.prev = 1;
          _context3.next = 4;
          return _regenerator.default.awrap((0, _symbolicateStackTrace.default)(parsedStack));

        case 4:
          symbolicatedStack = _context3.sent;
          _context3.next = 10;
          break;

        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](1);
          return _context3.abrupt("return", parsedStack);

        case 10:
          if (symbolicatedStack) {
            _context3.next = 12;
            break;
          }

          return _context3.abrupt("return", parsedStack);

        case 12:
          return _context3.abrupt("return", symbolicatedStack.map(_removeProjectRoot));

        case 13:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[1, 7]]);
}

function _formatStack(stack) {
  return stack.map(function (frame) {
    var line = frame.file + ":" + frame.lineNumber;

    if (frame.column != null) {
      line += ":" + frame.column;
    }

    line += " in " + frame.methodName;
    return line;
  }).join('\n');
}

function _removeProjectRoot(frame) {
  var filename = frame.file;

  if (filename == null) {
    return frame;
  }

  var projectRoot = _getProjectRoot();

  if (projectRoot == null) {
    return frame;
  }

  if (filename.startsWith(projectRoot)) {
    filename = filename.substring(projectRoot.length);

    if (filename[0] === '/' || filename[0] === '\\') {
      filename = filename.substring(1);
    }

    frame.file = filename;
  }

  return frame;
}

function _stackTraceLogsSupported() {
  return !!(__DEV__ && _getProjectRoot());
}

function _isUnhandledPromiseRejection(data, level) {
  return level === 'warn' && typeof data[0] === 'string' && /^Possible Unhandled Promise Rejection/.test(data[0]);
}

function _captureConsoleStackTrace() {
  try {
    throw new Error();
  } catch (error) {
    var stackLines = error.stack.split('\n');
    var consoleMethodIndex = stackLines.findIndex(function (frame) {
      return frame.includes(EXPO_CONSOLE_METHOD_NAME);
    });

    if (consoleMethodIndex !== -1) {
      stackLines = stackLines.slice(consoleMethodIndex + 1);
      error.stack = stackLines.join('\n');
    }

    return error;
  }
}

function _getProjectRoot() {
  return _expoConstants.default.manifest && _expoConstants.default.manifest.developer ? _expoConstants.default.manifest.developer.projectRoot : null;
}

var _default = {
  serializeLogDataAsync: serializeLogDataAsync
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,