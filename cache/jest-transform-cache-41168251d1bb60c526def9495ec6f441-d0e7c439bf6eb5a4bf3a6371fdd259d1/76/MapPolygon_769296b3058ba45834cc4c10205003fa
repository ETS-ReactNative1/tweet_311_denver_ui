58ef3a7f3e2f4c7346acb6e77c90707f
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _decorateMapComponent = _interopRequireWildcard(require("./decorateMapComponent"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

var propTypes = _objectSpread({}, viewPropTypes, {
  coordinates: _propTypes.default.arrayOf(_propTypes.default.shape({
    latitude: _propTypes.default.number.isRequired,
    longitude: _propTypes.default.number.isRequired
  })),
  holes: _propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.shape({
    latitude: _propTypes.default.number.isRequired,
    longitude: _propTypes.default.number.isRequired
  }))),
  onPress: _propTypes.default.func,
  tappable: _propTypes.default.bool,
  strokeWidth: _propTypes.default.number,
  strokeColor: _reactNative.ColorPropType,
  fillColor: _reactNative.ColorPropType,
  zIndex: _propTypes.default.number,
  lineCap: _propTypes.default.oneOf(['butt', 'round', 'square']),
  lineJoin: _propTypes.default.oneOf(['miter', 'round', 'bevel']),
  miterLimit: _propTypes.default.number,
  geodesic: _propTypes.default.bool,
  lineDashPhase: _propTypes.default.number,
  lineDashPattern: _propTypes.default.arrayOf(_propTypes.default.number)
});

var defaultProps = {
  strokeColor: '#000',
  strokeWidth: 1
};

var MapPolygon = function (_React$Component) {
  (0, _inherits2.default)(MapPolygon, _React$Component);

  function MapPolygon() {
    (0, _classCallCheck2.default)(this, MapPolygon);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapPolygon).apply(this, arguments));
  }

  (0, _createClass2.default)(MapPolygon, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      this.polygon.setNativeProps(props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var AIRMapPolygon = this.getAirComponent();
      return _react.default.createElement(AIRMapPolygon, (0, _extends2.default)({}, this.props, {
        ref: function ref(_ref) {
          _this.polygon = _ref;
        }
      }));
    }
  }]);
  return MapPolygon;
}(_react.default.Component);

MapPolygon.propTypes = propTypes;
MapPolygon.defaultProps = defaultProps;

var _default = (0, _decorateMapComponent.default)(MapPolygon, {
  componentType: 'Polygon',
  providers: {
    google: {
      ios: _decorateMapComponent.SUPPORTED,
      android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
    }
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,