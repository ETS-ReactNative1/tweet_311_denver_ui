718b560ffa85ddeda3a633f02dfc6d4c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useFocusEvents;

var React = _interopRequireWildcard(require("react"));

var _NavigationContext = _interopRequireDefault(require("./NavigationContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function useFocusEvents(_ref) {
  var state = _ref.state,
      emitter = _ref.emitter;
  var navigation = React.useContext(_NavigationContext.default);
  var lastFocusedKeyRef = React.useRef();
  var currentFocusedKey = state.routes[state.index].key;
  React.useEffect(function () {
    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', function () {
      return emitter.emit({
        type: 'focus',
        target: currentFocusedKey
      });
    });
  }, [currentFocusedKey, emitter, navigation]);
  React.useEffect(function () {
    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', function () {
      return emitter.emit({
        type: 'blur',
        target: currentFocusedKey
      });
    });
  }, [currentFocusedKey, emitter, navigation]);
  React.useEffect(function () {
    var lastFocusedKey = lastFocusedKeyRef.current;
    lastFocusedKeyRef.current = currentFocusedKey;

    if (lastFocusedKey === undefined && !navigation) {
      emitter.emit({
        type: 'focus',
        target: currentFocusedKey
      });
    }

    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {
      return;
    }

    if (lastFocusedKey === undefined) {
      return;
    }

    emitter.emit({
      type: 'focus',
      target: currentFocusedKey
    });
    emitter.emit({
      type: 'blur',
      target: lastFocusedKey
    });
  }, [currentFocusedKey, emitter, navigation]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZUZvY3VzRXZlbnRzLnRzeCJdLCJuYW1lcyI6WyJlbWl0dGVyIiwibmF2aWdhdGlvbiIsIlJlYWN0IiwiTmF2aWdhdGlvbkNvbnRleHQiLCJsYXN0Rm9jdXNlZEtleVJlZiIsImN1cnJlbnRGb2N1c2VkS2V5Iiwic3RhdGUiLCJ0eXBlIiwidGFyZ2V0IiwibGFzdEZvY3VzZWRLZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFFQSxJQUFBLGtCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLHVCQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVdlLFNBQUEsY0FBQSxDQUFBLElBQUEsRUFBcUQ7QUFBQSxNQUE3QixLQUE2QixHQUFBLElBQUEsQ0FBN0IsS0FBNkI7QUFBQSxNQUFwQkEsT0FBb0IsR0FBQSxJQUFBLENBQXBCQSxPQUFvQjtBQUNsRSxNQUFNQyxVQUFVLEdBQUdDLEtBQUssQ0FBTEEsVUFBQUEsQ0FBaUJDLGtCQUFBQSxDQUFwQyxPQUFtQkQsQ0FBbkI7QUFDQSxNQUFNRSxpQkFBaUIsR0FBR0YsS0FBSyxDQUEvQixNQUEwQkEsRUFBMUI7QUFFQSxNQUFNRyxpQkFBaUIsR0FBR0MsS0FBSyxDQUFMQSxNQUFBQSxDQUFhQSxLQUFLLENBQWxCQSxLQUFBQSxFQUp3QyxHQUlsRTtBQUlBSixFQUFBQSxLQUFLLENBQUxBLFNBQUFBLENBQ0U7QUFBQSxXQUNFLFVBREYsS0FBQSxJQUNFLElBQUEsVUFERixLQUFBLEtBQUEsQ0FDRSxHQURGLEtBQUEsQ0FDRSxHQUFBLFVBQVUsQ0FBVixXQUFBLENBQUEsT0FBQSxFQUFpQztBQUFBLGFBQy9CLE9BQU8sQ0FBUCxJQUFBLENBQWE7QUFBRUssUUFBQUEsSUFBSSxFQUFOLE9BQUE7QUFBaUJDLFFBQUFBLE1BQU0sRUFBRUg7QUFBekIsT0FBYixDQUQrQjtBQUFBLEtBQWpDLENBREY7QUFBQSxHQURGSCxFQUtFLENBQUEsaUJBQUEsRUFBQSxPQUFBLEVBTEZBLFVBS0UsQ0FMRkE7QUFRQUEsRUFBQUEsS0FBSyxDQUFMQSxTQUFBQSxDQUNFO0FBQUEsV0FDRSxVQURGLEtBQUEsSUFDRSxJQUFBLFVBREYsS0FBQSxLQUFBLENBQ0UsR0FERixLQUFBLENBQ0UsR0FBQSxVQUFVLENBQVYsV0FBQSxDQUFBLE1BQUEsRUFBZ0M7QUFBQSxhQUM5QixPQUFPLENBQVAsSUFBQSxDQUFhO0FBQUVLLFFBQUFBLElBQUksRUFBTixNQUFBO0FBQWdCQyxRQUFBQSxNQUFNLEVBQUVIO0FBQXhCLE9BQWIsQ0FEOEI7QUFBQSxLQUFoQyxDQURGO0FBQUEsR0FERkgsRUFLRSxDQUFBLGlCQUFBLEVBQUEsT0FBQSxFQUxGQSxVQUtFLENBTEZBO0FBUUFBLEVBQUFBLEtBQUssQ0FBTEEsU0FBQUEsQ0FBZ0IsWUFBTTtBQUNwQixRQUFNTyxjQUFjLEdBQUdMLGlCQUFpQixDQUF4QyxPQUFBO0FBRUFBLElBQUFBLGlCQUFpQixDQUFqQkEsT0FBQUEsR0FIb0IsaUJBR3BCQTs7QUFJQSxRQUFJSyxjQUFjLEtBQWRBLFNBQUFBLElBQWdDLENBQXBDLFVBQUEsRUFBaUQ7QUFDL0NULE1BQUFBLE9BQU8sQ0FBUEEsSUFBQUEsQ0FBYTtBQUFFTyxRQUFBQSxJQUFJLEVBQU4sT0FBQTtBQUFpQkMsUUFBQUEsTUFBTSxFQUFFSDtBQUF6QixPQUFiTDtBQVJrQjs7QUFhcEIsUUFDRVMsY0FBYyxLQUFkQSxpQkFBQUEsSUFDQSxFQUFFUixVQUFVLEdBQUdBLFVBQVUsQ0FBYixTQUFHQSxFQUFILEdBRmQsSUFFRSxDQUZGLEVBR0U7QUFDQTtBQUNEOztBQUVELFFBQUlRLGNBQWMsS0FBbEIsU0FBQSxFQUFrQztBQUVoQztBQUNEOztBQUVEVCxJQUFBQSxPQUFPLENBQVBBLElBQUFBLENBQWE7QUFDWE8sTUFBQUEsSUFBSSxFQURPLE9BQUE7QUFFWEMsTUFBQUEsTUFBTSxFQUFFSDtBQUZHLEtBQWJMO0FBS0FBLElBQUFBLE9BQU8sQ0FBUEEsSUFBQUEsQ0FBYTtBQUNYTyxNQUFBQSxJQUFJLEVBRE8sTUFBQTtBQUVYQyxNQUFBQSxNQUFNLEVBQUVDO0FBRkcsS0FBYlQ7QUE5QkZFLEdBQUFBLEVBa0NHLENBQUEsaUJBQUEsRUFBQSxPQUFBLEVBbENIQSxVQWtDRyxDQWxDSEE7QUFtQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uU3RhdGUgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9yb3V0ZXJzJztcbmltcG9ydCBOYXZpZ2F0aW9uQ29udGV4dCBmcm9tICcuL05hdmlnYXRpb25Db250ZXh0JztcbmltcG9ydCB7IE5hdmlnYXRpb25FdmVudEVtaXR0ZXIgfSBmcm9tICcuL3VzZUV2ZW50RW1pdHRlcic7XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgc3RhdGU6IE5hdmlnYXRpb25TdGF0ZTtcbiAgZW1pdHRlcjogTmF2aWdhdGlvbkV2ZW50RW1pdHRlcjtcbn07XG5cbi8qKlxuICogSG9vayB0byB0YWtlIGNhcmUgb2YgZW1pdHRpbmcgYGZvY3VzYCBhbmQgYGJsdXJgIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9jdXNFdmVudHMoeyBzdGF0ZSwgZW1pdHRlciB9OiBPcHRpb25zKSB7XG4gIGNvbnN0IG5hdmlnYXRpb24gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgY29uc3QgbGFzdEZvY3VzZWRLZXlSZWYgPSBSZWFjdC51c2VSZWY8c3RyaW5nIHwgdW5kZWZpbmVkPigpO1xuXG4gIGNvbnN0IGN1cnJlbnRGb2N1c2VkS2V5ID0gc3RhdGUucm91dGVzW3N0YXRlLmluZGV4XS5rZXk7XG5cbiAgLy8gV2hlbiB0aGUgcGFyZW50IHNjcmVlbiBjaGFuZ2VzIGl0cyBmb2N1cyBzdGF0ZSwgd2UgYWxzbyBuZWVkIHRvIGNoYW5nZSBjaGlsZCdzIGZvY3VzXG4gIC8vIENveiB0aGUgY2hpbGQgc2NyZWVuIGNhbid0IGJlIGZvY3VzZWQgaWYgdGhlIHBhcmVudCBzY3JlZW4gaXMgb3V0IG9mIGZvY3VzXG4gIFJlYWN0LnVzZUVmZmVjdChcbiAgICAoKSA9PlxuICAgICAgbmF2aWdhdGlvbj8uYWRkTGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT5cbiAgICAgICAgZW1pdHRlci5lbWl0KHsgdHlwZTogJ2ZvY3VzJywgdGFyZ2V0OiBjdXJyZW50Rm9jdXNlZEtleSB9KVxuICAgICAgKSxcbiAgICBbY3VycmVudEZvY3VzZWRLZXksIGVtaXR0ZXIsIG5hdmlnYXRpb25dXG4gICk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KFxuICAgICgpID0+XG4gICAgICBuYXZpZ2F0aW9uPy5hZGRMaXN0ZW5lcignYmx1cicsICgpID0+XG4gICAgICAgIGVtaXR0ZXIuZW1pdCh7IHR5cGU6ICdibHVyJywgdGFyZ2V0OiBjdXJyZW50Rm9jdXNlZEtleSB9KVxuICAgICAgKSxcbiAgICBbY3VycmVudEZvY3VzZWRLZXksIGVtaXR0ZXIsIG5hdmlnYXRpb25dXG4gICk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBsYXN0Rm9jdXNlZEtleSA9IGxhc3RGb2N1c2VkS2V5UmVmLmN1cnJlbnQ7XG5cbiAgICBsYXN0Rm9jdXNlZEtleVJlZi5jdXJyZW50ID0gY3VycmVudEZvY3VzZWRLZXk7XG5cbiAgICAvLyBXZSB3b3VsZG4ndCBoYXZlIGBsYXN0Rm9jdXNlZEtleWAgb24gaW5pdGlhbCBtb3VudFxuICAgIC8vIEZpcmUgZm9jdXMgZXZlbnQgZm9yIHRoZSBjdXJyZW50IHJvdXRlIG9uIG1vdW50IGlmIHRoZXJlJ3Mgbm8gcGFyZW50IG5hdmlnYXRvclxuICAgIGlmIChsYXN0Rm9jdXNlZEtleSA9PT0gdW5kZWZpbmVkICYmICFuYXZpZ2F0aW9uKSB7XG4gICAgICBlbWl0dGVyLmVtaXQoeyB0eXBlOiAnZm9jdXMnLCB0YXJnZXQ6IGN1cnJlbnRGb2N1c2VkS2V5IH0pO1xuICAgIH1cblxuICAgIC8vIFdlIHNob3VsZCBvbmx5IGRpc3BhdGNoIGV2ZW50cyB3aGVuIHRoZSBmb2N1c2VkIGtleSBjaGFuZ2VkIGFuZCBuYXZpZ2F0b3IgaXMgZm9jdXNlZFxuICAgIC8vIFdoZW4gbmF2aWdhdG9yIGlzIG5vdCBmb2N1c2VkLCBzY3JlZW5zIGluc2lkZSBzaG91bGRuJ3QgcmVjZWl2ZSBmb2N1c2VkIHN0YXR1cyBlaXRoZXJcbiAgICBpZiAoXG4gICAgICBsYXN0Rm9jdXNlZEtleSA9PT0gY3VycmVudEZvY3VzZWRLZXkgfHxcbiAgICAgICEobmF2aWdhdGlvbiA/IG5hdmlnYXRpb24uaXNGb2N1c2VkKCkgOiB0cnVlKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChsYXN0Rm9jdXNlZEtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBPbmx5IGZpcmUgZXZlbnRzIGFmdGVyIGluaXRpYWwgbW91bnRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlbWl0dGVyLmVtaXQoe1xuICAgICAgdHlwZTogJ2ZvY3VzJyxcbiAgICAgIHRhcmdldDogY3VycmVudEZvY3VzZWRLZXksXG4gICAgfSk7XG5cbiAgICBlbWl0dGVyLmVtaXQoe1xuICAgICAgdHlwZTogJ2JsdXInLFxuICAgICAgdGFyZ2V0OiBsYXN0Rm9jdXNlZEtleSxcbiAgICB9KTtcbiAgfSwgW2N1cnJlbnRGb2N1c2VkS2V5LCBlbWl0dGVyLCBuYXZpZ2F0aW9uXSk7XG59XG4iXX0=