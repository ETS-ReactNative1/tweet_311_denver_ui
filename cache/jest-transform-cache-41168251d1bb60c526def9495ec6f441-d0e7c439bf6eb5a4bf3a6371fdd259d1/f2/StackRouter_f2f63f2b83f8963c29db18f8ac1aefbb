c86544d44b83837fb582f3cd72c36f8f
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = StackRouter;
exports.StackActions = void 0;

var _shortid = _interopRequireDefault(require("shortid"));

var _BaseRouter = _interopRequireDefault(require("./BaseRouter"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var StackActions = {
  replace: function replace(name, params) {
    return {
      type: 'REPLACE',
      payload: {
        name: name,
        params: params
      }
    };
  },
  push: function push(name, params) {
    return {
      type: 'PUSH',
      payload: {
        name: name,
        params: params
      }
    };
  },
  pop: function pop() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return {
      type: 'POP',
      payload: {
        count: count
      }
    };
  },
  popToTop: function popToTop() {
    return {
      type: 'POP_TO_TOP'
    };
  }
};
exports.StackActions = StackActions;

function StackRouter(options) {
  var router = _objectSpread({}, _BaseRouter.default, {
    type: 'stack',
    getInitialState: function getInitialState(_ref) {
      var routeNames = _ref.routeNames,
          routeParamList = _ref.routeParamList;
      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
      return {
        stale: false,
        type: 'stack',
        key: "stack-".concat((0, _shortid.default)()),
        index: 0,
        routeNames: routeNames,
        routes: [{
          key: "".concat(initialRouteName, "-").concat((0, _shortid.default)()),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        }]
      };
    },
    getRehydratedState: function getRehydratedState(partialState, _ref2) {
      var routeNames = _ref2.routeNames,
          routeParamList = _ref2.routeParamList;
      var state = partialState;

      if (state.stale === false) {
        return state;
      }

      var routes = state.routes.filter(function (route) {
        return routeNames.includes(route.name);
      }).map(function (route) {
        return _objectSpread({}, route, {
          key: route.key || "".concat(route.name, "-").concat((0, _shortid.default)()),
          params: routeParamList[route.name] !== undefined ? _objectSpread({}, routeParamList[route.name], {}, route.params) : route.params
        });
      });

      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];
        routes.push({
          key: "".concat(initialRouteName, "-").concat((0, _shortid.default)()),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }

      return {
        stale: false,
        type: 'stack',
        key: "stack-".concat((0, _shortid.default)()),
        index: routes.length - 1,
        routeNames: routeNames,
        routes: routes
      };
    },
    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {
      var routeNames = _ref3.routeNames,
          routeParamList = _ref3.routeParamList;
      var routes = state.routes.filter(function (route) {
        return routeNames.includes(route.name);
      });

      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
        routes.push({
          key: "".concat(initialRouteName, "-").concat((0, _shortid.default)()),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }

      return _objectSpread({}, state, {
        routeNames: routeNames,
        routes: routes,
        index: Math.min(state.index, routes.length - 1)
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {
        return r.key === key;
      });

      if (index === -1 || index === state.index) {
        return state;
      }

      return _objectSpread({}, state, {
        index: index,
        routes: state.routes.slice(0, index + 1)
      });
    },
    getStateForAction: function getStateForAction(state, action, options) {
      var routeParamList = options.routeParamList;

      switch (action.type) {
        case 'REPLACE':
          {
            var index = action.source ? state.routes.findIndex(function (r) {
              return r.key === action.source;
            }) : state.index;

            if (index === -1) {
              return null;
            }

            var _action$payload = action.payload,
                name = _action$payload.name,
                key = _action$payload.key,
                params = _action$payload.params;

            if (!state.routeNames.includes(name)) {
              return null;
            }

            return _objectSpread({}, state, {
              routes: state.routes.map(function (route, i) {
                return i === index ? {
                  key: key !== undefined ? key : "".concat(name, "-").concat((0, _shortid.default)()),
                  name: name,
                  params: routeParamList[name] !== undefined ? _objectSpread({}, routeParamList[name], {}, params) : params
                } : route;
              })
            });
          }

        case 'PUSH':
          if (state.routeNames.includes(action.payload.name)) {
            return _objectSpread({}, state, {
              index: state.index + 1,
              routes: [].concat((0, _toConsumableArray2.default)(state.routes), [{
                key: action.payload.key === undefined ? "".concat(action.payload.name, "-").concat((0, _shortid.default)()) : action.payload.key,
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== undefined ? _objectSpread({}, routeParamList[action.payload.name], {}, action.payload.params) : action.payload.params
              }])
            });
          }

          return null;

        case 'POP':
          {
            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {
              return r.key === action.source;
            }) : state.index;

            if (_index > 0) {
              var count = Math.max(_index - action.payload.count + 1, 1);
              var routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));
              return _objectSpread({}, state, {
                index: routes.length - 1,
                routes: routes
              });
            }

            return null;
          }

        case 'POP_TO_TOP':
          return router.getStateForAction(state, {
            type: 'POP',
            payload: {
              count: state.routes.length - 1
            }
          }, options);

        case 'NAVIGATE':
          if (action.payload.key || action.payload.name && state.routeNames.includes(action.payload.name)) {
            var _index2 = -1;

            if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {
              _index2 = state.index;
            } else {
              for (var i = state.routes.length - 1; i >= 0; i--) {
                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {
                  _index2 = i;
                  break;
                }
              }
            }

            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {
              return null;
            }

            if (_index2 === -1 && action.payload.name !== undefined) {
              return router.getStateForAction(state, {
                type: 'PUSH',
                payload: {
                  key: action.payload.key,
                  name: action.payload.name,
                  params: action.payload.params
                }
              }, options);
            }

            return _objectSpread({}, state, {
              index: _index2,
              routes: [].concat((0, _toConsumableArray2.default)(state.routes.slice(0, _index2)), [action.payload.params !== undefined ? _objectSpread({}, state.routes[_index2], {
                params: _objectSpread({}, state.routes[_index2].params, {}, action.payload.params)
              }) : state.routes[_index2]])
            });
          }

          return null;

        case 'GO_BACK':
          if (state.index > 0) {
            return router.getStateForAction(state, {
              type: 'POP',
              payload: {
                count: 1
              },
              target: action.target,
              source: action.source
            }, options);
          }

          return null;

        default:
          return _BaseRouter.default.getStateForAction(state, action);
      }
    },
    actionCreators: StackActions
  });

  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,