{"version":3,"sources":["../src/Permissions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport {\n  coalesceExpirations,\n  coalesceStatuses,\n  coalesceCanAskAgain,\n  coalesceGranted,\n} from './CoalescedPermissions';\nimport Permissions from './ExpoPermissions';\n\nimport {\n  PermissionResponse,\n  PermissionType,\n  PermissionMap,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionInfo,\n} from './Permissions.types';\n\nexport {\n  PermissionStatus,\n  PermissionResponse,\n  PermissionExpiration,\n  PermissionMap,\n  PermissionInfo,\n  PermissionType,\n};\n\nexport const CAMERA = 'camera';\nexport const CAMERA_ROLL = 'cameraRoll';\nexport const AUDIO_RECORDING = 'audioRecording';\nexport const LOCATION = 'location';\nexport const USER_FACING_NOTIFICATIONS = 'userFacingNotifications';\nexport const NOTIFICATIONS = 'notifications';\nexport const CONTACTS = 'contacts';\nexport const CALENDAR = 'calendar';\nexport const REMINDERS = 'reminders';\nexport const SYSTEM_BRIGHTNESS = 'systemBrightness';\n\nexport async function getAsync(...types: PermissionType[]): Promise<PermissionResponse> {\n  if (Platform.OS === 'ios') {\n    return await _handleMultiPermissionsRequestIOSAsync(types, Permissions.getAsync);\n  }\n  return await _handlePermissionsRequestAsync(types, Permissions.getAsync);\n}\n\nexport async function askAsync(...types: PermissionType[]): Promise<PermissionResponse> {\n  if (Platform.OS === 'ios') {\n    return await _handleMultiPermissionsRequestIOSAsync(types, Permissions.askAsync);\n  }\n  return await _handlePermissionsRequestAsync(types, Permissions.askAsync);\n}\n\nasync function _handleSinglePermissionRequestIOSAsync(\n  type: PermissionType,\n  handlePermission: (type: PermissionType) => Promise<PermissionInfo>\n): Promise<PermissionInfo> {\n  return await handlePermission(type);\n}\n\nasync function _handleMultiPermissionsRequestIOSAsync(\n  types: PermissionType[],\n  handlePermission: (type: PermissionType) => Promise<PermissionInfo>\n): Promise<PermissionResponse> {\n  if (!types.length) {\n    throw new Error('At least one permission type must be specified');\n  }\n\n  let permissions = {};\n  for (let type of types) {\n    permissions[type] = await _handleSinglePermissionRequestIOSAsync(type, handlePermission);\n  }\n\n  return {\n    status: coalesceStatuses(permissions),\n    expires: coalesceExpirations(permissions),\n    canAskAgain: coalesceCanAskAgain(permissions),\n    granted: coalesceGranted(permissions),\n    permissions,\n  };\n}\n\nasync function _handlePermissionsRequestAsync(\n  types: PermissionType[],\n  handlePermissions: (types: PermissionType[]) => Promise<PermissionMap>\n): Promise<PermissionResponse> {\n  if (!types.length) {\n    throw new Error('At least one permission type must be specified');\n  }\n\n  const permissions = await handlePermissions(types);\n  return {\n    status: coalesceStatuses(permissions),\n    expires: coalesceExpirations(permissions),\n    canAskAgain: coalesceCanAskAgain(permissions),\n    granted: coalesceGranted(permissions),\n    permissions,\n  };\n}\n"],"sourceRoot":""}