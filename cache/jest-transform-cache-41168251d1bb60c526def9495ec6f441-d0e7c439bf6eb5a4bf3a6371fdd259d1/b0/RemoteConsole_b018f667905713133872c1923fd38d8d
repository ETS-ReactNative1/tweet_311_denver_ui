6b1f8e2c2bdbbec919dccc5f45a22875
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _RemoteLogging = _interopRequireDefault(require("./RemoteLogging"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function createRemoteConsole(originalConsole) {
  var groupDepth = 0;
  var enhancedConsole = Object.create(originalConsole);

  _defineConsoleLogMethod('debug', 'info');

  _defineConsoleLogMethod('log', 'info');

  _defineConsoleLogMethod('info', 'info');

  _defineConsoleLogMethod('warn', 'warn');

  _defineConsoleLogMethod('error', 'error');

  enhancedConsole.assert = function assert(condition) {
    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }

    if (originalConsole.assert) {
      originalConsole.assert.apply(originalConsole, [!!condition].concat(data));
    }

    if (condition) {
      return;
    }

    var assertionMessage = 'Assertion failed';

    if (!data.length) {
      data.push(assertionMessage);
    } else {
      if (typeof data[0] !== 'string') {
        data.unshift(assertionMessage);
      } else {
        data[0] = assertionMessage + ": " + data[0];
      }
    }

    _enqueueRemoteLog('error', {}, data);
  };

  enhancedConsole.group = function group() {
    for (var _len2 = arguments.length, data = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      data[_key2] = arguments[_key2];
    }

    if (originalConsole.group) {
      originalConsole.group.apply(originalConsole, data);
    }

    _enqueueRemoteLog('info', {}, data);

    groupDepth++;
  };

  enhancedConsole.groupCollapsed = function groupCollapsed() {
    for (var _len3 = arguments.length, data = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      data[_key3] = arguments[_key3];
    }

    if (originalConsole.groupCollapsed) {
      originalConsole.groupCollapsed.apply(originalConsole, data);
    }

    _enqueueRemoteLog('info', {
      groupCollapsed: true
    }, data);

    groupDepth++;
  };

  enhancedConsole.groupEnd = function groupEnd() {
    if (originalConsole.groupEnd) {
      originalConsole.groupEnd();
    }

    if (groupDepth > 0) {
      groupDepth--;
    }

    _enqueueRemoteLog('info', {
      shouldHide: true
    }, []);
  };

  function _defineConsoleLogMethod(name, level) {
    enhancedConsole[name] = function __expoConsoleLog() {
      var originalMethod = originalConsole[name];

      for (var _len4 = arguments.length, data = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        data[_key4] = arguments[_key4];
      }

      if (typeof originalMethod === 'function') {
        originalMethod.apply(originalConsole, data);
      }

      _enqueueRemoteLog(level, {}, data);
    };
  }

  function _enqueueRemoteLog(level, additionalFields, data) {
    _RemoteLogging.default.enqueueRemoteLogAsync(level, _objectSpread({
      groupDepth: groupDepth
    }, additionalFields), data).catch(function (error) {
      originalConsole.error("There was a problem sending log messages to your development environment", error);
    });
  }

  return enhancedConsole;
}

var _default = {
  createRemoteConsole: createRemoteConsole
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,