46b3ba8eb46c7f162b4855cf3f8a234f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TabRouter;
exports.TabActions = void 0;

var _shortid = _interopRequireDefault(require("shortid"));

var _BaseRouter = _interopRequireDefault(require("./BaseRouter"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var TYPE_ROUTE = 'route';
var TabActions = {
  jumpTo: function jumpTo(name, params) {
    return {
      type: 'JUMP_TO',
      payload: {
        name: name,
        params: params
      }
    };
  }
};
exports.TabActions = TabActions;

var getRouteHistory = function getRouteHistory(routes, index, backBehavior) {
  var history = [{
    type: TYPE_ROUTE,
    key: routes[index].key
  }];

  switch (backBehavior) {
    case 'initialRoute':
      if (index !== 0) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[0].key
        });
      }

      break;

    case 'order':
      for (var i = index; i > 0; i--) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[i - 1].key
        });
      }

      break;

    case 'history':
      break;
  }

  return history;
};

var changeIndex = function changeIndex(state, index, backBehavior) {
  var history;

  if (backBehavior === 'history') {
    var currentKey = state.routes[index].key;
    history = state.history.filter(function (it) {
      return it.type === 'route' ? it.key !== currentKey : false;
    }).concat({
      type: TYPE_ROUTE,
      key: currentKey
    });
  } else {
    history = getRouteHistory(state.routes, index, backBehavior);
  }

  return _objectSpread({}, state, {
    index: index,
    history: history
  });
};

function TabRouter(_ref) {
  var initialRouteName = _ref.initialRouteName,
      _ref$backBehavior = _ref.backBehavior,
      backBehavior = _ref$backBehavior === void 0 ? 'history' : _ref$backBehavior;

  var router = _objectSpread({}, _BaseRouter.default, {
    type: 'tab',
    getInitialState: function getInitialState(_ref2) {
      var routeNames = _ref2.routeNames,
          routeParamList = _ref2.routeParamList;
      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;
      var routes = routeNames.map(function (name) {
        return {
          name: name,
          key: "".concat(name, "-").concat((0, _shortid.default)()),
          params: routeParamList[name]
        };
      });
      var history = getRouteHistory(routes, index, backBehavior);
      return {
        stale: false,
        type: 'tab',
        key: "tab-".concat((0, _shortid.default)()),
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes
      };
    },
    getRehydratedState: function getRehydratedState(partialState, _ref3) {
      var _state$history, _history;

      var routeNames = _ref3.routeNames,
          routeParamList = _ref3.routeParamList;
      var state = partialState;

      if (state.stale === false) {
        return state;
      }

      var routes = routeNames.map(function (name) {
        var route = state.routes.find(function (r) {
          return r.name === name;
        });
        return _objectSpread({}, route, {
          name: name,
          key: route && route.name === name && route.key ? route.key : "".concat(name, "-").concat((0, _shortid.default)()),
          params: routeParamList[name] !== undefined ? _objectSpread({}, routeParamList[name], {}, route ? route.params : undefined) : route ? route.params : undefined
        });
      });
      var index = Math.min(Math.max(typeof state.index === 'number' ? state.index : routeNames.indexOf(state.routes[0].name), 0), routes.length - 1);
      var history = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {
        return routes.find(function (r) {
          return r.key === it.key;
        });
      });

      if (!((_history = history) === null || _history === void 0 ? void 0 : _history.length)) {
        history = getRouteHistory(routes, index, backBehavior);
      }

      return {
        stale: false,
        type: 'tab',
        key: "tab-".concat((0, _shortid.default)()),
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes
      };
    },
    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {
      var routeNames = _ref4.routeNames,
          routeParamList = _ref4.routeParamList;
      var routes = routeNames.map(function (name) {
        return state.routes.find(function (r) {
          return r.name === name;
        }) || {
          name: name,
          key: "".concat(name, "-").concat((0, _shortid.default)()),
          params: routeParamList[name]
        };
      });
      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));
      var history = state.history.filter(function (it) {
        return routes.find(function (r) {
          return r.key === it.key;
        });
      });

      if (!history.length) {
        history = getRouteHistory(routes, index, backBehavior);
      }

      return _objectSpread({}, state, {
        history: history,
        routeNames: routeNames,
        routes: routes,
        index: index
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {
        return r.key === key;
      });

      if (index === -1 || index === state.index) {
        return state;
      }

      return changeIndex(state, index, backBehavior);
    },
    getStateForAction: function getStateForAction(state, action) {
      switch (action.type) {
        case 'JUMP_TO':
        case 'NAVIGATE':
          {
            var index = -1;

            if (action.type === 'NAVIGATE' && action.payload.key) {
              index = state.routes.findIndex(function (route) {
                return route.key === action.payload.key;
              });
            } else {
              index = state.routes.findIndex(function (route) {
                return route.name === action.payload.name;
              });
            }

            if (index === -1) {
              return null;
            }

            return changeIndex(_objectSpread({}, state, {
              routes: action.payload.params !== undefined ? state.routes.map(function (route, i) {
                return i === index ? _objectSpread({}, route, {
                  params: _objectSpread({}, route.params, {}, action.payload.params)
                }) : route;
              }) : state.routes
            }), index, backBehavior);
          }

        case 'GO_BACK':
          {
            if (state.history.length === 1) {
              return null;
            }

            var previousKey = state.history[state.history.length - 2].key;

            var _index = state.routes.findIndex(function (route) {
              return route.key === previousKey;
            });

            if (_index === -1) {
              return null;
            }

            return _objectSpread({}, state, {
              history: state.history.slice(0, -1),
              index: _index
            });
          }

        default:
          return _BaseRouter.default.getStateForAction(state, action);
      }
    },
    shouldActionChangeFocus: function shouldActionChangeFocus(action) {
      return action.type === 'NAVIGATE';
    },
    actionCreators: TabActions
  });

  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,