229befdbb67aa37fd0043a2b1f223c70
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forHorizontalIOS = forHorizontalIOS;
exports.forVerticalIOS = forVerticalIOS;
exports.forModalPresentationIOS = forModalPresentationIOS;
exports.forFadeFromBottomAndroid = forFadeFromBottomAndroid;
exports.forRevealFromBottomAndroid = forRevealFromBottomAndroid;
exports.forScaleFromCenterAndroid = forScaleFromCenterAndroid;
exports.forNoAnimation = forNoAnimation;

var _reactNative = require("react-native");

var _conditional = _interopRequireDefault(require("../utils/conditional"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var _reactNative$Animated = _reactNative.Animated,
    add = _reactNative$Animated.add,
    multiply = _reactNative$Animated.multiply;

function forHorizontalIOS(_ref) {
  var current = _ref.current,
      next = _ref.next,
      inverted = _ref.inverted,
      screen = _ref.layouts.screen;
  var translateFocused = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.width, 0],
    extrapolate: 'clamp'
  }), inverted);
  var translateUnfocused = next ? multiply(next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, screen.width * -0.3],
    extrapolate: 'clamp'
  }), inverted) : 0;
  var overlayOpacity = current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 0.07],
    extrapolate: 'clamp'
  });
  var shadowOpacity = current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 0.3],
    extrapolate: 'clamp'
  });
  return {
    cardStyle: {
      transform: [{
        translateX: translateFocused
      }, {
        translateX: translateUnfocused
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    },
    shadowStyle: {
      shadowOpacity: shadowOpacity
    }
  };
}

function forVerticalIOS(_ref2) {
  var current = _ref2.current,
      inverted = _ref2.inverted,
      screen = _ref2.layouts.screen;
  var translateY = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height, 0],
    extrapolate: 'clamp'
  }), inverted);
  return {
    cardStyle: {
      transform: [{
        translateY: translateY
      }]
    }
  };
}

function forModalPresentationIOS(_ref3) {
  var index = _ref3.index,
      current = _ref3.current,
      next = _ref3.next,
      inverted = _ref3.inverted,
      screen = _ref3.layouts.screen,
      insets = _ref3.insets;
  var isLandscape = screen.width > screen.height;
  var topOffset = isLandscape ? 0 : 10;
  var statusBarHeight = insets.top;
  var aspectRatio = screen.height / screen.width;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  var translateY = multiply(progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [screen.height, index === 0 ? 0 : topOffset, (index === 0 ? statusBarHeight : 0) - topOffset * aspectRatio]
  }), inverted);
  var overlayOpacity = progress.interpolate({
    inputRange: [0, 1, 1.0001, 2],
    outputRange: [0, 0.3, 1, 1]
  });
  var scale = isLandscape ? 1 : progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [1, 1, screen.width ? 1 - topOffset * 2 / screen.width : 1]
  });
  var borderRadius = isLandscape ? 0 : index === 0 ? progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [0, 0, 10]
  }) : 10;
  return {
    cardStyle: {
      overflow: 'hidden',
      borderTopLeftRadius: borderRadius,
      borderTopRightRadius: borderRadius,
      marginTop: index === 0 ? 0 : statusBarHeight,
      transform: [{
        translateY: translateY
      }, {
        scale: scale
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    }
  };
}

function forFadeFromBottomAndroid(_ref4) {
  var current = _ref4.current,
      inverted = _ref4.inverted,
      screen = _ref4.layouts.screen,
      closing = _ref4.closing;
  var translateY = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height * 0.08, 0],
    extrapolate: 'clamp'
  }), inverted);
  var opacity = (0, _conditional.default)(closing, current.progress, current.progress.interpolate({
    inputRange: [0, 0.5, 0.9, 1],
    outputRange: [0, 0.25, 0.7, 1]
  }));
  return {
    cardStyle: {
      opacity: opacity,
      transform: [{
        translateY: translateY
      }]
    }
  };
}

function forRevealFromBottomAndroid(_ref5) {
  var current = _ref5.current,
      next = _ref5.next,
      inverted = _ref5.inverted,
      screen = _ref5.layouts.screen;
  var containerTranslateY = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height, 0],
    extrapolate: 'clamp'
  }), inverted);
  var cardTranslateYFocused = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height * (95.9 / 100) * -1, 0],
    extrapolate: 'clamp'
  }), inverted);
  var cardTranslateYUnfocused = next ? multiply(next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, screen.height * (2 / 100) * -1],
    extrapolate: 'clamp'
  }), inverted) : 0;
  var overlayOpacity = current.progress.interpolate({
    inputRange: [0, 0.36, 1],
    outputRange: [0, 0.1, 0.1],
    extrapolate: 'clamp'
  });
  return {
    containerStyle: {
      overflow: 'hidden',
      transform: [{
        translateY: containerTranslateY
      }]
    },
    cardStyle: {
      transform: [{
        translateY: cardTranslateYFocused
      }, {
        translateY: cardTranslateYUnfocused
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    }
  };
}

function forScaleFromCenterAndroid(_ref6) {
  var current = _ref6.current,
      next = _ref6.next,
      closing = _ref6.closing;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  var opacity = progress.interpolate({
    inputRange: [0, 0.8, 1, 1.2, 2],
    outputRange: [0, 0.5, 1, 0.33, 0]
  });
  var scale = (0, _conditional.default)(closing, current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0.9, 1],
    extrapolate: 'clamp'
  }), progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [0.85, 1, 1.1]
  }));
  return {
    containerStyle: {
      opacity: opacity,
      transform: [{
        scale: scale
      }]
    }
  };
}

function forNoAnimation() {
  return {};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhcmRTdHlsZUludGVycG9sYXRvcnMudHN4Il0sIm5hbWVzIjpbIm11bHRpcGx5IiwiQW5pbWF0ZWQiLCJsYXlvdXRzIiwic2NyZWVuIiwidHJhbnNsYXRlRm9jdXNlZCIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsImV4dHJhcG9sYXRlIiwidHJhbnNsYXRlVW5mb2N1c2VkIiwibmV4dCIsIm92ZXJsYXlPcGFjaXR5Iiwic2hhZG93T3BhY2l0eSIsImNhcmRTdHlsZSIsInRyYW5zZm9ybSIsInRyYW5zbGF0ZVgiLCJvdmVybGF5U3R5bGUiLCJvcGFjaXR5Iiwic2hhZG93U3R5bGUiLCJ0cmFuc2xhdGVZIiwiaW5zZXRzIiwiaXNMYW5kc2NhcGUiLCJ0b3BPZmZzZXQiLCJzdGF0dXNCYXJIZWlnaHQiLCJhc3BlY3RSYXRpbyIsInByb2dyZXNzIiwiYWRkIiwiaW5kZXgiLCJzY2FsZSIsImJvcmRlclJhZGl1cyIsIm92ZXJmbG93IiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwibWFyZ2luVG9wIiwiY2xvc2luZyIsImN1cnJlbnQiLCJjb250YWluZXJUcmFuc2xhdGVZIiwiY2FyZFRyYW5zbGF0ZVlGb2N1c2VkIiwiY2FyZFRyYW5zbGF0ZVlVbmZvY3VzZWQiLCJjb250YWluZXJTdHlsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLHdCQUFBLENBQUE7Ozs7Ozs7OzRCQU0wQkMsWUFBQUEsQ0FBMUIsUTtJQUFNLEcseUJBQUEsRztJQUFPRCxRLHlCQUFBQSxROztBQUtOLFNBQUEsZ0JBQUEsQ0FBQSxJQUFBLEVBS3FEO0FBQUEsTUFMM0IsT0FLMkIsR0FBQSxJQUFBLENBTDNCLE9BSzJCO0FBQUEsTUFMM0IsSUFLMkIsR0FBQSxJQUFBLENBTDNCLElBSzJCO0FBQUEsTUFM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LEdBQUEsWUFBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLEVBRVosT0FBTyxDQUFQLFFBQUEsQ0FBQSxXQUFBLENBQTZCO0FBQzNCdEIsSUFBQUEsVUFBVSxFQUFFLENBQUEsQ0FBQSxFQURlLENBQ2YsQ0FEZTtBQUUzQkMsSUFBQUEsV0FBVyxFQUFFLENBQUEsR0FBQSxFQUZjLENBRWQsQ0FGYztBQUczQkMsSUFBQUEsV0FBVyxFQUFFO0FBSGMsR0FBN0IsQ0FGWSxFQU9aLFFBQVEsQ0FBUixXQUFBLENBQXFCO0FBQ25CRixJQUFBQSxVQUFVLEVBQUUsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQURPLENBQ1AsQ0FETztBQUVuQkMsSUFBQUEsV0FBVyxFQUFFLENBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBO0FBRk0sR0FBckIsQ0FQWSxDQUFkO0FBYUEsU0FBTztBQUNMZ0MsSUFBQUEsY0FBYyxFQUFFO0FBQ2R0QixNQUFBQSxPQURjLEVBQ2RBLE9BRGM7QUFFZEgsTUFBQUEsU0FBUyxFQUFFLENBQUM7QUFBRWMsUUFBQUEsS0FBQUEsRUFBQUE7QUFBRixPQUFEO0FBRkc7QUFEWCxHQUFQO0FBTUQ7O0FBRU0sU0FBQSxjQUFBLEdBQXNEO0FBQzNELFNBQUEsRUFBQTtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5pbWF0ZWQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IGNvbmRpdGlvbmFsIGZyb20gJy4uL3V0aWxzL2NvbmRpdGlvbmFsJztcbmltcG9ydCB7XG4gIFN0YWNrQ2FyZEludGVycG9sYXRpb25Qcm9wcyxcbiAgU3RhY2tDYXJkSW50ZXJwb2xhdGVkU3R5bGUsXG59IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3QgeyBhZGQsIG11bHRpcGx5IH0gPSBBbmltYXRlZDtcblxuLyoqXG4gKiBTdGFuZGFyZCBpT1Mtc3R5bGUgc2xpZGUgaW4gZnJvbSB0aGUgcmlnaHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JIb3Jpem9udGFsSU9TKHtcbiAgY3VycmVudCxcbiAgbmV4dCxcbiAgaW52ZXJ0ZWQsXG4gIGxheW91dHM6IHsgc2NyZWVuIH0sXG59OiBTdGFja0NhcmRJbnRlcnBvbGF0aW9uUHJvcHMpOiBTdGFja0NhcmRJbnRlcnBvbGF0ZWRTdHlsZSB7XG4gIGNvbnN0IHRyYW5zbGF0ZUZvY3VzZWQgPSBtdWx0aXBseShcbiAgICBjdXJyZW50LnByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgIG91dHB1dFJhbmdlOiBbc2NyZWVuLndpZHRoLCAwXSxcbiAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnLFxuICAgIH0pLFxuICAgIGludmVydGVkXG4gICk7XG5cbiAgY29uc3QgdHJhbnNsYXRlVW5mb2N1c2VkID0gbmV4dFxuICAgID8gbXVsdGlwbHkoXG4gICAgICAgIG5leHQucHJvZ3Jlc3MuaW50ZXJwb2xhdGUoe1xuICAgICAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgICAgICBvdXRwdXRSYW5nZTogWzAsIHNjcmVlbi53aWR0aCAqIC0wLjNdLFxuICAgICAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnLFxuICAgICAgICB9KSxcbiAgICAgICAgaW52ZXJ0ZWRcbiAgICAgIClcbiAgICA6IDA7XG5cbiAgY29uc3Qgb3ZlcmxheU9wYWNpdHkgPSBjdXJyZW50LnByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgb3V0cHV0UmFuZ2U6IFswLCAwLjA3XSxcbiAgICBleHRyYXBvbGF0ZTogJ2NsYW1wJyxcbiAgfSk7XG5cbiAgY29uc3Qgc2hhZG93T3BhY2l0eSA9IGN1cnJlbnQucHJvZ3Jlc3MuaW50ZXJwb2xhdGUoe1xuICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICBvdXRwdXRSYW5nZTogWzAsIDAuM10sXG4gICAgZXh0cmFwb2xhdGU6ICdjbGFtcCcsXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgY2FyZFN0eWxlOiB7XG4gICAgICB0cmFuc2Zvcm06IFtcbiAgICAgICAgLy8gVHJhbnNsYXRpb24gZm9yIHRoZSBhbmltYXRpb24gb2YgdGhlIGN1cnJlbnQgY2FyZFxuICAgICAgICB7IHRyYW5zbGF0ZVg6IHRyYW5zbGF0ZUZvY3VzZWQgfSxcbiAgICAgICAgLy8gVHJhbnNsYXRpb24gZm9yIHRoZSBhbmltYXRpb24gb2YgdGhlIGNhcmQgb24gdG9wIG9mIHRoaXNcbiAgICAgICAgeyB0cmFuc2xhdGVYOiB0cmFuc2xhdGVVbmZvY3VzZWQgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICBvdmVybGF5U3R5bGU6IHsgb3BhY2l0eTogb3ZlcmxheU9wYWNpdHkgfSxcbiAgICBzaGFkb3dTdHlsZTogeyBzaGFkb3dPcGFjaXR5IH0sXG4gIH07XG59XG5cbi8qKlxuICogU3RhbmRhcmQgaU9TLXN0eWxlIHNsaWRlIGluIGZyb20gdGhlIGJvdHRvbSAodXNlZCBmb3IgbW9kYWxzKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvclZlcnRpY2FsSU9TKHtcbiAgY3VycmVudCxcbiAgaW52ZXJ0ZWQsXG4gIGxheW91dHM6IHsgc2NyZWVuIH0sXG59OiBTdGFja0NhcmRJbnRlcnBvbGF0aW9uUHJvcHMpOiBTdGFja0NhcmRJbnRlcnBvbGF0ZWRTdHlsZSB7XG4gIGNvbnN0IHRyYW5zbGF0ZVkgPSBtdWx0aXBseShcbiAgICBjdXJyZW50LnByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgIG91dHB1dFJhbmdlOiBbc2NyZWVuLmhlaWdodCwgMF0sXG4gICAgICBleHRyYXBvbGF0ZTogJ2NsYW1wJyxcbiAgICB9KSxcbiAgICBpbnZlcnRlZFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgY2FyZFN0eWxlOiB7XG4gICAgICB0cmFuc2Zvcm06IFtcbiAgICAgICAgLy8gVHJhbnNsYXRpb24gZm9yIHRoZSBhbmltYXRpb24gb2YgdGhlIGN1cnJlbnQgY2FyZFxuICAgICAgICB7IHRyYW5zbGF0ZVkgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBTdGFuZGFyZCBpT1Mtc3R5bGUgbW9kYWwgYW5pbWF0aW9uIGluIGlPUyAxMy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvck1vZGFsUHJlc2VudGF0aW9uSU9TKHtcbiAgaW5kZXgsXG4gIGN1cnJlbnQsXG4gIG5leHQsXG4gIGludmVydGVkLFxuICBsYXlvdXRzOiB7IHNjcmVlbiB9LFxuICBpbnNldHMsXG59OiBTdGFja0NhcmRJbnRlcnBvbGF0aW9uUHJvcHMpOiBTdGFja0NhcmRJbnRlcnBvbGF0ZWRTdHlsZSB7XG4gIGNvbnN0IGlzTGFuZHNjYXBlID0gc2NyZWVuLndpZHRoID4gc2NyZWVuLmhlaWdodDtcbiAgY29uc3QgdG9wT2Zmc2V0ID0gaXNMYW5kc2NhcGUgPyAwIDogMTA7XG4gIGNvbnN0IHN0YXR1c0JhckhlaWdodCA9IGluc2V0cy50b3A7XG4gIGNvbnN0IGFzcGVjdFJhdGlvID0gc2NyZWVuLmhlaWdodCAvIHNjcmVlbi53aWR0aDtcblxuICBjb25zdCBwcm9ncmVzcyA9IGFkZChcbiAgICBjdXJyZW50LnByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgIG91dHB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICBleHRyYXBvbGF0ZTogJ2NsYW1wJyxcbiAgICB9KSxcbiAgICBuZXh0XG4gICAgICA/IG5leHQucHJvZ3Jlc3MuaW50ZXJwb2xhdGUoe1xuICAgICAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgICAgICBvdXRwdXRSYW5nZTogWzAsIDFdLFxuICAgICAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnLFxuICAgICAgICB9KVxuICAgICAgOiAwXG4gICk7XG5cbiAgY29uc3QgdHJhbnNsYXRlWSA9IG11bHRpcGx5KFxuICAgIHByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxLCAyXSxcbiAgICAgIG91dHB1dFJhbmdlOiBbXG4gICAgICAgIHNjcmVlbi5oZWlnaHQsXG4gICAgICAgIGluZGV4ID09PSAwID8gMCA6IHRvcE9mZnNldCxcbiAgICAgICAgKGluZGV4ID09PSAwID8gc3RhdHVzQmFySGVpZ2h0IDogMCkgLSB0b3BPZmZzZXQgKiBhc3BlY3RSYXRpbyxcbiAgICAgIF0sXG4gICAgfSksXG4gICAgaW52ZXJ0ZWRcbiAgKTtcblxuICBjb25zdCBvdmVybGF5T3BhY2l0eSA9IHByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICBpbnB1dFJhbmdlOiBbMCwgMSwgMS4wMDAxLCAyXSxcbiAgICBvdXRwdXRSYW5nZTogWzAsIDAuMywgMSwgMV0sXG4gIH0pO1xuXG4gIGNvbnN0IHNjYWxlID0gaXNMYW5kc2NhcGVcbiAgICA/IDFcbiAgICA6IHByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICAgICAgaW5wdXRSYW5nZTogWzAsIDEsIDJdLFxuICAgICAgICBvdXRwdXRSYW5nZTogW1xuICAgICAgICAgIDEsXG4gICAgICAgICAgMSxcbiAgICAgICAgICBzY3JlZW4ud2lkdGggPyAxIC0gKHRvcE9mZnNldCAqIDIpIC8gc2NyZWVuLndpZHRoIDogMSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuXG4gIGNvbnN0IGJvcmRlclJhZGl1cyA9IGlzTGFuZHNjYXBlXG4gICAgPyAwXG4gICAgOiBpbmRleCA9PT0gMFxuICAgID8gcHJvZ3Jlc3MuaW50ZXJwb2xhdGUoe1xuICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMSwgMl0sXG4gICAgICAgIG91dHB1dFJhbmdlOiBbMCwgMCwgMTBdLFxuICAgICAgfSlcbiAgICA6IDEwO1xuXG4gIHJldHVybiB7XG4gICAgY2FyZFN0eWxlOiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgbWFyZ2luVG9wOiBpbmRleCA9PT0gMCA/IDAgOiBzdGF0dXNCYXJIZWlnaHQsXG4gICAgICB0cmFuc2Zvcm06IFt7IHRyYW5zbGF0ZVkgfSwgeyBzY2FsZSB9XSxcbiAgICB9LFxuICAgIG92ZXJsYXlTdHlsZTogeyBvcGFjaXR5OiBvdmVybGF5T3BhY2l0eSB9LFxuICB9O1xufVxuXG4vKipcbiAqIFN0YW5kYXJkIEFuZHJvaWQtc3R5bGUgZmFkZSBpbiBmcm9tIHRoZSBib3R0b20gZm9yIEFuZHJvaWQgT3Jlby5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvckZhZGVGcm9tQm90dG9tQW5kcm9pZCh7XG4gIGN1cnJlbnQsXG4gIGludmVydGVkLFxuICBsYXlvdXRzOiB7IHNjcmVlbiB9LFxuICBjbG9zaW5nLFxufTogU3RhY2tDYXJkSW50ZXJwb2xhdGlvblByb3BzKTogU3RhY2tDYXJkSW50ZXJwb2xhdGVkU3R5bGUge1xuICBjb25zdCB0cmFuc2xhdGVZID0gbXVsdGlwbHkoXG4gICAgY3VycmVudC5wcm9ncmVzcy5pbnRlcnBvbGF0ZSh7XG4gICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICBvdXRwdXRSYW5nZTogW3NjcmVlbi5oZWlnaHQgKiAwLjA4LCAwXSxcbiAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnLFxuICAgIH0pLFxuICAgIGludmVydGVkXG4gICk7XG5cbiAgY29uc3Qgb3BhY2l0eSA9IGNvbmRpdGlvbmFsKFxuICAgIGNsb3NpbmcsXG4gICAgY3VycmVudC5wcm9ncmVzcyxcbiAgICBjdXJyZW50LnByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAwLjUsIDAuOSwgMV0sXG4gICAgICBvdXRwdXRSYW5nZTogWzAsIDAuMjUsIDAuNywgMV0sXG4gICAgfSlcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIGNhcmRTdHlsZToge1xuICAgICAgb3BhY2l0eSxcbiAgICAgIHRyYW5zZm9ybTogW3sgdHJhbnNsYXRlWSB9XSxcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIFN0YW5kYXJkIEFuZHJvaWQtc3R5bGUgcmV2ZWFsIGZyb20gdGhlIGJvdHRvbSBmb3IgQW5kcm9pZCBQaWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JSZXZlYWxGcm9tQm90dG9tQW5kcm9pZCh7XG4gIGN1cnJlbnQsXG4gIG5leHQsXG4gIGludmVydGVkLFxuICBsYXlvdXRzOiB7IHNjcmVlbiB9LFxufTogU3RhY2tDYXJkSW50ZXJwb2xhdGlvblByb3BzKTogU3RhY2tDYXJkSW50ZXJwb2xhdGVkU3R5bGUge1xuICBjb25zdCBjb250YWluZXJUcmFuc2xhdGVZID0gbXVsdGlwbHkoXG4gICAgY3VycmVudC5wcm9ncmVzcy5pbnRlcnBvbGF0ZSh7XG4gICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICBvdXRwdXRSYW5nZTogW3NjcmVlbi5oZWlnaHQsIDBdLFxuICAgICAgZXh0cmFwb2xhdGU6ICdjbGFtcCcsXG4gICAgfSksXG4gICAgaW52ZXJ0ZWRcbiAgKTtcblxuICBjb25zdCBjYXJkVHJhbnNsYXRlWUZvY3VzZWQgPSBtdWx0aXBseShcbiAgICBjdXJyZW50LnByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgIG91dHB1dFJhbmdlOiBbc2NyZWVuLmhlaWdodCAqICg5NS45IC8gMTAwKSAqIC0xLCAwXSxcbiAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnLFxuICAgIH0pLFxuICAgIGludmVydGVkXG4gICk7XG5cbiAgY29uc3QgY2FyZFRyYW5zbGF0ZVlVbmZvY3VzZWQgPSBuZXh0XG4gICAgPyBtdWx0aXBseShcbiAgICAgICAgbmV4dC5wcm9ncmVzcy5pbnRlcnBvbGF0ZSh7XG4gICAgICAgICAgaW5wdXRSYW5nZTogWzAsIDFdLFxuICAgICAgICAgIG91dHB1dFJhbmdlOiBbMCwgc2NyZWVuLmhlaWdodCAqICgyIC8gMTAwKSAqIC0xXSxcbiAgICAgICAgICBleHRyYXBvbGF0ZTogJ2NsYW1wJyxcbiAgICAgICAgfSksXG4gICAgICAgIGludmVydGVkXG4gICAgICApXG4gICAgOiAwO1xuXG4gIGNvbnN0IG92ZXJsYXlPcGFjaXR5ID0gY3VycmVudC5wcm9ncmVzcy5pbnRlcnBvbGF0ZSh7XG4gICAgaW5wdXRSYW5nZTogWzAsIDAuMzYsIDFdLFxuICAgIG91dHB1dFJhbmdlOiBbMCwgMC4xLCAwLjFdLFxuICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnLFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGNvbnRhaW5lclN0eWxlOiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0cmFuc2Zvcm06IFt7IHRyYW5zbGF0ZVk6IGNvbnRhaW5lclRyYW5zbGF0ZVkgfV0sXG4gICAgfSxcbiAgICBjYXJkU3R5bGU6IHtcbiAgICAgIHRyYW5zZm9ybTogW1xuICAgICAgICB7IHRyYW5zbGF0ZVk6IGNhcmRUcmFuc2xhdGVZRm9jdXNlZCB9LFxuICAgICAgICB7IHRyYW5zbGF0ZVk6IGNhcmRUcmFuc2xhdGVZVW5mb2N1c2VkIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgb3ZlcmxheVN0eWxlOiB7IG9wYWNpdHk6IG92ZXJsYXlPcGFjaXR5IH0sXG4gIH07XG59XG5cbi8qKlxuICogU3RhbmRhcmQgQW5kcm9pZC1zdHlsZSByZXZlYWwgZnJvbSB0aGUgYm90dG9tIGZvciBBbmRyb2lkIFEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JTY2FsZUZyb21DZW50ZXJBbmRyb2lkKHtcbiAgY3VycmVudCxcbiAgbmV4dCxcbiAgY2xvc2luZyxcbn06IFN0YWNrQ2FyZEludGVycG9sYXRpb25Qcm9wcyk6IFN0YWNrQ2FyZEludGVycG9sYXRlZFN0eWxlIHtcbiAgY29uc3QgcHJvZ3Jlc3MgPSBhZGQoXG4gICAgY3VycmVudC5wcm9ncmVzcy5pbnRlcnBvbGF0ZSh7XG4gICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICBvdXRwdXRSYW5nZTogWzAsIDFdLFxuICAgICAgZXh0cmFwb2xhdGU6ICdjbGFtcCcsXG4gICAgfSksXG4gICAgbmV4dFxuICAgICAgPyBuZXh0LnByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgb3V0cHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgICAgICBleHRyYXBvbGF0ZTogJ2NsYW1wJyxcbiAgICAgICAgfSlcbiAgICAgIDogMFxuICApO1xuXG4gIGNvbnN0IG9wYWNpdHkgPSBwcm9ncmVzcy5pbnRlcnBvbGF0ZSh7XG4gICAgaW5wdXRSYW5nZTogWzAsIDAuOCwgMSwgMS4yLCAyXSxcbiAgICBvdXRwdXRSYW5nZTogWzAsIDAuNSwgMSwgMC4zMywgMF0sXG4gIH0pO1xuXG4gIGNvbnN0IHNjYWxlID0gY29uZGl0aW9uYWwoXG4gICAgY2xvc2luZyxcbiAgICBjdXJyZW50LnByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgIG91dHB1dFJhbmdlOiBbMC45LCAxXSxcbiAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnLFxuICAgIH0pLFxuICAgIHByb2dyZXNzLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxLCAyXSxcbiAgICAgIG91dHB1dFJhbmdlOiBbMC44NSwgMSwgMS4xXSxcbiAgICB9KVxuICApO1xuXG4gIHJldHVybiB7XG4gICAgY29udGFpbmVyU3R5bGU6IHtcbiAgICAgIG9wYWNpdHksXG4gICAgICB0cmFuc2Zvcm06IFt7IHNjYWxlIH1dLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JOb0FuaW1hdGlvbigpOiBTdGFja0NhcmRJbnRlcnBvbGF0ZWRTdHlsZSB7XG4gIHJldHVybiB7fTtcbn1cbiJdfQ==