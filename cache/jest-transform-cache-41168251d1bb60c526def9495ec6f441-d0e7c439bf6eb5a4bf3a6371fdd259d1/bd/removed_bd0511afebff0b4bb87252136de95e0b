7098bfd08c1845e9d0728d78f027e074
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _removedModule = _interopRequireDefault(require("./removedModule"));

Object.defineProperties(module.exports, {
  AdMobBanner: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { AdMobBanner } from 'expo' -> import { AdMobBanner } from 'expo-ads-admob'", 'AdMobBanner', 'expo-ads-admob');
    }
  },
  AdMobInterstitial: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { AdMobInterstitial } from 'expo' -> import { AdMobInterstitial } from 'expo-ads-admob'", 'AdMobInterstitial', 'expo-ads-admob');
    }
  },
  AdMobRewarded: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { AdMobRewarded } from 'expo' -> import { AdMobRewarded } from 'expo-ads-admob'", 'AdMobRewarded', 'expo-ads-admob');
    }
  },
  Animated: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Animated } from 'expo' -> import Animated from 'react-native-reanimated'", 'Animated', 'react-native-reanimated');
    }
  },
  Easing: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Easing } from 'expo' -> import { Easing } from 'react-native-reanimated'", 'Easing', 'react-native-reanimated');
    }
  },
  Transition: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Transition } from 'expo' -> import { Transition } from 'react-native-reanimated'", 'Transition', 'react-native-reanimated');
    }
  },
  Transitioning: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Transitioning } from 'expo' -> import { Transitioning } from 'react-native-reanimated'", 'Transitioning', 'react-native-reanimated');
    }
  },
  PublisherBanner: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { PublisherBanner } from 'expo' -> import { PublisherBanner } from 'expo-ads-admob'", 'PublisherBanner', 'expo-ads-admob');
    }
  },
  FacebookAds: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { FacebookAds } from 'expo' -> import * as FacebookAds from 'expo-ads-facebook'", 'FacebookAds', 'expo-ads-facebook');
    }
  },
  Amplitude: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Amplitude } from 'expo' -> import * as Amplitude from 'expo-analytics-amplitude'", 'Amplitude', 'expo-analytics-amplitude');
    }
  },
  Segment: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Segment } from 'expo' -> import * as Segment from 'expo-analytics-segment'", 'Segment', 'expo-analytics-segment');
    }
  },
  AppAuth: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { AppAuth } from 'expo' -> import * as AppAuth from 'expo-app-auth'", 'AppAuth', 'expo-app-auth');
    }
  },
  Asset: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Asset } from 'expo' -> import { Asset } from 'expo-asset'", 'Asset', 'expo-asset');
    }
  },
  Audio: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Audio } from 'expo' -> import { Audio } from 'expo-av'", 'Audio', 'expo-av');
    }
  },
  Video: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Video } from 'expo' -> import { Video } from 'expo-av'", 'Video', 'expo-av');
    }
  },
  BackgroundFetch: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { BackgroundFetch } from 'expo' -> import * as BackgroundFetch from 'expo-background-fetch'", 'BackgroundFetch', 'expo-background-fetch');
    }
  },
  BarCodeScanner: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { BarCodeScanner } from 'expo' -> import { BarCodeScanner } from 'expo-barcode-scanner'", 'BarCodeScanner', 'expo-barcode-scanner');
    }
  },
  BlurView: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { BlurView } from 'expo' -> import { BlurView } from 'expo-blur'", 'BlurView', 'expo-blur');
    }
  },
  Brightness: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Brightness } from 'expo' -> import * as Brightness from 'expo-brightness'", 'Brightness', 'expo-brightness');
    }
  },
  Calendar: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Calendar } from 'expo' -> import * as Calendar from 'expo-calendar'", 'Calendar', 'expo-calendar');
    }
  },
  Camera: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Camera } from 'expo' -> import { Camera } from 'expo-camera'", 'Camera', 'expo-camera');
    }
  },
  Constants: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Constants } from 'expo' -> import Constants from 'expo-constants'", 'Constants', 'expo-constants');
    }
  },
  Contacts: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Contacts } from 'expo' -> import * as Contacts from 'expo-contacts'", 'Contacts', 'expo-contacts');
    }
  },
  Crypto: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Crypto } from 'expo' -> import * as Crypto from 'expo-crypto'", 'Crypto', 'expo-crypto');
    }
  },
  DocumentPicker: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { DocumentPicker } from 'expo' -> import * as DocumentPicker from 'expo-document-picker'", 'DocumentPicker', 'expo-document-picker');
    }
  },
  ErrorRecovery: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { ErrorRecovery } from 'expo' -> import * as ErrorRecovery from 'expo-error-recovery'", 'ErrorRecovery', 'expo-error-recovery');
    }
  },
  FaceDetector: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { FaceDetector } from 'expo' -> import * as FaceDetector from 'expo-face-detector'", 'FaceDetector', 'expo-face-detector');
    }
  },
  Facebook: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Facebook } from 'expo' -> import * as Facebook from 'expo-facebook'", 'Facebook', 'expo-facebook');
    }
  },
  FileSystem: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { FileSystem } from 'expo' -> import * as FileSystem from 'expo-file-system'", 'FileSystem', 'expo-file-system');
    }
  },
  Font: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Font } from 'expo' -> import * as Font from 'expo-font'", 'Font', 'expo-font');
    }
  },
  GL: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { GL } from 'expo' -> import * as GL from 'expo-gl'", 'GL', 'expo-gl');
    }
  },
  GLView: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { GLView } from 'expo' -> import { GLView } from 'expo-gl'", 'GLView', 'expo-gl');
    }
  },
  GoogleSignIn: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { GoogleSignIn } from 'expo' -> import * as GoogleSignIn from 'expo-google-sign-in'", 'GoogleSignIn', 'expo-google-sign-in');
    }
  },
  Google: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Google } from 'expo' -> import * as Google from 'expo-google-app-auth'", 'Google', 'expo-google-app-auth');
    }
  },
  Haptic: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Haptic } from 'expo' -> import * as Haptic from 'expo-haptics'", 'Haptic', 'expo-haptics');
    }
  },
  Haptics: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Haptics } from 'expo' -> import * as Haptics from 'expo-haptics'", 'Haptics', 'expo-haptics');
    }
  },
  ImageManipulator: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { ImageManipulator } from 'expo' -> import * as ImageManipulator from 'expo-image-manipulator'", 'ImageManipulator', 'expo-image-manipulator');
    }
  },
  ImagePicker: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { ImagePicker } from 'expo' -> import * as ImagePicker from 'expo-image-picker'", 'ImagePicker', 'expo-image-picker');
    }
  },
  IntentLauncher: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { IntentLauncher } from 'expo' -> import * as IntentLauncher from 'expo-intent-launcher'", 'IntentLauncher', 'expo-intent-launcher');
    }
  },
  IntentLauncherAndroid: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { IntentLauncherAndroid } from 'expo' -> import * as IntentLauncherAndroid from 'expo-intent-launcher'", 'IntentLauncherAndroid', 'expo-intent-launcher');
    }
  },
  KeepAwake: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { KeepAwake } from 'expo' -> import KeepAwake from 'expo-keep-awake'", 'KeepAwake', 'expo-keep-awake');
    }
  },
  LinearGradient: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { LinearGradient } from 'expo' -> import { LinearGradient } from 'expo-linear-gradient'", 'LinearGradient', 'expo-linear-gradient');
    }
  },
  LocalAuthentication: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { LocalAuthentication } from 'expo' -> import * as LocalAuthentication from 'expo-local-authentication'", 'LocalAuthentication', 'expo-local-authentication');
    }
  },
  Localization: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Localization } from 'expo' -> import * as Localization from 'expo-localization'", 'Localization', 'expo-localization');
    }
  },
  Location: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Location } from 'expo' -> import * as Location from 'expo-location'", 'Location', 'expo-location');
    }
  },
  MailComposer: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { MailComposer } from 'expo' -> import * as MailComposer from 'expo-mail-composer'", 'MailComposer', 'expo-mail-composer');
    }
  },
  MediaLibrary: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { MediaLibrary } from 'expo' -> import * as MediaLibrary from 'expo-media-library'", 'MediaLibrary', 'expo-media-library');
    }
  },
  Permissions: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Permissions } from 'expo' -> import * as Permissions from 'expo-permissions'", 'Permissions', 'expo-permissions');
    }
  },
  Print: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Print } from 'expo' -> import * as Print from 'expo-print'", 'Print', 'expo-print');
    }
  },
  Random: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Random } from 'expo' -> import * as Random from 'expo-random'", 'Random', 'expo-random');
    }
  },
  SecureStore: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { SecureStore } from 'expo' -> import * as SecureStore from 'expo-secure-store'", 'SecureStore', 'expo-secure-store');
    }
  },
  Accelerometer: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Accelerometer } from 'expo' -> import { Accelerometer } from 'expo-sensors'", 'Accelerometer', 'expo-sensors');
    }
  },
  Barometer: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Barometer } from 'expo' -> import { Barometer } from 'expo-sensors'", 'Barometer', 'expo-sensors');
    }
  },
  Gyroscope: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Gyroscope } from 'expo' -> import { Gyroscope } from 'expo-sensors'", 'Gyroscope', 'expo-sensors');
    }
  },
  Magnetometer: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Magnetometer } from 'expo' -> import { Magnetometer } from 'expo-sensors'", 'Magnetometer', 'expo-sensors');
    }
  },
  MagnetometerUncalibrated: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { MagnetometerUncalibrated } from 'expo' -> import { MagnetometerUncalibrated } from 'expo-sensors'", 'MagnetometerUncalibrated', 'expo-sensors');
    }
  },
  Sensors: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Sensors } from 'expo' -> import * as Sensors from 'expo-sensors'", 'Sensors', 'expo-sensors');
    }
  },
  Sharing: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Sharing } from 'expo' -> import * as Sharing from 'expo-sharing'", 'Sharing', 'expo-sharing');
    }
  },
  SMS: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { SMS } from 'expo' -> import * as SMS from 'expo-sms'", 'SMS', 'expo-sms');
    }
  },
  Speech: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Speech } from 'expo' -> import * as Speech from 'expo-speech'", 'Speech', 'expo-speech');
    }
  },
  SQLite: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { SQLite } from 'expo' -> import { SQLite } from 'expo-sqlite'", 'SQLite', 'expo-sqlite');
    }
  },
  StoreReview: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { StoreReview } from 'expo' -> import { StoreReview } from 'expo-store-review'", 'StoreReview', 'expo-store-review');
    }
  },
  TaskManager: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { TaskManager } from 'expo' -> import * as TaskManager from 'expo-task-manager'", 'TaskManager', 'expo-task-manager');
    }
  },
  WebBrowser: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { WebBrowser } from 'expo' -> import * as WebBrowser from 'expo-web-browser'", 'WebBrowser', 'expo-web-browser');
    }
  },
  GestureHandler: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { GestureHandler } from 'expo' -> import * as GestureHandler from 'react-native-gesture-handler'", 'GestureHandler', 'react-native-gesture-handler');
    }
  },
  Icon: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Icon } from 'expo' -> import * as Icon from '@expo/vector-icons'", 'Icon', '@expo/vector-icons');
    }
  },
  MapView: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { MapView } from 'expo' -> import MapView from 'react-native-maps'", 'MapView', 'react-native-maps');
    }
  },
  Svg: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { Svg } from 'expo' -> import * as Svg from 'react-native-svg'", 'Svg', 'react-native-svg');
    }
  },
  takeSnapshotAsync: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { takeSnapshotAsync } from 'expo' -> import { captureRef as takeSnapshotAsync } from 'react-native-view-shot'", 'takeSnapshotAsync', 'react-native-view-shot');
    }
  },
  WebView: {
    enumerable: true,
    get: function get() {
      (0, _removedModule.default)("import { WebView } from 'expo' -> import { WebView } from 'react-native-webview'", 'WebView', 'react-native-webview');
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,