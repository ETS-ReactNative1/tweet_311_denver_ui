{"version":3,"sources":["../../src/ScreenOrientation/ScreenOrientation.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationInfo,\n  OrientationLock,\n  PlatformOrientationInfo,\n  SizeClassIOS,\n  WebOrientationLock,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  SizeClassIOS,\n  OrientationInfo,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const {\n    screenOrientationConstantAndroid,\n    screenOrientationArrayIOS,\n    screenOrientationLockWeb,\n  } = options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (let orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n  await ExpoScreenOrientation.unlockAsync();\n}\n\nexport async function getOrientationAsync(): Promise<OrientationInfo> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions` event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        [orientationLock, orientationInfo] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}\n"],"sourceRoot":""}