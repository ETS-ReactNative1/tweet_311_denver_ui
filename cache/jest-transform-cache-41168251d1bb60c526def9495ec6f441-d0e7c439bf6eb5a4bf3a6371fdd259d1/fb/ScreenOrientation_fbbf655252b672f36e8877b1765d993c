886f4708d260a24cb16f5cb7c7ee0275
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lockAsync = lockAsync;
exports.lockPlatformAsync = lockPlatformAsync;
exports.unlockAsync = unlockAsync;
exports.getOrientationAsync = getOrientationAsync;
exports.getOrientationLockAsync = getOrientationLockAsync;
exports.getPlatformOrientationLockAsync = getPlatformOrientationLockAsync;
exports.supportsOrientationLockAsync = supportsOrientationLockAsync;
exports.addOrientationChangeListener = addOrientationChangeListener;
exports.removeOrientationChangeListeners = removeOrientationChangeListeners;
exports.removeOrientationChangeListener = removeOrientationChangeListener;
Object.defineProperty(exports, "Orientation", {
  enumerable: true,
  get: function get() {
    return _ScreenOrientation.Orientation;
  }
});
Object.defineProperty(exports, "OrientationLock", {
  enumerable: true,
  get: function get() {
    return _ScreenOrientation.OrientationLock;
  }
});
Object.defineProperty(exports, "SizeClassIOS", {
  enumerable: true,
  get: function get() {
    return _ScreenOrientation.SizeClassIOS;
  }
});
Object.defineProperty(exports, "WebOrientationLock", {
  enumerable: true,
  get: function get() {
    return _ScreenOrientation.WebOrientationLock;
  }
});

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _core = require("@unimodules/core");

var _ExpoScreenOrientation = _interopRequireDefault(require("./ExpoScreenOrientation"));

var _ScreenOrientation = require("./ScreenOrientation.types");

var _orientationChangeEmitter = new _core.EventEmitter(_ExpoScreenOrientation.default);

var _orientationChangeSubscribers = [];
var _lastOrientationLock = _ScreenOrientation.OrientationLock.UNKNOWN;

function lockAsync(orientationLock) {
  var orientationLocks;
  return _regenerator.default.async(function lockAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (_ExpoScreenOrientation.default.lockAsync) {
            _context.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('ScreenOrientation', 'lockAsync');

        case 2:
          orientationLocks = Object.values(_ScreenOrientation.OrientationLock);

          if (orientationLocks.includes(orientationLock)) {
            _context.next = 5;
            break;
          }

          throw new TypeError("Invalid Orientation Lock: " + orientationLock);

        case 5:
          if (!(orientationLock === _ScreenOrientation.OrientationLock.OTHER)) {
            _context.next = 7;
            break;
          }

          return _context.abrupt("return");

        case 7:
          _context.next = 9;
          return _regenerator.default.awrap(_ExpoScreenOrientation.default.lockAsync(orientationLock));

        case 9:
          _lastOrientationLock = orientationLock;

        case 10:
        case "end":
          return _context.stop();
      }
    }
  });
}

function lockPlatformAsync(options) {
  var screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb, platformOrientationParam, orientations, _iterator, _isArray, _i, _ref, _orientation, webOrientationLocks;

  return _regenerator.default.async(function lockPlatformAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (_ExpoScreenOrientation.default.lockPlatformAsync) {
            _context2.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');

        case 2:
          screenOrientationConstantAndroid = options.screenOrientationConstantAndroid, screenOrientationArrayIOS = options.screenOrientationArrayIOS, screenOrientationLockWeb = options.screenOrientationLockWeb;

          if (!(_core.Platform.OS === 'android' && screenOrientationConstantAndroid)) {
            _context2.next = 9;
            break;
          }

          if (!isNaN(screenOrientationConstantAndroid)) {
            _context2.next = 6;
            break;
          }

          throw new TypeError("lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with " + screenOrientationConstantAndroid);

        case 6:
          platformOrientationParam = screenOrientationConstantAndroid;
          _context2.next = 37;
          break;

        case 9:
          if (!(_core.Platform.OS === 'ios' && screenOrientationArrayIOS)) {
            _context2.next = 32;
            break;
          }

          if (Array.isArray(screenOrientationArrayIOS)) {
            _context2.next = 12;
            break;
          }

          throw new TypeError("lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with " + screenOrientationArrayIOS);

        case 12:
          orientations = Object.values(_ScreenOrientation.Orientation);
          _iterator = screenOrientationArrayIOS, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();

        case 14:
          if (!_isArray) {
            _context2.next = 20;
            break;
          }

          if (!(_i >= _iterator.length)) {
            _context2.next = 17;
            break;
          }

          return _context2.abrupt("break", 29);

        case 17:
          _ref = _iterator[_i++];
          _context2.next = 24;
          break;

        case 20:
          _i = _iterator.next();

          if (!_i.done) {
            _context2.next = 23;
            break;
          }

          return _context2.abrupt("break", 29);

        case 23:
          _ref = _i.value;

        case 24:
          _orientation = _ref;

          if (orientations.includes(_orientation)) {
            _context2.next = 27;
            break;
          }

          throw new TypeError("lockPlatformAsync iOS platform: " + _orientation + " is not a valid Orientation");

        case 27:
          _context2.next = 14;
          break;

        case 29:
          platformOrientationParam = screenOrientationArrayIOS;
          _context2.next = 37;
          break;

        case 32:
          if (!(_core.Platform.OS === 'web' && screenOrientationLockWeb)) {
            _context2.next = 37;
            break;
          }

          webOrientationLocks = Object.values(_ScreenOrientation.WebOrientationLock);

          if (webOrientationLocks.includes(screenOrientationLockWeb)) {
            _context2.next = 36;
            break;
          }

          throw new TypeError("Invalid Web Orientation Lock: " + screenOrientationLockWeb);

        case 36:
          platformOrientationParam = screenOrientationLockWeb;

        case 37:
          if (platformOrientationParam) {
            _context2.next = 39;
            break;
          }

          throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');

        case 39:
          _context2.next = 41;
          return _regenerator.default.awrap(_ExpoScreenOrientation.default.lockPlatformAsync(platformOrientationParam));

        case 41:
          _lastOrientationLock = _ScreenOrientation.OrientationLock.OTHER;

        case 42:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function unlockAsync() {
  return _regenerator.default.async(function unlockAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (_ExpoScreenOrientation.default.unlockAsync) {
            _context3.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('ScreenOrientation', 'unlockAsync');

        case 2:
          _context3.next = 4;
          return _regenerator.default.awrap(_ExpoScreenOrientation.default.unlockAsync());

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function getOrientationAsync() {
  return _regenerator.default.async(function getOrientationAsync$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          if (_ExpoScreenOrientation.default.getOrientationAsync) {
            _context4.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('ScreenOrientation', 'getOrientationAsync');

        case 2:
          _context4.next = 4;
          return _regenerator.default.awrap(_ExpoScreenOrientation.default.getOrientationAsync());

        case 4:
          return _context4.abrupt("return", _context4.sent);

        case 5:
        case "end":
          return _context4.stop();
      }
    }
  });
}

function getOrientationLockAsync() {
  return _regenerator.default.async(function getOrientationLockAsync$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          if (_ExpoScreenOrientation.default.getOrientationLockAsync) {
            _context5.next = 2;
            break;
          }

          return _context5.abrupt("return", _lastOrientationLock);

        case 2:
          _context5.next = 4;
          return _regenerator.default.awrap(_ExpoScreenOrientation.default.getOrientationLockAsync());

        case 4:
          return _context5.abrupt("return", _context5.sent);

        case 5:
        case "end":
          return _context5.stop();
      }
    }
  });
}

function getPlatformOrientationLockAsync() {
  var platformOrientationLock;
  return _regenerator.default.async(function getPlatformOrientationLockAsync$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          _context6.next = 2;
          return _regenerator.default.awrap(_ExpoScreenOrientation.default.getPlatformOrientationLockAsync());

        case 2:
          platformOrientationLock = _context6.sent;

          if (!(_core.Platform.OS === 'android')) {
            _context6.next = 7;
            break;
          }

          return _context6.abrupt("return", {
            screenOrientationConstantAndroid: platformOrientationLock
          });

        case 7:
          if (!(_core.Platform.OS === 'ios')) {
            _context6.next = 11;
            break;
          }

          return _context6.abrupt("return", {
            screenOrientationArrayIOS: platformOrientationLock
          });

        case 11:
          if (!(_core.Platform.OS === 'web')) {
            _context6.next = 15;
            break;
          }

          return _context6.abrupt("return", {
            screenOrientationLockWeb: platformOrientationLock
          });

        case 15:
          return _context6.abrupt("return", {});

        case 16:
        case "end":
          return _context6.stop();
      }
    }
  });
}

function supportsOrientationLockAsync(orientationLock) {
  var orientationLocks;
  return _regenerator.default.async(function supportsOrientationLockAsync$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          if (_ExpoScreenOrientation.default.supportsOrientationLockAsync) {
            _context7.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');

        case 2:
          orientationLocks = Object.values(_ScreenOrientation.OrientationLock);

          if (orientationLocks.includes(orientationLock)) {
            _context7.next = 5;
            break;
          }

          throw new TypeError("Invalid Orientation Lock: " + orientationLock);

        case 5:
          _context7.next = 7;
          return _regenerator.default.awrap(_ExpoScreenOrientation.default.supportsOrientationLockAsync(orientationLock));

        case 7:
          return _context7.abrupt("return", _context7.sent);

        case 8:
        case "end":
          return _context7.stop();
      }
    }
  });
}

function getEventName() {
  return _core.Platform.OS === 'ios' || _core.Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';
}

function addOrientationChangeListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError("addOrientationChangeListener cannot be called with " + listener);
  }

  var subscription = _orientationChangeEmitter.addListener(getEventName(), function _callee(update) {
    var orientationInfo, orientationLock, _ref2, _ref3;

    return _regenerator.default.async(function _callee$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (!(_core.Platform.OS === 'ios' || _core.Platform.OS === 'web')) {
              _context8.next = 5;
              break;
            }

            orientationLock = update.orientationLock;
            orientationInfo = update.orientationInfo;
            _context8.next = 11;
            break;

          case 5:
            _context8.next = 7;
            return _regenerator.default.awrap(Promise.all([getOrientationLockAsync(), getOrientationAsync()]));

          case 7:
            _ref2 = _context8.sent;
            _ref3 = (0, _slicedToArray2.default)(_ref2, 2);
            orientationLock = _ref3[0];
            orientationInfo = _ref3[1];

          case 11:
            listener({
              orientationInfo: orientationInfo,
              orientationLock: orientationLock
            });

          case 12:
          case "end":
            return _context8.stop();
        }
      }
    });
  });

  _orientationChangeSubscribers.push(subscription);

  return subscription;
}

function removeOrientationChangeListeners() {
  var i = _orientationChangeSubscribers.length;

  while (i--) {
    var subscriber = _orientationChangeSubscribers[i];
    subscriber.remove();

    _orientationChangeSubscribers.pop();
  }
}

function removeOrientationChangeListener(subscription) {
  if (!subscription || !subscription.remove) {
    throw new TypeError("Must pass in a valid subscription");
  }

  subscription.remove();
  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(function (sub) {
    return sub !== subscription;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,