{"version":3,"sources":["renderApplication.js"],"names":["AppContainer","require","React","ReactFabricIndicator","invariant","renderApplication","RootComponent","initialProps","rootTag","WrapperComponent","fabric","showFabricIndicator","scopedPerformanceLogger","renderable","GlobalPerformanceLogger","startTimespan","render","stopTimespan","module","exports"],"mappings":"AAUA;;;;;;AAGA;;AAEA;;AAHA,IAAMA,YAAY,GAAGC,OAAO,kBAA5B;;AAIA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,oBAAoB,GAAGF,OAAO,0BAApC;;AAEA,IAAMG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;;AAGAA,OAAO,4BAAP;;AAEA,SAASI,iBAAT,CACEC,aADF,EAEEC,YAFF,EAGEC,OAHF,EAIEC,gBAJF,EAKEC,MALF,EAMEC,mBANF,EAOEC,uBAPF,EAQE;AACAR,EAAAA,SAAS,CAACI,OAAD,EAAU,8CAAV,EAA0DA,OAA1D,CAAT;AAEA,MAAMK,UAAU,GACd,oBAAC,iCAAD,CAA0B,QAA1B;AACE,IAAA,KAAK,EAAED,uBAAF,WAAEA,uBAAF,GAA6BE;AADpC,KAEE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEN,OAAvB;AAAgC,IAAA,gBAAgB,EAAEC;AAAlD,KACE,oBAAC,aAAD,6BAAmBF,YAAnB;AAAiC,IAAA,OAAO,EAAEC;AAA1C,KADF,EAEGE,MAAM,KAAK,IAAX,IAAmBC,mBAAmB,KAAK,IAA3C,GACC,oBAAC,oBAAD,OADD,GAEG,IAJN,CAFF,CADF;;AAYAG,mCAAwBC,aAAxB,CAAsC,gCAAtC;;AACA,MAAIL,MAAJ,EAAY;AACVT,IAAAA,OAAO,iCAAP,CAAyCe,MAAzC,CAAgDH,UAAhD,EAA4DL,OAA5D;AACD,GAFD,MAEO;AACLP,IAAAA,OAAO,iCAAP,CAAyCe,MAAzC,CAAgDH,UAAhD,EAA4DL,OAA5D;AACD;;AACDM,mCAAwBG,YAAxB,CAAqC,gCAArC;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBd,iBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst AppContainer = require('./AppContainer');\nimport GlobalPerformanceLogger from '../Utilities/GlobalPerformanceLogger';\nimport type {IPerformanceLogger} from '../Utilities/createPerformanceLogger';\nimport PerformanceLoggerContext from '../Utilities/PerformanceLoggerContext';\nconst React = require('react');\nconst ReactFabricIndicator = require('./ReactFabricIndicator');\n\nconst invariant = require('invariant');\n\n// require BackHandler so it sets the default handler that exits the app if no listeners respond\nrequire('../Utilities/BackHandler');\n\nfunction renderApplication<Props: Object>(\n  RootComponent: React.ComponentType<Props>,\n  initialProps: Props,\n  rootTag: any,\n  WrapperComponent?: ?React.ComponentType<*>,\n  fabric?: boolean,\n  showFabricIndicator?: boolean,\n  scopedPerformanceLogger?: IPerformanceLogger,\n) {\n  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);\n\n  const renderable = (\n    <PerformanceLoggerContext.Provider\n      value={scopedPerformanceLogger ?? GlobalPerformanceLogger}>\n      <AppContainer rootTag={rootTag} WrapperComponent={WrapperComponent}>\n        <RootComponent {...initialProps} rootTag={rootTag} />\n        {fabric === true && showFabricIndicator === true ? (\n          <ReactFabricIndicator />\n        ) : null}\n      </AppContainer>\n    </PerformanceLoggerContext.Provider>\n  );\n\n  GlobalPerformanceLogger.startTimespan('renderApplication_React_render');\n  if (fabric) {\n    require('../Renderer/shims/ReactFabric').render(renderable, rootTag);\n  } else {\n    require('../Renderer/shims/ReactNative').render(renderable, rootTag);\n  }\n  GlobalPerformanceLogger.stopTimespan('renderApplication_React_render');\n}\n\nmodule.exports = renderApplication;\n"]}