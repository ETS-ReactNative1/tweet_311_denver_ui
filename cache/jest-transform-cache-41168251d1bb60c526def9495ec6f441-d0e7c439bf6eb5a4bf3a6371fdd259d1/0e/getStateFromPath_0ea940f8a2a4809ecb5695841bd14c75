52dd26429aa7bef11c2f9e7a01afc16a
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getStateFromPath;

var _escapeStringRegexp = _interopRequireDefault(require("escape-string-regexp"));

var _queryString = _interopRequireDefault(require("query-string"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function getStateFromPath(path) {
  var _ref;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (path === '') {
    return undefined;
  }

  var initialRoutes = [];

  var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(options).map(function (key) {
    return createNormalizedConfigs(key, options, [], initialRoutes);
  })));

  var result;
  var current;
  var remaining = path.replace(/[/]+/, '/').replace(/^\//, '').replace(/\?.*/, '');

  while (remaining) {
    var routeNames = void 0;
    var params = void 0;

    var _loop = function _loop(config) {
      var match = remaining.match(config.match);

      if (match) {
        routeNames = (0, _toConsumableArray2.default)(config.routeNames);
        var paramPatterns = config.pattern.split('/').filter(function (p) {
          return p.startsWith(':');
        });

        if (paramPatterns.length) {
          params = paramPatterns.reduce(function (acc, p, i) {
            var key = p.replace(/^:/, '');
            var value = match[i + 1];
            acc[key] = config.parse && config.parse[key] ? config.parse[key](value) : value;
            return acc;
          }, {});
        }

        remaining = remaining.replace(match[0], '');
        return "break";
      }
    };

    for (var _iterator = configs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref2;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref2 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref2 = _i.value;
      }

      var config = _ref2;

      var _ret = _loop(config);

      if (_ret === "break") break;
    }

    if (routeNames === undefined) {
      var segments = remaining.split('/');
      routeNames = [decodeURIComponent(segments[0])];
      segments.shift();
      remaining = segments.join('/');
    }

    var state = void 0;
    var routeName = routeNames.shift();
    var initialRoute = findInitialRoute(routeName, initialRoutes);
    state = createNestedState(initialRoute, routeName, routeNames.length === 0, params);

    if (routeNames.length > 0) {
      var nestedState = state;

      while (routeName = routeNames.shift()) {
        initialRoute = findInitialRoute(routeName, initialRoutes);
        nestedState.routes[nestedState.index || 0].state = createNestedState(initialRoute, routeName, routeNames.length === 0, params);

        if (routeNames.length > 0) {
          nestedState = nestedState.routes[nestedState.index || 0].state;
        }
      }
    }

    if (current) {
      var _current2;

      while ((_current = current) === null || _current === void 0 ? void 0 : _current.routes[current.index || 0].state) {
        var _current;

        current = current.routes[current.index || 0].state;
      }

      current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;
    } else {
      result = state;
    }

    current = state;
  }

  if (current == null || result == null) {
    return undefined;
  }

  var query = path.split('?')[1];

  if (query) {
    var _current4;

    while ((_current3 = current) === null || _current3 === void 0 ? void 0 : _current3.routes[current.index || 0].state) {
      var _current3;

      current = current.routes[current.index || 0].state;
    }

    var route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];

    var _params = _queryString.default.parse(query);

    var parseFunction = findParseConfigForRoute(route.name, configs);

    if (parseFunction) {
      Object.keys(_params).forEach(function (name) {
        if (parseFunction[name] && typeof _params[name] === 'string') {
          _params[name] = parseFunction[name](_params[name]);
        }
      });
    }

    route.params = _objectSpread({}, route.params, {}, _params);
  }

  return result;
}

function createNormalizedConfigs(key, routeConfig) {
  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var initials = arguments.length > 3 ? arguments[3] : undefined;
  var configs = [];
  routeNames.push(key);
  var value = routeConfig[key];

  if (typeof value === 'string') {
    if (value !== '') {
      configs.push(createConfigItem(routeNames, value));
    }
  } else if (typeof value === 'object') {
    if (value.path && value.path !== '') {
      configs.push(createConfigItem(routeNames, value.path, value.parse));
    }

    if (value.screens) {
      if (value.initialRouteName) {
        initials.push({
          initialRouteName: value.initialRouteName,
          connectedRoutes: Object.keys(value.screens)
        });
      }

      Object.keys(value.screens).forEach(function (nestedConfig) {
        var result = createNormalizedConfigs(nestedConfig, value.screens, routeNames, initials);
        configs.push.apply(configs, (0, _toConsumableArray2.default)(result));
      });
    }
  }

  routeNames.pop();
  return configs;
}

function createConfigItem(routeNames, pattern, parse) {
  var match = new RegExp('^' + (0, _escapeStringRegexp.default)(pattern).replace(/:[a-z0-9]+/gi, '([^/]+)') + '/?');
  return {
    match: match,
    pattern: pattern,
    routeNames: (0, _toConsumableArray2.default)(routeNames),
    parse: parse
  };
}

function findParseConfigForRoute(routeName, flatConfig) {
  for (var _iterator2 = flatConfig, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref3;

    if (_isArray2) {
      if (_i2 >= _iterator2.length) break;
      _ref3 = _iterator2[_i2++];
    } else {
      _i2 = _iterator2.next();
      if (_i2.done) break;
      _ref3 = _i2.value;
    }

    var _config = _ref3;

    if (routeName === _config.routeNames[_config.routeNames.length - 1]) {
      return _config.parse;
    }
  }

  return undefined;
}

function findInitialRoute(routeName, initialRoutes) {
  for (var _iterator3 = initialRoutes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref4;

    if (_isArray3) {
      if (_i3 >= _iterator3.length) break;
      _ref4 = _iterator3[_i3++];
    } else {
      _i3 = _iterator3.next();
      if (_i3.done) break;
      _ref4 = _i3.value;
    }

    var _config2 = _ref4;

    if (_config2.connectedRoutes.includes(routeName)) {
      return _config2.initialRouteName === routeName ? undefined : _config2.initialRouteName;
    }
  }

  return undefined;
}

function createNestedState(initialRoute, routeName, isEmpty, params) {
  if (isEmpty) {
    if (initialRoute) {
      return {
        index: 1,
        routes: [{
          name: initialRoute
        }, _objectSpread({
          name: routeName
        }, params && {
          params: params
        })]
      };
    } else {
      return {
        routes: [_objectSpread({
          name: routeName
        }, params && {
          params: params
        })]
      };
    }
  } else {
    if (initialRoute) {
      return {
        index: 1,
        routes: [{
          name: initialRoute
        }, {
          name: routeName,
          state: {
            routes: []
          }
        }]
      };
    } else {
      return {
        routes: [{
          name: routeName,
          state: {
            routes: []
          }
        }]
      };
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,