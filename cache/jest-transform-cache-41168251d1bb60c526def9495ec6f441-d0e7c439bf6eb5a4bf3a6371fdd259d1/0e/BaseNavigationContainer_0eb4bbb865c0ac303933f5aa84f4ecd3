271171f180e03a728ace138209679ee6
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NavigationStateContext = void 0;

var React = _interopRequireWildcard(require("react"));

var _routers = require("@react-navigation/routers");

var _EnsureSingleNavigator = _interopRequireDefault(require("./EnsureSingleNavigator"));

var _NavigationBuilderContext = _interopRequireDefault(require("./NavigationBuilderContext"));

var _useFocusedListeners = _interopRequireDefault(require("./useFocusedListeners"));

var _useDevTools = _interopRequireDefault(require("./useDevTools"));

var _useStateGetters = _interopRequireDefault(require("./useStateGetters"));

var _isSerializable = _interopRequireDefault(require("./isSerializable"));

var _useEventEmitter = _interopRequireDefault(require("./useEventEmitter"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var MISSING_CONTEXT_ERROR = "We couldn't find a navigation context. Have you wrapped your app with 'NavigationContainer'? See https://reactnavigation.org/docs/en/getting-started.html for setup instructions.";
var NOT_INITIALIZED_ERROR = "The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. You can ensure that all navigators have mounted after the callback to 'useEffect' is called in your root component. See https://reactnavigation.org/docs/en/navigating-without-navigation-prop.html#handling-initialization for more details.";
var NavigationStateContext = React.createContext({
  isDefault: true,

  get getKey() {
    throw new Error(MISSING_CONTEXT_ERROR);
  },

  get setKey() {
    throw new Error(MISSING_CONTEXT_ERROR);
  },

  get getState() {
    throw new Error(MISSING_CONTEXT_ERROR);
  },

  get setState() {
    throw new Error(MISSING_CONTEXT_ERROR);
  },

  get performTransaction() {
    throw new Error(MISSING_CONTEXT_ERROR);
  }

});
exports.NavigationStateContext = NavigationStateContext;
var hasWarnedForSerialization = false;

var getPartialState = function getPartialState(state) {
  if (state === undefined) {
    return;
  }

  var key = state.key,
      routeNames = state.routeNames,
      partialState = _objectWithoutProperties(state, ["key", "routeNames"]);

  return _objectSpread({}, partialState, {
    stale: true,
    routes: state.routes.map(function (route) {
      if (route.state === undefined) {
        return route;
      }

      return _objectSpread({}, route, {
        state: getPartialState(route.state)
      });
    })
  });
};

var BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {
  var initialState = _ref.initialState,
      onStateChange = _ref.onStateChange,
      independent = _ref.independent,
      children = _ref.children;
  var parent = React.useContext(NavigationStateContext);

  if (!parent.isDefault && !independent) {
    throw new Error("Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.");
  }

  var _React$useState = React.useState(function () {
    return getPartialState(initialState == null ? undefined : initialState);
  }),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      state = _React$useState2[0],
      setNavigationState = _React$useState2[1];

  var navigationStateRef = React.useRef();
  var transactionStateRef = React.useRef(null);
  var isTransactionActiveRef = React.useRef(false);
  var isFirstMountRef = React.useRef(true);
  var skipTrackingRef = React.useRef(false);
  var navigatorKeyRef = React.useRef();
  var getKey = React.useCallback(function () {
    return navigatorKeyRef.current;
  }, []);
  var setKey = React.useCallback(function (key) {
    navigatorKeyRef.current = key;
  }, []);
  var performTransaction = React.useCallback(function (callback) {
    if (isTransactionActiveRef.current) {
      throw new Error("Only one transaction can be active at a time. Did you accidentally nest 'performTransaction'?");
    }

    setNavigationState(function (navigationState) {
      isTransactionActiveRef.current = true;
      transactionStateRef.current = navigationState;

      try {
        callback();
      } finally {
        isTransactionActiveRef.current = false;
      }

      return transactionStateRef.current;
    });
  }, []);
  var getState = React.useCallback(function () {
    return transactionStateRef.current !== null ? transactionStateRef.current : navigationStateRef.current;
  }, []);
  var setState = React.useCallback(function (navigationState) {
    if (transactionStateRef.current === null) {
      throw new Error("Any 'setState' calls need to be done inside 'performTransaction'");
    }

    transactionStateRef.current = navigationState;
  }, []);
  var reset = React.useCallback(function (state) {
    performTransaction(function () {
      skipTrackingRef.current = true;
      setState(state);
    });
  }, [performTransaction, setState]);

  var _ref2 = (0, _useDevTools.default)({
    name: '@react-navigation',
    reset: reset,
    state: state
  }),
      trackState = _ref2.trackState,
      trackAction = _ref2.trackAction;

  var _ref3 = (0, _useFocusedListeners.default)(),
      listeners = _ref3.listeners,
      addFocusedListener = _ref3.addListener;

  var _ref4 = (0, _useStateGetters.default)(),
      getStateForRoute = _ref4.getStateForRoute,
      addStateGetter = _ref4.addStateGetter;

  var dispatch = function dispatch(action) {
    if (listeners[0] == null) {
      throw new Error(NOT_INITIALIZED_ERROR);
    }

    listeners[0](function (navigation) {
      return navigation.dispatch(action);
    });
  };

  var canGoBack = function canGoBack() {
    if (listeners[0] == null) {
      return false;
    }

    var _listeners$ = listeners[0](function (navigation) {
      return navigation.canGoBack();
    }),
        result = _listeners$.result,
        handled = _listeners$.handled;

    if (handled) {
      return result;
    } else {
      return false;
    }
  };

  var resetRoot = React.useCallback(function (state) {
    performTransaction(function () {
      trackAction('@@RESET_ROOT');
      setState(state);
    });
  }, [performTransaction, setState, trackAction]);
  var getRootState = React.useCallback(function () {
    return getStateForRoute('root');
  }, [getStateForRoute]);
  var emitter = (0, _useEventEmitter.default)();
  React.useImperativeHandle(ref, function () {
    return _objectSpread({}, Object.keys(_routers.CommonActions).reduce(function (acc, name) {
      acc[name] = function () {
        var _routers$CommonAction;

        return dispatch((_routers$CommonAction = _routers.CommonActions)[name].apply(_routers$CommonAction, arguments));
      };

      return acc;
    }, {}), {}, emitter.create('root'), {
      resetRoot: resetRoot,
      dispatch: dispatch,
      canGoBack: canGoBack,
      getRootState: getRootState
    });
  });
  var builderContext = React.useMemo(function () {
    return {
      addFocusedListener: addFocusedListener,
      addStateGetter: addStateGetter,
      trackAction: trackAction
    };
  }, [addFocusedListener, trackAction, addStateGetter]);
  var context = React.useMemo(function () {
    return {
      state: state,
      performTransaction: performTransaction,
      getState: getState,
      setState: setState,
      getKey: getKey,
      setKey: setKey
    };
  }, [getKey, getState, performTransaction, setKey, setState, state]);
  React.useEffect(function () {
    if (process.env.NODE_ENV !== 'production') {
      if (state !== undefined && !(0, _isSerializable.default)(state) && !hasWarnedForSerialization) {
        hasWarnedForSerialization = true;
        console.warn("We found non-serializable values in the navigation state, which can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/en/troubleshooting.html#i-get-the-warning-we-found-non-serializable-values-in-the-navigation-state for more details.");
      }
    }

    emitter.emit({
      type: 'state',
      data: {
        state: state
      }
    });

    if (skipTrackingRef.current) {
      skipTrackingRef.current = false;
    } else {
      trackState(getRootState);
    }

    navigationStateRef.current = state;
    transactionStateRef.current = null;

    if (!isFirstMountRef.current && onStateChange) {
      onStateChange(getRootState());
    }

    isFirstMountRef.current = false;
  }, [state, onStateChange, trackState, getRootState, emitter]);
  return React.createElement(_NavigationBuilderContext.default.Provider, {
    value: builderContext
  }, React.createElement(NavigationStateContext.Provider, {
    value: context
  }, React.createElement(_EnsureSingleNavigator.default, null, children)));
});
var _default = BaseNavigationContainer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,