ffd390d9c4fd10d98147194bb7ef5aa4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.makeOverlays = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MapView = _interopRequireDefault(require("./MapView"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var makeOverlays = function makeOverlays(features) {
  var points = features.filter(function (f) {
    return f.geometry && (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint');
  }).map(function (feature) {
    return makeCoordinates(feature).map(function (coordinates) {
      return makeOverlay(coordinates, feature);
    });
  }).reduce(flatten, []).map(function (overlay) {
    return _objectSpread({}, overlay, {
      type: 'point'
    });
  });
  var lines = features.filter(function (f) {
    return f.geometry && (f.geometry.type === 'LineString' || f.geometry.type === 'MultiLineString');
  }).map(function (feature) {
    return makeCoordinates(feature).map(function (coordinates) {
      return makeOverlay(coordinates, feature);
    });
  }).reduce(flatten, []).map(function (overlay) {
    return _objectSpread({}, overlay, {
      type: 'polyline'
    });
  });
  var multipolygons = features.filter(function (f) {
    return f.geometry && f.geometry.type === 'MultiPolygon';
  }).map(function (feature) {
    return makeCoordinates(feature).map(function (coordinates) {
      return makeOverlay(coordinates, feature);
    });
  }).reduce(flatten, []);
  var polygons = features.filter(function (f) {
    return f.geometry && f.geometry.type === 'Polygon';
  }).map(function (feature) {
    return makeOverlay(makeCoordinates(feature), feature);
  }).reduce(flatten, []).concat(multipolygons).map(function (overlay) {
    return _objectSpread({}, overlay, {
      type: 'polygon'
    });
  });
  return points.concat(lines).concat(polygons);
};

exports.makeOverlays = makeOverlays;

var flatten = function flatten(prev, curr) {
  return prev.concat(curr);
};

var makeOverlay = function makeOverlay(coordinates, feature) {
  var overlay = {
    feature: feature
  };

  if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {
    overlay.coordinates = coordinates[0];

    if (coordinates.length > 1) {
      overlay.holes = coordinates.slice(1);
    }
  } else {
    overlay.coordinates = coordinates;
  }

  return overlay;
};

var makePoint = function makePoint(c) {
  return {
    latitude: c[1],
    longitude: c[0]
  };
};

var makeLine = function makeLine(l) {
  return l.map(makePoint);
};

var makeCoordinates = function makeCoordinates(feature) {
  var g = feature.geometry;

  if (g.type === 'Point') {
    return [makePoint(g.coordinates)];
  } else if (g.type === 'MultiPoint') {
    return g.coordinates.map(makePoint);
  } else if (g.type === 'LineString') {
    return [makeLine(g.coordinates)];
  } else if (g.type === 'MultiLineString') {
    return g.coordinates.map(makeLine);
  } else if (g.type === 'Polygon') {
    return g.coordinates.map(makeLine);
  } else if (g.type === 'MultiPolygon') {
    return g.coordinates.map(function (p) {
      return p.map(makeLine);
    });
  } else {
    return [];
  }
};

var Geojson = function Geojson(props) {
  var overlays = makeOverlays(props.geojson.features);
  return _react.default.createElement(_react.default.Fragment, null, overlays.map(function (overlay, index) {
    if (overlay.type === 'point') {
      return _react.default.createElement(_MapView.default.Marker, {
        key: index,
        coordinate: overlay.coordinates,
        pinColor: props.color
      });
    }

    if (overlay.type === 'polygon') {
      return _react.default.createElement(_MapView.default.Polygon, {
        key: index,
        coordinates: overlay.coordinates,
        holes: overlay.holes,
        strokeColor: props.strokeColor,
        fillColor: props.fillColor,
        strokeWidth: props.strokeWidth
      });
    }

    if (overlay.type === 'polyline') {
      return _react.default.createElement(_MapView.default.Polyline, {
        key: index,
        coordinates: overlay.coordinates,
        strokeColor: props.strokeColor,
        strokeWidth: props.strokeWidth
      });
    }
  }));
};

var _default = Geojson;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,