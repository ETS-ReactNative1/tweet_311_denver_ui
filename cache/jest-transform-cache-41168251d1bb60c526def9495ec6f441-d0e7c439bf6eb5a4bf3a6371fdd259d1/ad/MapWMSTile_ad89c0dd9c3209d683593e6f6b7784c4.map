{"version":3,"sources":["MapWMSTile.js"],"names":["viewPropTypes","ViewPropTypes","View","propTypes","urlTemplate","PropTypes","string","isRequired","zIndex","number","maximumZ","minimumZ","shouldReplaceMapContent","bool","tileSize","opacity","MapWMSTile","AIRMapWMSTile","getAirComponent","props","React","Component","componentType","providers","google","ios","SUPPORTED","android","USES_DEFAULT_IMPLEMENTATION"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;;;;;AAMA,IAAMA,aAAa,GAAGC,8BAAiBC,kBAAKC,SAA5C;;AAEA,IAAMA,SAAS,qBACVH,aADU;AAQbI,EAAAA,WAAW,EAAEC,mBAAUC,MAAV,CAAiBC,UARjB;AAiBbC,EAAAA,MAAM,EAAEH,mBAAUI,MAjBL;AAsBbC,EAAAA,QAAQ,EAAEL,mBAAUI,MAtBP;AA4BbE,EAAAA,QAAQ,EAAEN,mBAAUI,MA5BP;AAmCbG,EAAAA,uBAAuB,EAAEP,mBAAUQ,IAnCtB;AAwCbC,EAAAA,QAAQ,EAAET,mBAAUI,MAxCP;AA8CbM,EAAAA,OAAO,EAAEV,mBAAUI;AA9CN,EAAf;;IAiDMO,U;;;;;;;;;;6BACK;AACP,UAAMC,aAAa,GAAG,KAAKC,eAAL,EAAtB;AACA,aAAO,6BAAC,aAAD,EAAmB,KAAKC,KAAxB,CAAP;AACD;;;EAJsBC,eAAMC,S;;AAO/BL,UAAU,CAACb,SAAX,GAAuBA,SAAvB;;eACe,mCAAqBa,UAArB,EAAiC;AAC9CM,EAAAA,aAAa,EAAE,SAD+B;AAE9CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEC,+BADC;AAENC,MAAAA,OAAO,EAAEC;AAFH;AADC;AAFmC,CAAjC,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { ViewPropTypes, View } from 'react-native';\n\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  /**\n   * The url template of the tile server. The patterns {minX} {maxX} {minY} {maxY} {width} {height}\n   * will be replaced at runtime according to EPSG:900913 specification bounding box.\n   * For example, https://demo.geo-solutions.it/geoserver/tiger/wms?service=WMS&version=1.1.0&request=GetMap&layers=tiger:poi&styles=&bbox={minX},{minY},{maxX},{maxY}&width={width}&height={height}&srs=EPSG:900913&format=image/png&transparent=true&format_options=dpi:213\n   */\n  urlTemplate: PropTypes.string.isRequired,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is -1.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n  /**\n   * The maximum zoom level for this tile overlay.\n   *\n   */\n  maximumZ: PropTypes.number,\n\n  /**\n   * The minimum zoom level for this tile overlay.\n   *\n   */\n  minimumZ: PropTypes.number,\n\n  /**\n   * Corresponds to MKTileOverlay canReplaceMapContent.\n   *\n   * @platform ios\n   */\n  shouldReplaceMapContent: PropTypes.bool,\n  /**\n   * tileSize.\n   *\n   */\n  tileSize: PropTypes.number,\n\n  /**\n   * opacity. between 0 - 1\n   *\n   */\n  opacity: PropTypes.number,\n};\n\nclass MapWMSTile extends React.Component {\n  render() {\n    const AIRMapWMSTile = this.getAirComponent();\n    return <AIRMapWMSTile {...this.props} />;\n  }\n}\n\nMapWMSTile.propTypes = propTypes;\nexport default decorateMapComponent(MapWMSTile, {\n  componentType: 'WMSTile',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]}