1cfba23d6d2cfc13cdb13cfa8bcf15ff
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalTransition = exports.DefaultTransition = exports.ScaleFromCenterAndroid = exports.RevealFromBottomAndroid = exports.FadeFromBottomAndroid = exports.ModalPresentationIOS = exports.ModalSlideFromBottomIOS = exports.SlideFromRightIOS = void 0;

var _CardStyleInterpolators = require("./CardStyleInterpolators");

var _HeaderStyleInterpolators = require("./HeaderStyleInterpolators");

var _TransitionSpecs = require("./TransitionSpecs");

var _reactNative = require("react-native");

var ANDROID_VERSION_PIE = 28;
var SlideFromRightIOS = {
  gestureDirection: 'horizontal',
  transitionSpec: {
    open: _TransitionSpecs.TransitionIOSSpec,
    close: _TransitionSpecs.TransitionIOSSpec
  },
  cardStyleInterpolator: _CardStyleInterpolators.forHorizontalIOS,
  headerStyleInterpolator: _HeaderStyleInterpolators.forFade
};
exports.SlideFromRightIOS = SlideFromRightIOS;
var ModalSlideFromBottomIOS = {
  gestureDirection: 'vertical',
  transitionSpec: {
    open: _TransitionSpecs.TransitionIOSSpec,
    close: _TransitionSpecs.TransitionIOSSpec
  },
  cardStyleInterpolator: _CardStyleInterpolators.forVerticalIOS,
  headerStyleInterpolator: _HeaderStyleInterpolators.forFade
};
exports.ModalSlideFromBottomIOS = ModalSlideFromBottomIOS;
var ModalPresentationIOS = {
  gestureDirection: 'vertical',
  transitionSpec: {
    open: _TransitionSpecs.TransitionIOSSpec,
    close: _TransitionSpecs.TransitionIOSSpec
  },
  cardStyleInterpolator: _CardStyleInterpolators.forModalPresentationIOS,
  headerStyleInterpolator: _HeaderStyleInterpolators.forFade
};
exports.ModalPresentationIOS = ModalPresentationIOS;
var FadeFromBottomAndroid = {
  gestureDirection: 'vertical',
  transitionSpec: {
    open: _TransitionSpecs.FadeInFromBottomAndroidSpec,
    close: _TransitionSpecs.FadeOutToBottomAndroidSpec
  },
  cardStyleInterpolator: _CardStyleInterpolators.forFadeFromBottomAndroid,
  headerStyleInterpolator: _HeaderStyleInterpolators.forFade
};
exports.FadeFromBottomAndroid = FadeFromBottomAndroid;
var RevealFromBottomAndroid = {
  gestureDirection: 'vertical',
  transitionSpec: {
    open: _TransitionSpecs.RevealFromBottomAndroidSpec,
    close: _TransitionSpecs.RevealFromBottomAndroidSpec
  },
  cardStyleInterpolator: _CardStyleInterpolators.forRevealFromBottomAndroid,
  headerStyleInterpolator: _HeaderStyleInterpolators.forFade
};
exports.RevealFromBottomAndroid = RevealFromBottomAndroid;
var ScaleFromCenterAndroid = {
  gestureDirection: 'horizontal',
  transitionSpec: {
    open: _TransitionSpecs.ScaleFromCenterAndroidSpec,
    close: _TransitionSpecs.ScaleFromCenterAndroidSpec
  },
  cardStyleInterpolator: _CardStyleInterpolators.forScaleFromCenterAndroid,
  headerStyleInterpolator: _HeaderStyleInterpolators.forFade
};
exports.ScaleFromCenterAndroid = ScaleFromCenterAndroid;

var DefaultTransition = _reactNative.Platform.select({
  ios: SlideFromRightIOS,
  default: _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_PIE ? RevealFromBottomAndroid : FadeFromBottomAndroid
});

exports.DefaultTransition = DefaultTransition;

var ModalTransition = _reactNative.Platform.select({
  ios: ModalSlideFromBottomIOS,
  default: DefaultTransition
});

exports.ModalTransition = ModalTransition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,