28b2d7f4f05838fc1c337db781671fd9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getActionFromState;

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function getActionFromState(state) {
  if (state.routes.length === 0) {
    return undefined;
  }

  var route = state.routes[state.routes.length - 1];
  var payload = {
    name: route.name,
    params: _objectSpread({}, route.params)
  };
  var current = route.state;
  var params = payload.params;

  while (current) {
    if (current.routes.length === 0) {
      return undefined;
    }

    route = current.routes[current.routes.length - 1];
    params.screen = route.name;

    if (route.state) {
      params.params = _objectSpread({}, route.params);
      params = params.params;
    } else {
      params.params = route.params;
    }

    current = route.state;
  }

  return {
    type: 'NAVIGATE',
    payload: payload
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldEFjdGlvbkZyb21TdGF0ZS50c3giXSwibmFtZXMiOlsic3RhdGUiLCJyb3V0ZSIsInBheWxvYWQiLCJuYW1lIiwicGFyYW1zIiwiY3VycmVudCIsInR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWWUsU0FBQSxrQkFBQSxDQUFBLEtBQUEsRUFFZTtBQUM1QixNQUFJQSxLQUFLLENBQUxBLE1BQUFBLENBQUFBLE1BQUFBLEtBQUosQ0FBQSxFQUErQjtBQUM3QixXQUFBLFNBQUE7QUFGMEI7O0FBTzVCLE1BQUlDLEtBQUssR0FBR0QsS0FBSyxDQUFMQSxNQUFBQSxDQUFhQSxLQUFLLENBQUxBLE1BQUFBLENBQUFBLE1BQUFBLEdBQXpCLENBQVlBLENBQVo7QUFFQSxNQUFJRSxPQUFpRCxHQUFHO0FBQ3REQyxJQUFBQSxJQUFJLEVBQUVGLEtBQUssQ0FEMkMsSUFBQTtBQUV0REcsSUFBQUEsTUFBTSxFQUFBLGFBQUEsQ0FBQSxFQUFBLEVBQU9ILEtBQUssQ0FBWixNQUFBO0FBRmdELEdBQXhEO0FBS0EsTUFBSUksT0FBTyxHQUFHSixLQUFLLENBQW5CLEtBQUE7QUFDQSxNQUFJRyxNQUFNLEdBQUdGLE9BQU8sQ0FBcEIsTUFBQTs7QUFFQSxTQUFBLE9BQUEsRUFBZ0I7QUFDZCxRQUFJRyxPQUFPLENBQVBBLE1BQUFBLENBQUFBLE1BQUFBLEtBQUosQ0FBQSxFQUFpQztBQUMvQixhQUFBLFNBQUE7QUFDRDs7QUFFREosSUFBQUEsS0FBSyxHQUFHSSxPQUFPLENBQVBBLE1BQUFBLENBQWVBLE9BQU8sQ0FBUEEsTUFBQUEsQ0FBQUEsTUFBQUEsR0FBdkJKLENBQVFJLENBQVJKO0FBQ0FHLElBQUFBLE1BQU0sQ0FBTkEsTUFBQUEsR0FBZ0JILEtBQUssQ0FBckJHLElBQUFBOztBQUVBLFFBQUlILEtBQUssQ0FBVCxLQUFBLEVBQWlCO0FBQ2ZHLE1BQUFBLE1BQU0sQ0FBTkEsTUFBQUEsR0FBQUEsYUFBQUEsQ0FBQUEsRUFBQUEsRUFBcUJILEtBQUssQ0FBMUJHLE1BQUFBLENBQUFBO0FBQ0FBLE1BQUFBLE1BQU0sR0FBR0EsTUFBTSxDQUFmQSxNQUFBQTtBQUZGLEtBQUEsTUFHTztBQUNMQSxNQUFBQSxNQUFNLENBQU5BLE1BQUFBLEdBQWdCSCxLQUFLLENBQXJCRyxNQUFBQTtBQUNEOztBQUVEQyxJQUFBQSxPQUFPLEdBQUdKLEtBQUssQ0FBZkksS0FBQUE7QUFDRDs7QUFFRCxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFEQyxVQUFBO0FBRUxKLElBQUFBLE9BQUFBLEVBQUFBO0FBRkssR0FBUDtBQUlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFydGlhbFN0YXRlLCBOYXZpZ2F0aW9uU3RhdGUgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9yb3V0ZXJzJztcblxudHlwZSBOYXZpZ2F0ZVBhcmFtcyA9IHtcbiAgc2NyZWVuPzogc3RyaW5nO1xuICBwYXJhbXM/OiBOYXZpZ2F0ZVBhcmFtcztcbn07XG5cbnR5cGUgTmF2aWdhdGVBY3Rpb24gPSB7XG4gIHR5cGU6ICdOQVZJR0FURSc7XG4gIHBheWxvYWQ6IHsgbmFtZTogc3RyaW5nOyBwYXJhbXM6IE5hdmlnYXRlUGFyYW1zIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBY3Rpb25Gcm9tU3RhdGUoXG4gIHN0YXRlOiBQYXJ0aWFsU3RhdGU8TmF2aWdhdGlvblN0YXRlPlxuKTogTmF2aWdhdGVBY3Rpb24gfCB1bmRlZmluZWQge1xuICBpZiAoc3RhdGUucm91dGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBUcnkgdG8gY29uc3RydWN0IHBheWxvYWQgZm9yIGEgYE5BVklHQVRFYCBhY3Rpb24gZnJvbSB0aGUgc3RhdGVcbiAgLy8gVGhpcyBsZXRzIHVzIHByZXNlcnZlIHRoZSBuYXZpZ2F0aW9uIHN0YXRlIGFuZCBub3QgbG9zZSBpdFxuICBsZXQgcm91dGUgPSBzdGF0ZS5yb3V0ZXNbc3RhdGUucm91dGVzLmxlbmd0aCAtIDFdO1xuXG4gIGxldCBwYXlsb2FkOiB7IG5hbWU6IHN0cmluZzsgcGFyYW1zOiBOYXZpZ2F0ZVBhcmFtcyB9ID0ge1xuICAgIG5hbWU6IHJvdXRlLm5hbWUsXG4gICAgcGFyYW1zOiB7IC4uLnJvdXRlLnBhcmFtcyB9LFxuICB9O1xuXG4gIGxldCBjdXJyZW50ID0gcm91dGUuc3RhdGU7XG4gIGxldCBwYXJhbXMgPSBwYXlsb2FkLnBhcmFtcztcblxuICB3aGlsZSAoY3VycmVudCkge1xuICAgIGlmIChjdXJyZW50LnJvdXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcm91dGUgPSBjdXJyZW50LnJvdXRlc1tjdXJyZW50LnJvdXRlcy5sZW5ndGggLSAxXTtcbiAgICBwYXJhbXMuc2NyZWVuID0gcm91dGUubmFtZTtcblxuICAgIGlmIChyb3V0ZS5zdGF0ZSkge1xuICAgICAgcGFyYW1zLnBhcmFtcyA9IHsgLi4ucm91dGUucGFyYW1zIH07XG4gICAgICBwYXJhbXMgPSBwYXJhbXMucGFyYW1zO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXMucGFyYW1zID0gcm91dGUucGFyYW1zO1xuICAgIH1cblxuICAgIGN1cnJlbnQgPSByb3V0ZS5zdGF0ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ05BVklHQVRFJyxcbiAgICBwYXlsb2FkLFxuICB9O1xufVxuIl19