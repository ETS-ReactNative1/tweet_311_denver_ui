{"version":3,"sources":["../src/PlatformUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEO,IAAM,cAAc,GAAG,CAAC,CAAC,uBAAU,YAAnC;;;AAED,SAAU,WAAV,GAAqB;AACzB,SAAO,uBAAU,QAAV,IAAsB,EAA7B;AACD;;AAGM,IAAM,eAAe,GAAG,uBAAU,aAAV,GAC3B,mCAAmB,uBAAU,aAA7B,CAD2B,GAE3B,IAFG;;;AAIA,SAAe,aAAf,CAA6B,GAA7B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,eACD,cADC;AAAA;AAAA;AAAA;;AAAA,2CAEI,wBAAwB,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,CAF5B;;AAAA;AAAA,2CAKE,0BAA0B,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAL5B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQP,SAAe,wBAAf,CAAwC,GAAxC,EAA6C,IAA7C,EAAmD,IAAnD,EAAyD,IAAzD;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQ,UAAA,WADR,GACsB,IAAI,IAAI,wBAAW,GAAX,CAD9B;AAEQ,UAAA,QAFR,GAEsB,UAAU,CAAC,cAFjC,sBAEgE,WAFhE,SAE+E,IAF/E;AAAA;AAAA,4CAG8B,UAAU,CAAC,YAAX,CAAwB,QAAxB,EAAkC;AAC5D,YAAA,GAAG,EAAE;AADuD,WAAlC,CAH9B;;AAAA;AAAA;AAGQ,UAAA,MAHR,QAGQ,MAHR;AAGgB,UAAA,GAHhB,QAGgB,GAHhB;;AAAA,gBAMM,CAAC,MAAD,IAAY,IAAI,KAAK,IAAT,IAAiB,GAAG,KAAK,IAN3C;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAOqB,UAAU,CAAC,aAAX,CAAyB,GAAzB,EAA8B,QAA9B,EAAwC;AACvD,YAAA,GAAG,EAAE;AADkD,WAAxC,CAPrB;;AAAA;AAAA;AAOO,UAAA,GAPP,SAOO,GAPP;;AAAA,gBAUQ,IAAI,KAAK,IAAT,IAAiB,GAAG,KAAK,IAVjC;AAAA;AAAA;AAAA;;AAAA,gBAWY,IAAI,KAAJ,CACJ,gCAA8B,IAA9B,SAAsC,IAAtC,2BACgB,GADhB,sCADI,CAXZ;;AAAA;AAAA,4CAkBS,QAlBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,SAAe,0BAAf,CAA0C,GAA1C,EAA+C,IAA/C,EAAqD,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEM,GAAG,CAAC,UAAJ,CAAe,SAAf,CAFN;AAAA;AAAA;AAAA;;AAAA,4CAGW,GAHX;;AAAA;AAMQ,UAAA,WANR,GAMsB,IAAI,IAAI,wBAAW,GAAX,CAN9B;AAOQ,UAAA,QAPR,GAOsB,UAAU,CAAC,cAPjC,sBAOgE,WAPhE,SAO+E,IAP/E;AAAA;AAAA,4CAUQ,UAAU,CAAC,aAAX,CAAyB,GAAzB,EAA8B,QAA9B,CAVR;;AAAA;AAAA,4CAWS,QAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import computeMd5 from 'blueimp-md5';\nimport Constants from 'expo-constants';\nimport * as FileSystem from 'expo-file-system';\n\nimport { getManifestBaseUrl } from './AssetUris';\n\nexport const IS_MANAGED_ENV = !!Constants.appOwnership;\n\nexport function getManifest(): { [key: string]: any } {\n  return Constants.manifest || {};\n}\n\n// Compute manifest base URL if available\nexport const manifestBaseUrl = Constants.experienceUrl\n  ? getManifestBaseUrl(Constants.experienceUrl)\n  : null;\n\nexport async function downloadAsync(uri, hash, type, name): Promise<string> {\n  if (IS_MANAGED_ENV) {\n    return _downloadAsyncManagedEnv(uri, hash, type, name);\n  }\n\n  return _downloadAsyncUnmanagedEnv(uri, hash, type);\n}\n\nasync function _downloadAsyncManagedEnv(uri, hash, type, name): Promise<string> {\n  const cacheFileId = hash || computeMd5(uri);\n  const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;\n  let { exists, md5 } = await FileSystem.getInfoAsync(localUri, {\n    md5: true,\n  });\n  if (!exists || (hash !== null && md5 !== hash)) {\n    ({ md5 } = await FileSystem.downloadAsync(uri, localUri, {\n      md5: true,\n    }));\n    if (hash !== null && md5 !== hash) {\n      throw new Error(\n        `Downloaded file for asset '${name}.${type}' ` +\n          `Located at ${uri} ` +\n          `failed MD5 integrity check`\n      );\n    }\n  }\n  return localUri;\n}\n\nasync function _downloadAsyncUnmanagedEnv(uri, hash, type): Promise<string> {\n  // Bail out if it's already at a file URL because it's already available locally\n  if (uri.startsWith('file://')) {\n    return uri;\n  }\n\n  const cacheFileId = hash || computeMd5(uri);\n  const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;\n  // We don't check the FileSystem for an existing version of the asset and we\n  // also don't perform an integrity check!\n  await FileSystem.downloadAsync(uri, localUri);\n  return localUri;\n}\n"],"sourceRoot":""}