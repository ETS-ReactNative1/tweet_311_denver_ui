{"version":3,"sources":["../src/Expo.fx.tsx"],"names":[],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAGA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAI,OAAO,uBAAU,QAAV,CAAmB,GAA1B,KAAkC,QAAtC,EAAgD;AAC9C,yBAAc,OAAO,CAAC,GAAtB,EAA2B,uBAAU,QAAV,CAAmB,GAA9C;AACD;;AAGD,IAAI,OAAJ,EAAa;AACX,MAAI,sBAAS,EAAT,KAAgB,KAApB,EAA2B;AAEzB,6BAAY,2BAAZ,CAAwC;AAAA,aAAM,wBAAN;AAAA,KAAxC;;AAGA,QAAM,mCAAmC,GAAG,yBAAY,2BAAxD;;AAGA,6BAAY,2BAAZ,GAA0C,UAAA,QAAQ,EAAG;AACnD,eAAS,wBAAT,CAAkC,KAAlC,EAA4C;AAC1C,YAAM,iBAAiB,GAAG,QAAQ,EAAlC;AAEA,eACE,oBAAC,wBAAD,QACE,oBAAC,iBAAD,EAAuB,KAAvB,CADF,CADF;AAKD;;AAED,MAAA,mCAAmC,CAAC;AAAA,eAAM,wBAAN;AAAA,OAAD,CAAnC;AACD,KAZD;AAaD;AACF;;AAGD;;AAKA,IAAI,MAAM,IAAI,MAAM,CAAC,OAArB,EAA8B;AAC5B,MAAI,MAAJ,EAAY;AACV,QAAM,OAAO,GAAG,OAAO,aAAvB;;AAGA,IAAA,MAAM,CAAC,UAAP,GAAoB,OAApB;AAEA,IAAA,MAAM,CAAC,MAAP,GAAgB,OAAhB;AAEA,IAAA,MAAM,CAAC,IAAP,GAAc,OAAd;AACD;AACF","sourcesContent":["import './environment/validate.fx';\nimport './environment/logging.fx';\nimport './environment/muteWarnings.fx';\n\n// load expo-asset immediately to set a custom `source` transformer in React Native\nimport 'expo-asset';\n\nimport { AppRegistry, Platform } from 'react-native';\nimport Constants from 'expo-constants';\nimport { installWebGeolocationPolyfill } from 'expo-location';\nimport * as React from 'react';\nimport DevAppContainer from './environment/DevAppContainer';\n\nif (typeof Constants.manifest.env === 'object') {\n  Object.assign(process.env, Constants.manifest.env);\n}\n\n// add the dev app container wrapper component on ios\nif (__DEV__) {\n  if (Platform.OS === 'ios') {\n    // @ts-ignore\n    AppRegistry.setWrapperComponentProvider(() => DevAppContainer);\n\n    // @ts-ignore\n    const originalSetWrapperComponentProvider = AppRegistry.setWrapperComponentProvider;\n\n    // @ts-ignore\n    AppRegistry.setWrapperComponentProvider = provider => {\n      function PatchedProviderComponent(props: any) {\n        const ProviderComponent = provider();\n\n        return (\n          <DevAppContainer>\n            <ProviderComponent {...props} />\n          </DevAppContainer>\n        );\n      }\n\n      originalSetWrapperComponentProvider(() => PatchedProviderComponent);\n    };\n  }\n}\n\n// polyfill navigator.geolocation\ninstallWebGeolocationPolyfill();\n\n// install globals\ndeclare var module: any;\n\nif (module && module.exports) {\n  if (global) {\n    const globals = require('./globals');\n\n    // @ts-ignore\n    global.__exponent = globals;\n    // @ts-ignore\n    global.__expo = globals;\n    // @ts-ignore\n    global.Expo = globals;\n  }\n}\n"],"sourceRoot":""}