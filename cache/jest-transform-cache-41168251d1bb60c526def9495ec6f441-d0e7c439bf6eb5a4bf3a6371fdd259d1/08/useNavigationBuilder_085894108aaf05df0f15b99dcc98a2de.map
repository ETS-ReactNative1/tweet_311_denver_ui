{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["PrivateValueStore","isArrayEqual","a","b","it","getRouteConfigsFromChildren","children","configs","React","child","Screen","acc","String","process","config","component","JSON","console","navigatorKey","route","NavigationRouteContext","previousRouteRef","current","router","createRouter","initialRouteName","screen","screens","curr","routeNames","Object","routeParamList","initialParams","initialParamsFromParams","isStateValid","state","isStateInitialized","getState","performTransaction","NavigationStateContext","previousStateRef","initializedStateRef","currentState","nextState","updatedState","CommonActions","setState","setKey","getCurrentState","getKey","emitter","type","data","listeners","addListener","addActionListener","addFocusedListener","addStateGetter","onAction","key","routerConfigOptions","onRouteFocus","navigation","focusedListeners","getStateForRoute","descriptors","screenOptions","options"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Router,\n  RouterFactory,\n  PartialState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport { NavigationStateContext } from './BaseNavigationContainer';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport Screen from './Screen';\nimport useEventEmitter from './useEventEmitter';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useDescriptors from './useDescriptors';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useFocusEvents from './useFocusEvents';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useChildActionListeners from './useChildActionListeners';\nimport useFocusedListeners from './useFocusedListeners';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport {\n  DefaultNavigatorOptions,\n  RouteConfig,\n  PrivateValueStore,\n} from './types';\nimport useStateGetters from './useStateGetters';\nimport useOnGetState from './useOnGetState';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute = {\n  key: string;\n  params?: {\n    screen?: string;\n    params?: object;\n  };\n};\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <ScreenOptions extends object>(\n  children: React.ReactNode\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    RouteConfig<ParamListBase, string, ScreenOptions>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push(\n          child.props as RouteConfig<ParamListBase, string, ScreenOptions>\n        );\n        return acc;\n      }\n\n      if (child.type === React.Fragment) {\n        // When we encounter a fragment, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<ScreenOptions>(child.props.children)\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen' components as its direct children (found '${\n        // @ts-ignore\n        child.type && child.type.name ? child.type.name : String(child)\n      }')`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(config => {\n      const { name, children, component } = config as any;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (children != null || component !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a a valid React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ScreenOptions extends object,\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<ScreenOptions> & RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute\n    | undefined;\n\n  const previousRouteRef = React.useRef(route);\n\n  React.useEffect(() => {\n    previousRouteRef.current = route;\n  }, [route]);\n\n  const { children, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...((rest as unknown) as RouterOptions),\n      ...(route?.params && typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const screens = getRouteConfigsFromChildren<ScreenOptions>(children).reduce<\n    Record<string, RouteConfig<ParamListBase, string, ScreenOptions>>\n  >((acc, curr) => {\n    if (curr.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${curr.name}')`\n      );\n    }\n\n    acc[curr.name] = curr;\n    return acc;\n  }, {});\n\n  const routeNames = Object.keys(screens);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr];\n      const initialParamsFromParams =\n        route?.params && route.params.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    },\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    state => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    state =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState,\n    setKey,\n    getKey,\n    performTransaction,\n  } = React.useContext(NavigationStateContext);\n\n  const previousStateRef = React.useRef<\n    NavigationState | PartialState<NavigationState> | undefined\n  >();\n  const initializedStateRef = React.useRef<State>();\n\n  if (\n    initializedStateRef.current === undefined ||\n    currentState !== previousStateRef.current\n  ) {\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    initializedStateRef.current =\n      currentState === undefined || !isStateValid(currentState)\n        ? router.getInitialState({\n            routeNames,\n            routeParamList,\n          })\n        : router.getRehydratedState(currentState as PartialState<State>, {\n            routeNames,\n            routeParamList,\n          });\n  }\n\n  React.useEffect(() => {\n    previousStateRef.current = currentState;\n  }, [currentState]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale untill the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n    });\n  }\n\n  if (\n    previousRouteRef.current &&\n    route &&\n    route.params &&\n    typeof route.params.screen === 'string' &&\n    route.params !== previousRouteRef.current.params\n  ) {\n    // If the route was updated with new name and/or params, we should navigate there\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = router.getStateForAction(\n      state,\n      CommonActions.navigate(route.params.screen, route.params.params),\n      {\n        routeNames,\n        routeParamList,\n      }\n    );\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n          })\n        : state;\n  }\n\n  if (state !== nextState) {\n    // If the state needs to be updated, we'll schedule an update with React\n    // setState in render seems hacky, but that's how React docs implement getDerivedPropsFromState\n    // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n    performTransaction(() => {\n      setState(nextState);\n    });\n  }\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state objec we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      performTransaction(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          setState(undefined);\n        }\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter();\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const {\n    listeners: actionListeners,\n    addListener: addActionListener,\n  } = useChildActionListeners();\n\n  const {\n    listeners: focusedListeners,\n    addListener: addFocusedListener,\n  } = useFocusedListeners();\n\n  const { getStateForRoute, addStateGetter } = useStateGetters();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    listeners: actionListeners,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n    },\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<State, NavigationAction, EventMap>({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners,\n  });\n\n  useOnGetState({\n    getState,\n    getStateForRoute,\n  });\n\n  const descriptors = useDescriptors<State, ScreenOptions>({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addActionListener,\n    addFocusedListener,\n    addStateGetter,\n    router,\n    emitter,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n  };\n}\n"]}