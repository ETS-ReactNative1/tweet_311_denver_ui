e1efdf4adea26de0cc9d0ed65191998e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getPathFromState;

var _queryString = _interopRequireDefault(require("query-string"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function getPathFromState(state) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (state === undefined) {
    throw Error('NavigationState not passed');
  }

  var path = '/';
  var current = state;

  while (current) {
    var index = typeof current.index === 'number' ? current.index : 0;
    var route = current.routes[index];
    var currentOptions = options;
    var pattern = route.name;

    while (route.name in currentOptions) {
      if (typeof currentOptions[route.name] === 'string') {
        pattern = currentOptions[route.name];
        break;
      } else if (typeof currentOptions[route.name] === 'object') {
        if (!currentOptions[route.name].screens) {
          pattern = currentOptions[route.name].path;
          break;
        } else {
          if (route.state === undefined) {
            pattern = currentOptions[route.name].path;
            break;
          } else {
            index = typeof route.state.index === 'number' ? route.state.index : 0;
            var nextRoute = route.state.routes[index];
            var deeperConfig = currentOptions[route.name].screens;

            if (nextRoute.name in deeperConfig) {
              route = nextRoute;
              currentOptions = deeperConfig;
            } else {
              pattern = currentOptions[route.name].path;
              break;
            }
          }
        }
      }
    }

    if (pattern !== '') {
      (function () {
        var config = currentOptions[route.name] !== undefined ? currentOptions[route.name].stringify : undefined;
        var params = route.params ? Object.entries(route.params).reduce(function (acc, _ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          acc[key] = (config === null || config === void 0 ? void 0 : config[key]) ? config[key](value) : String(value);
          return acc;
        }, {}) : undefined;

        if (currentOptions[route.name] !== undefined) {
          path += pattern.split('/').map(function (p) {
            var name = p.replace(/^:/, '');

            if (params && name in params && p.startsWith(':')) {
              var value = params[name];
              delete params[name];
              return encodeURIComponent(value);
            }

            return encodeURIComponent(p);
          }).join('/');
        } else {
          path += encodeURIComponent(route.name);
        }

        if (route.state) {
          path += '/';
        } else if (params) {
          var query = _queryString.default.stringify(params);

          if (query) {
            path += "?".concat(query);
          }
        }
      })();
    }

    current = route.state;
  }

  path = path !== '/' && path.slice(path.length - 1) === '/' ? path.slice(0, -1) : path;
  return path;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,