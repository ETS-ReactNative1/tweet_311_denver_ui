dbf99d7d78a0d224d2237613bf272430
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _native = require("@react-navigation/native");

var _CardStack = _interopRequireDefault(require("./CardStack"));

var _KeyboardManager = _interopRequireDefault(require("../KeyboardManager"));

var _HeaderContainer = _interopRequireDefault(require("../Header/HeaderContainer"));

var _SafeAreaProviderCompat = _interopRequireDefault(require("../SafeAreaProviderCompat"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var GestureHandlerWrapper = _reactNativeGestureHandler.GestureHandlerRootView !== null && _reactNativeGestureHandler.GestureHandlerRootView !== void 0 ? _reactNativeGestureHandler.GestureHandlerRootView : _reactNative.View;

var StackView = function (_React$Component) {
  (0, _inherits2.default)(StackView, _React$Component);

  function StackView() {
    var _this;

    (0, _classCallCheck2.default)(this, StackView);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(StackView).apply(this, arguments));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "state", {
      routes: [],
      previousRoutes: [],
      previousDescriptors: {},
      openingRouteKeys: [],
      closingRouteKeys: [],
      replacingRouteKeys: [],
      descriptors: {}
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "getGesturesEnabled", function (_ref) {
      var route = _ref.route;
      var descriptor = _this.state.descriptors[route.key];

      if (descriptor) {
        var _descriptor$options = descriptor.options,
            gestureEnabled = _descriptor$options.gestureEnabled,
            animationEnabled = _descriptor$options.animationEnabled;

        if (animationEnabled === false) {
          return false;
        }

        return gestureEnabled !== undefined ? gestureEnabled : _reactNative.Platform.OS !== 'android';
      }

      return false;
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "getPreviousRoute", function (_ref2) {
      var route = _ref2.route;
      var _this$state = _this.state,
          closingRouteKeys = _this$state.closingRouteKeys,
          replacingRouteKeys = _this$state.replacingRouteKeys;

      var routes = _this.state.routes.filter(function (r) {
        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);
      });

      var index = routes.findIndex(function (r) {
        return r.key === route.key;
      });
      return routes[index - 1];
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "renderScene", function (_ref3) {
      var route = _ref3.route;
      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];

      if (!descriptor) {
        return null;
      }

      return descriptor.render();
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "renderHeader", function (props) {
      return React.createElement(_HeaderContainer.default, props);
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleOpenRoute", function (_ref4) {
      var route = _ref4.route;

      _this.setState(function (state) {
        return {
          routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {
            return !state.replacingRouteKeys.includes(r.key);
          }) : state.routes,
          openingRouteKeys: state.openingRouteKeys.filter(function (key) {
            return key !== route.key;
          }),
          closingRouteKeys: state.closingRouteKeys.filter(function (key) {
            return key !== route.key;
          }),
          replacingRouteKeys: []
        };
      });
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleCloseRoute", function (_ref5) {
      var route = _ref5.route;
      var _this$props2 = _this.props,
          state = _this$props2.state,
          navigation = _this$props2.navigation;

      if (state.routes.find(function (r) {
        return r.key === route.key;
      })) {
        navigation.dispatch(_objectSpread({}, _native.StackActions.pop(), {
          source: route.key,
          target: state.key
        }));
      } else {
        _this.setState(function (state) {
          return {
            routes: state.routes.filter(function (r) {
              return r.key !== route.key;
            }),
            openingRouteKeys: state.openingRouteKeys.filter(function (key) {
              return key !== route.key;
            }),
            closingRouteKeys: state.closingRouteKeys.filter(function (key) {
              return key !== route.key;
            })
          };
        });
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleTransitionStart", function (_ref6, closing) {
      var route = _ref6.route;
      return _this.props.navigation.emit({
        type: 'transitionStart',
        data: {
          closing: closing
        },
        target: route.key
      });
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleTransitionEnd", function (_ref7, closing) {
      var route = _ref7.route;
      return _this.props.navigation.emit({
        type: 'transitionEnd',
        data: {
          closing: closing
        },
        target: route.key
      });
    });

    return _this;
  }

  (0, _createClass2.default)(StackView, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          state = _this$props.state,
          navigation = _this$props.navigation,
          keyboardHandlingEnabled = _this$props.keyboardHandlingEnabled,
          _this$props$mode = _this$props.mode,
          mode = _this$props$mode === void 0 ? 'card' : _this$props$mode,
          rest = _objectWithoutProperties(_this$props, ["state", "navigation", "keyboardHandlingEnabled", "mode"]);

      var _this$state2 = this.state,
          routes = _this$state2.routes,
          descriptors = _this$state2.descriptors,
          openingRouteKeys = _this$state2.openingRouteKeys,
          closingRouteKeys = _this$state2.closingRouteKeys;
      var headerMode = mode !== 'modal' && _reactNative.Platform.OS === 'ios' ? 'float' : 'screen';
      return React.createElement(GestureHandlerWrapper, {
        style: styles.container
      }, React.createElement(_SafeAreaProviderCompat.default, null, React.createElement(_reactNativeSafeAreaContext.SafeAreaConsumer, null, function (insets) {
        return React.createElement(_KeyboardManager.default, {
          enabled: keyboardHandlingEnabled !== false
        }, function (props) {
          return React.createElement(_CardStack.default, _extends({
            mode: mode,
            insets: insets,
            getPreviousRoute: _this2.getPreviousRoute,
            getGesturesEnabled: _this2.getGesturesEnabled,
            routes: routes,
            openingRouteKeys: openingRouteKeys,
            closingRouteKeys: closingRouteKeys,
            onOpenRoute: _this2.handleOpenRoute,
            onCloseRoute: _this2.handleCloseRoute,
            onTransitionStart: _this2.handleTransitionStart,
            onTransitionEnd: _this2.handleTransitionEnd,
            renderHeader: _this2.renderHeader,
            renderScene: _this2.renderScene,
            headerMode: headerMode,
            state: state,
            descriptors: descriptors
          }, rest, props));
        });
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.state.routes === state.previousRoutes && state.routes.length) {
        if (props.descriptors !== state.previousDescriptors) {
          var _descriptors = state.routes.reduce(function (acc, route) {
            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];
            return acc;
          }, {});

          return {
            previousDescriptors: props.descriptors,
            descriptors: _descriptors
          };
        }

        return null;
      }

      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;
      var openingRouteKeys = state.openingRouteKeys,
          closingRouteKeys = state.closingRouteKeys,
          replacingRouteKeys = state.replacingRouteKeys,
          previousRoutes = state.previousRoutes;
      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];
      var nextFocusedRoute = routes[routes.length - 1];

      var isAnimationEnabled = function isAnimationEnabled(key) {
        var descriptor = props.descriptors[key] || state.descriptors[key];
        return descriptor ? descriptor.options.animationEnabled !== false : true;
      };

      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {
        var _descriptor$options$a;

        var descriptor = props.descriptors[key] || state.descriptors[key];
        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';
      };

      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {
        if (!previousRoutes.find(function (r) {
          return r.key === nextFocusedRoute.key;
        })) {
          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {
            openingRouteKeys = [].concat((0, _toConsumableArray2.default)(openingRouteKeys), [nextFocusedRoute.key]);
            closingRouteKeys = closingRouteKeys.filter(function (key) {
              return key !== nextFocusedRoute.key;
            });
            replacingRouteKeys = replacingRouteKeys.filter(function (key) {
              return key !== nextFocusedRoute.key;
            });

            if (!routes.find(function (r) {
              return r.key === previousFocusedRoute.key;
            })) {
              openingRouteKeys = openingRouteKeys.filter(function (key) {
                return key !== previousFocusedRoute.key;
              });

              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {
                closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);
                openingRouteKeys = openingRouteKeys.filter(function (key) {
                  return key !== nextFocusedRoute.key;
                });
                routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);
              } else {
                replacingRouteKeys = [].concat((0, _toConsumableArray2.default)(replacingRouteKeys), [previousFocusedRoute.key]);
                closingRouteKeys = closingRouteKeys.filter(function (key) {
                  return key !== previousFocusedRoute.key;
                });
                routes = routes.slice();
                routes.splice(routes.length - 1, 0, previousFocusedRoute);
              }
            }
          }
        } else if (!routes.find(function (r) {
          return r.key === previousFocusedRoute.key;
        })) {
          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {
            closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);
            openingRouteKeys = openingRouteKeys.filter(function (key) {
              return key !== previousFocusedRoute.key;
            });
            replacingRouteKeys = replacingRouteKeys.filter(function (key) {
              return key !== previousFocusedRoute.key;
            });
            routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);
          }
        } else {}
      } else if (replacingRouteKeys.length || closingRouteKeys.length) {
        var _routes;

        routes = routes.slice();

        (_routes = routes).splice.apply(_routes, [routes.length - 1, 0].concat((0, _toConsumableArray2.default)(state.routes.filter(function (_ref8) {
          var key = _ref8.key;
          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;
        }))));
      }

      if (!routes.length) {
        throw new Error('There should always be at least one route in the navigation state.');
      }

      var descriptors = routes.reduce(function (acc, route) {
        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];
        return acc;
      }, {});
      return {
        routes: routes,
        previousRoutes: props.state.routes,
        previousDescriptors: props.descriptors,
        openingRouteKeys: openingRouteKeys,
        closingRouteKeys: closingRouteKeys,
        replacingRouteKeys: replacingRouteKeys,
        descriptors: descriptors
      };
    }
  }]);
  return StackView;
}(React.Component);

exports.default = StackView;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,