{"version":3,"sources":["../../src/Notifications/Notifications.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAQA,IAAI,QAAJ;;AACA,IAAI,oBAAJ;;AAEA,SAAS,iBAAT,GAA0B;AACxB,MAAI,CAAC,QAAL,EAAe;AACb,IAAA,QAAQ,GAAG,IAAI,uBAAJ,EAAX;;AACA,gCAAsB,WAAtB,CAAkC,uBAAlC,EAA2D,gBAA3D;AACD;AACF;;AAEK,SAAU,gBAAV,CAA2B,YAA3B,EAAuC;AAC3C,MAAI,OAAO,YAAP,KAAwB,QAA5B,EAAsC;AACpC,IAAA,YAAY,GAAG,IAAI,CAAC,KAAL,CAAW,YAAX,CAAf;AACD;;AAGD,EAAA,YAAY,qBAAQ,YAAR,CAAZ;;AAEA,MAAI,OAAO,YAAY,CAAC,IAApB,KAA6B,QAAjC,EAA2C;AACzC,QAAI;AACF,MAAA,YAAY,CAAC,IAAb,GAAoB,IAAI,CAAC,KAAL,CAAW,YAAY,CAAC,IAAxB,CAApB;AACD,KAFD,CAEE,OAAO,CAAP,EAAU,CAEX;AACF;;AAED,EAAA,QAAQ,CAAC,IAAT,CAAc,cAAd,EAA8B,YAA9B;AACD;;AAED,SAAS,oBAAT,CAA8B,YAA9B,EAA0C;AACxC,EAAA,YAAY,GAAG,uBAAc,EAAd,EAAkB,YAAlB,CAAf;;AAEA,MAAI,CAAC,YAAY,CAAC,IAAlB,EAAwB;AACtB,IAAA,YAAY,CAAC,IAAb,GAAoB,EAApB;AACD;;AAED,MAAI,YAAY,CAAC,cAAb,CAA4B,OAA5B,CAAJ,EAA0C;AACxC,WAAO,YAAY,CAAC,KAApB;AACD;;AAGD,MAAI,sBAAS,EAAT,KAAgB,KAApB,EAA2B;AACzB,QAAI,YAAY,CAAC,OAAjB,EAA0B;AACxB,aAAO,YAAY,CAAC,OAApB;AACD;;AAED,QAAI,YAAY,CAAC,GAAjB,EAAsB;AACpB,MAAA,YAAY,GAAG,uBAAc,YAAd,EAA4B,YAAY,CAAC,GAAzC,CAAf;AACA,MAAA,YAAY,CAAC,IAAb,CAAkB,oBAAlB,GAAyC,YAAY,CAAC,GAAb,CAAiB,oBAA1D;AACA,aAAO,YAAY,CAAC,GAApB;AACD;AACF;;AAID,MAAI,sBAAS,EAAT,KAAgB,SAApB,EAA+B;AAC7B,QAAI,YAAY,CAAC,GAAjB,EAAsB;AACpB,aAAO,YAAY,CAAC,GAApB;AACD;;AAED,QAAI,YAAY,CAAC,OAAjB,EAA0B;AACxB,MAAA,YAAY,GAAG,uBAAc,YAAd,EAA4B,YAAY,CAAC,OAAzC,CAAf;AACA,aAAO,YAAY,CAAC,OAApB;AACD;AACF;;AAED,SAAO,YAAP;AACD;;AAED,SAAS,qBAAT,CAA+B,YAA/B,EAA2C;AACzC,MAAI,sBAAS,EAAT,KAAgB,KAApB,EAA2B;AACzB,4BACE,CAAC,CAAC,YAAY,CAAC,KAAf,IAAwB,CAAC,CAAC,YAAY,CAAC,IADzC,EAEE,4DAFF;AAID,GALD,MAKO,IAAI,sBAAS,EAAT,KAAgB,SAApB,EAA+B;AACpC,4BAAU,CAAC,CAAC,YAAY,CAAC,KAAzB,EAAgC,gDAAhC;AACD;AACF;;AAED,IAAI,oBAAoB,GAAG,0BAA3B;AAGA,IAAI,mBAAmB,GAAG,OAAO,+BAAsB,aAA7B,KAA+C,UAAzE;;AAEA,SAAe,kBAAf,CAAkC,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAE8B,0BAAa,OAAb,MAAwB,oBAAxB,GAA+C,EAA/C,CAF9B;;AAAA;AAEQ,UAAA,aAFR;;AAAA,eAGQ,aAHR;AAAA;AAAA;AAAA;;AAAA,2CAIa,IAAI,CAAC,KAAL,CAAW,aAAX,CAJb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAOS,IAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAS,oBAAT,CAA8B,EAA9B,EAAwC;AACtC,SAAO,0BAAa,UAAb,MAA2B,oBAA3B,GAAkD,EAAlD,CAAP;AACD;;AAED,IAAI,sBAAS,EAAT,KAAgB,SAApB,EAA+B;AAC7B,4BAAa,KAAb,GAAqB,iBAAe,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAEA,0BAAa,UAAb,EAFA;;AAAA;AAEb,YAAA,IAFa;;AAAA,kBAGb,IAAI,IAAI,IAAI,CAAC,MAHA;AAAA;AAAA;AAAA;;AAIX,YAAA,YAJW,GAII,IAAI,CAAC,MAAL,CAAY,UAAA,GAAG;AAAA,qBAAI,CAAC,GAAG,CAAC,UAAJ,CAAe,oBAAf,CAAL;AAAA,aAAf,CAJJ;AAAA;AAAA,8CAKT,0BAAa,WAAb,CAAyB,YAAzB,CALS;;AAAA;AAOjB,YAAA,QAAQ,IAAI,QAAQ,EAApB;AAPiB;AAAA;;AAAA;AAAA;AAAA;AASjB,YAAA,QAAQ,IAAI,QAAQ,cAApB;AATiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;AAaD;;AAID,SAAS,kBAAT,CAA4B,EAA5B,EAAwC,OAAxC,EAAwD;AACtD,SAAO,0BAAa,OAAb,MAAwB,oBAAxB,GAA+C,EAA/C,EAAqD,IAAI,CAAC,SAAL,CAAe,OAAf,CAArD,CAAP;AACD;;eAEc;AAEb,EAAA,uBAFa,mCAEW,YAFX,EAEqC;AAChD,IAAA,oBAAoB,GAAG,YAAvB;AACD,GAJY;AAOb,EAAA,mBAPa,+BAOO,UAPP,EAO2B,OAP3B,EAOgD;AAC3D,WAAO,+BAAsB,mBAAtB,CAA0C,UAA1C,EAAsD,OAAtD,CAAP;AACD,GATY;AAWb,EAAA,mBAXa,+BAWO,UAXP,EAWyB;AACpC,WAAO,+BAAsB,mBAAtB,CAA0C,UAA1C,CAAP;AACD,GAbY;AAgBb,EAAA,qBAhBa,mCAgBQ;AACnB,QAAI,CAAC,+BAAsB,yBAA3B,EAAsD;AACpD,YAAM,IAAI,yBAAJ,CAAwB,oBAAxB,EAA8C,uBAA9C,CAAN;AACD;;AACD,QAAI,CAAC,uBAAU,QAAf,EAAyB;AACvB,YAAM,IAAI,KAAJ,0DAAN;AACD;;AACD,WAAO,+BAAsB,yBAAtB,EAAP;AACD,GAxBY;AA0Bb,EAAA,uBAAuB,EAAE,iCAAC,MAAD,EAEqB;AAC5C,QAAI,CAAC,+BAAsB,uBAA3B,EAAoD;AAClD,YAAM,IAAI,yBAAJ,CAAwB,oBAAxB,EAA8C,yBAA9C,CAAN;AACD;;AACD,WAAO,+BAAsB,uBAAtB,CAA8C,MAAM,IAAI,EAAxD,CAAP;AACD,GAjCY;AAmCb,EAAA,yBAnCa,qCAmCa,EAnCb,EAmCyB,OAnCzB,EAmCyC;AACpD,QAAI,sBAAS,EAAT,KAAgB,SAApB,EAA+B;AAC7B,MAAA,OAAO,CAAC,IAAR,sDAAgE,sBAAS,EAAzE;AACA,aAAO,OAAO,CAAC,OAAR,EAAP;AACD;;AAGD,QAAI,CAAC,mBAAL,EAA0B;AACxB,aAAO,kBAAkB,CAAC,EAAD,EAAK,OAAL,CAAzB;AACD;;AACD,WAAO,+BAAsB,aAAtB,CAAoC,EAApC,EAAwC,OAAxC,CAAP;AACD,GA9CY;AAgDb,EAAA,yBAhDa,qCAgDa,EAhDb,EAgDuB;AAClC,QAAI,sBAAS,EAAT,KAAgB,SAApB,EAA+B;AAC7B,MAAA,OAAO,CAAC,IAAR,sDAAgE,sBAAS,EAAzE;AACA,aAAO,OAAO,CAAC,OAAR,EAAP;AACD;;AAGD,QAAI,CAAC,mBAAL,EAA0B;AACxB,aAAO,OAAO,CAAC,OAAR,EAAP;AACD;;AACD,WAAO,+BAAsB,aAAtB,CAAoC,EAApC,CAAP;AACD,GA3DY;AA8DP,EAAA,6BA9DO,yCA+DX,YA/DW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiEX,YAAA,qBAAqB,CAAC,YAAD,CAArB;;AACI,YAAA,kBAlEO,GAkEc,oBAAoB,CAAC,YAAD,CAlElC;;AAAA,kBAoEP,sBAAS,EAAT,KAAgB,SApET;AAAA;AAAA;AAAA;;AAAA;AAAA,8CAqEI,+BAAsB,wBAAtB,CAA+C,kBAA/C,CArEJ;;AAAA;AAAA;;AAAA;AAAA,iBAwEL,kBAAkB,CAAC,SAxEd;AAAA;AAAA;AAAA;;AAAA;AAAA,8CAyEU,kBAAkB,CAAC,kBAAkB,CAAC,SAApB,CAzE5B;;AAAA;AAyEP,YAAA,QAzEO;;AAAA;AAAA,iBA4EL,mBA5EK;AAAA;AAAA;AAAA;;AA8EP,YAAA,oBAAoB,CAAC,kBAAkB,CAAC,SAApB,CAApB;;AA9EO,8CA+EA,+BAAsB,mCAAtB,CACL,kBADK,EAEL,QAFK,CA/EA;;AAAA;AAsFP,gBAAI,QAAJ,EAAc;AACZ,cAAA,kBAAkB,CAAC,KAAnB,GAA2B,QAAQ,CAAC,KAApC;AACA,cAAA,kBAAkB,CAAC,QAAnB,GAA8B,QAAQ,CAAC,QAAvC;AACA,cAAA,kBAAkB,CAAC,OAAnB,GAA6B,QAAQ,CAAC,OAAtC;AACD;;AA1FM,8CA2FA,+BAAsB,wBAAtB,CAA+C,kBAA/C,CA3FA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiGP,EAAA,8BAjGO,0CAkGX,YAlGW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAmGX,YAAA,OAnGW,8DAuGP,EAvGO;AA2GL,YAAA,GA3GK,GA2GC,IAAI,CAAC,GAAL,EA3GD;;AA8GX,YAAA,qBAAqB,CAAC,YAAD,CAArB;;AACI,YAAA,kBA/GO,GA+Gc,oBAAoB,CAAC,YAAD,CA/GlC;;AAAA,iBAkHP,OAAO,CAAC,IAlHD;AAAA;AAAA;AAAA;;AAmHL,YAAA,aAnHK,GAmHwB,IAnHxB;;AAoHT,gBAAI,OAAO,CAAC,IAAR,IAAgB,OAAO,OAAO,CAAC,IAAf,KAAwB,QAA5C,EAAsD;AACpD,cAAA,aAAa,GAAG,IAAI,IAAJ,CAAS,OAAO,CAAC,IAAjB,CAAhB;;AACA,kBAAI,aAAa,CAAC,QAAd,OAA6B,cAAjC,EAAiD;AAC/C,gBAAA,aAAa,GAAG,IAAhB;AACD;AACF,aALD,MAKO,IAAI,OAAO,CAAC,IAAR,IAAgB,OAAO,CAAC,IAAR,YAAwB,IAA5C,EAAkD;AACvD,cAAA,aAAa,GAAG,OAAO,CAAC,IAAxB;AACD;;AA3HQ,gBA8HJ,aA9HI;AAAA;AAAA;AAAA;;AAAA,kBA+HD,IAAI,KAAJ,yJA/HC;;AAAA;AAsIT,gBAAI,aAAa,CAAC,OAAd,KAA0B,GAA9B,EAAmC;AACjC,cAAA,OAAO,CAAC,IAAR;AAGD;;AAED,YAAA,OAAO,qBACF,OADE;AAEL,cAAA,IAAI,EAAE,aAAa,CAAC,OAAd;AAFD,cAAP;;AA5IS;AAAA,kBAkJP,OAAO,CAAC,UAAR,IAAsB,IAAtB,IAA8B,OAAO,CAAC,MAAR,IAAkB,IAlJzC;AAAA;AAAA;AAAA;;AAAA,kBAmJH,IAAI,KAAJ,wEAnJG;;AAAA;AAAA,kBAuJP,OAAO,CAAC,MAAR,IAAkB,IAvJX;AAAA;AAAA;AAAA;;AAwJH,YAAA,YAxJG,GAwJY,IAAI,GAAJ,CAAQ,CAAC,QAAD,EAAW,MAAX,EAAmB,KAAnB,EAA0B,MAA1B,EAAkC,OAAlC,EAA2C,MAA3C,CAAR,CAxJZ;;AAAA,gBAyJJ,YAAY,CAAC,GAAb,CAAiB,OAAO,CAAC,MAAzB,CAzJI;AAAA;AAAA;AAAA;;AAAA,kBA0JD,IAAI,KAAJ,yGA1JC;;AAAA;AAAA,kBAgKP,OAAO,CAAC,UAAR,IAAsB,IAhKf;AAAA;AAAA;AAAA;;AAAA,kBAiKL,sBAAS,EAAT,KAAgB,KAjKX;AAAA;AAAA;AAAA;;AAAA,kBAkKD,IAAI,KAAJ,qDAlKC;;AAAA;AAAA,kBAqKL,OAAO,CAAC,UAAR,IAAsB,CAAtB,IAA2B,CAAC,MAAM,CAAC,SAAP,CAAiB,OAAO,CAAC,UAAzB,CArKvB;AAAA;AAAA;AAAA;;AAAA,kBAsKD,IAAI,KAAJ,gFAtKC;;AAAA;AAAA,kBA4KP,sBAAS,EAAT,KAAgB,SA5KT;AAAA;AAAA;AAAA;;AAAA,iBA6KL,OAAO,CAAC,MA7KH;AAAA;AAAA;AAAA;;AA8KP,YAAA,OAAO,CAAC,IAAR,CACE,8HADF;AA9KO,8CAiLA,+BAAsB,wCAAtB,CACL,kBADK,EAEL,OAFK,CAjLA;;AAAA;AAAA,8CAuLF,+BAAsB,yBAAtB,CAAgD,kBAAhD,EAAoE,OAApE,CAvLE;;AAAA;AAAA,iBA0LL,kBAAkB,CAAC,SA1Ld;AAAA;AAAA;AAAA;;AAAA;AAAA,8CA2LU,kBAAkB,CAAC,kBAAkB,CAAC,SAApB,CA3L5B;;AAAA;AA2LP,YAAA,QA3LO;;AAAA;AAAA,iBA8LL,mBA9LK;AAAA;AAAA;AAAA;;AAgMP,YAAA,oBAAoB,CAAC,kBAAkB,CAAC,SAApB,CAApB;;AAhMO,8CAiMA,+BAAsB,oCAAtB,CACL,kBADK,EAEL,OAFK,EAGL,QAHK,CAjMA;;AAAA;AAyMP,gBAAI,QAAJ,EAAc;AACZ,cAAA,kBAAkB,CAAC,KAAnB,GAA2B,QAAQ,CAAC,KAApC;AACA,cAAA,kBAAkB,CAAC,QAAnB,GAA8B,QAAQ,CAAC,QAAvC;AACA,cAAA,kBAAkB,CAAC,OAAnB,GAA6B,QAAQ,CAAC,OAAtC;AACD;;AA7MM,8CA8MA,+BAAsB,yBAAtB,CAAgD,kBAAhD,EAAoE,OAApE,CA9MA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoNP,EAAA,wBApNO,oCAoNkB,cApNlB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAqNN,+BAAsB,mBArNhB;AAAA;AAAA;AAAA;;AAAA,kBAsNH,IAAI,yBAAJ,CAAwB,oBAAxB,EAA8C,qBAA9C,CAtNG;;AAAA;AAAA;AAAA,8CAwNE,+BAAsB,mBAAtB,CAA0C,cAA1C,CAxNF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4NP,EAAA,4BA5NO;AAAA;AAAA;AAAA;AAAA;AAAA,gBA6NN,+BAAsB,uBA7NhB;AAAA;AAAA;AAAA;;AAAA,kBA8NH,IAAI,yBAAJ,CAAwB,oBAAxB,EAA8C,yBAA9C,CA9NG;;AAAA;AAAA;AAAA,8CAgOE,+BAAsB,uBAAtB,EAhOF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoOb,EAAA,gCApOa,4CAoOoB,cApOpB,EAoOuD;AAClE,QAAI,sBAAS,EAAT,KAAgB,SAAhB,IAA6B,OAAO,cAAP,KAA0B,QAA3D,EAAqE;AACnE,aAAO,+BAAsB,4CAAtB,CAAmE,cAAnE,CAAP;AACD;;AACD,WAAO,+BAAsB,gCAAtB,CAAuD,cAAvD,CAAP;AACD,GAzOY;AA4Ob,EAAA,oCA5Oa,kDA4OuB;AAClC,WAAO,+BAAsB,oCAAtB,EAAP;AACD,GA9OY;AAiPb,EAAA,WAjPa,uBAiPD,QAjPC,EAiPgD;AAC3D,IAAA,iBAAiB;;AAEjB,QAAI,oBAAJ,EAA0B;AACxB,UAAM,mBAAmB,GAAG,oBAA5B;AACA,MAAA,oBAAoB,GAAG,IAAvB;AACA,MAAA,UAAU,CAAC,YAAK;AACd,QAAA,gBAAgB,CAAC,mBAAD,CAAhB;AACD,OAFS,EAEP,CAFO,CAAV;AAGD;;AAED,WAAO,QAAQ,CAAC,WAAT,CAAqB,cAArB,EAAqC,QAArC,CAAP;AACD,GA7PY;AA+PP,EAAA,mBA/PO;AAAA;AAAA;AAAA;AAAA;AAAA,gBAgQN,+BAAsB,mBAhQhB;AAAA;AAAA;AAAA;;AAAA,8CAiQF,CAjQE;;AAAA;AAAA,8CAmQJ,+BAAsB,mBAAtB,EAnQI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsQP,EAAA,mBAtQO,+BAsQa,MAtQb;AAAA;AAAA;AAAA;AAAA;AAAA,gBAuQN,+BAAsB,mBAvQhB;AAAA;AAAA;AAAA;;AAAA,kBAwQH,IAAI,yBAAJ,CAAwB,oBAAxB,EAA8C,qBAA9C,CAxQG;;AAAA;AAAA,8CA0QJ,+BAAsB,mBAAtB,CAA0C,MAA1C,CA1QI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6QP,EAAA,qCA7QO,iDA8QX,YA9QW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+QX,YAAA,OA/QW,8DAwRP,EAxRO;AA0RL,YAAA,eA1RK,GA2RT,CAAC,OAAO,CAAC,KAAR,IAAiB,IAAjB,IAAyB,kBAAkB,CAAC,OAAO,CAAC,KAAT,EAAgB,CAAhB,EAAmB,EAAnB,CAA5C,MACC,OAAO,CAAC,GAAR,IAAe,IAAf,IAAuB,kBAAkB,CAAC,OAAO,CAAC,GAAT,EAAc,CAAd,EAAiB,EAAjB,CAD1C,MAEC,OAAO,CAAC,IAAR,IAAgB,IAAhB,IAAwB,kBAAkB,CAAC,OAAO,CAAC,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAF3C,MAGC,OAAO,CAAC,MAAR,IAAkB,IAAlB,IAA0B,kBAAkB,CAAC,OAAO,CAAC,MAAT,EAAiB,CAAjB,EAAoB,EAApB,CAH7C,MAIC,OAAO,CAAC,MAAR,IAAkB,IAAlB,IAA0B,kBAAkB,CAAC,OAAO,CAAC,MAAT,EAAiB,CAAjB,EAAoB,EAApB,CAJ7C,MAKC,OAAO,CAAC,OAAR,IAAmB,IAAnB,IAA2B,kBAAkB,CAAC,OAAO,CAAC,OAAT,EAAkB,CAAlB,EAAqB,CAArB,CAL9C,MAMC,OAAO,CAAC,OAAR,IAAmB,IAAnB,IAA2B,OAAO,CAAC,GAAR,IAAe,IAN3C,CA3RS;;AAAA,gBAmSN,eAnSM;AAAA;AAAA;AAAA;;AAAA,kBAoSH,IAAI,gBAAJ,CACJ,eADI,EAEJ,uEAFI,CApSG;;AAAA;AA0SX,YAAA,qBAAqB,CAAC,YAAD,CAArB;;AACI,YAAA,kBA3SO,GA2Sc,oBAAoB,CAAC,YAAD,CA3SlC;AAAA,8CA6SJ,+BAAsB,gCAAtB,CAAuD,kBAAvD,EAA2E,OAA3E,CA7SI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgTP,EAAA,kCAhTO,8CAiTX,YAjTW,EAkTX,OAlTW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAuTP,OAAO,CAAC,QAAR,GAAmB,CAvTZ;AAAA;AAAA;AAAA;;AAAA,kBAwTH,IAAI,gBAAJ,CAAe,eAAf,EAAgC,kCAAhC,CAxTG;;AAAA;AA2TX,YAAA,qBAAqB,CAAC,YAAD,CAArB;;AACI,YAAA,kBA5TO,GA4Tc,oBAAoB,CAAC,YAAD,CA5TlC;AAAA,+CA8TJ,+BAAsB,6BAAtB,CAAoD,kBAApD,EAAwE,OAAxE,CA9TI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C;;;AAkUf,SAAS,kBAAT,CAA4B,QAA5B,EAA8C,GAA9C,EAA2D,GAA3D,EAAsE;AACpE,SAAO,QAAQ,IAAI,GAAZ,IAAmB,QAAQ,IAAI,GAAtC;AACD","sourcesContent":["import Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport invariant from 'invariant';\nimport { AsyncStorage, Platform } from 'react-native';\nimport { CodedError, RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport ExponentNotifications from './ExponentNotifications';\nimport {\n  Notification,\n  LocalNotification,\n  Channel,\n  ActionType,\n  LocalNotificationId,\n} from './Notifications.types';\nlet _emitter;\nlet _initialNotification;\n\nfunction _maybeInitEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.notification', emitNotification);\n  }\n}\n\nexport function emitNotification(notification) {\n  if (typeof notification === 'string') {\n    notification = JSON.parse(notification);\n  }\n\n  /* Don't mutate the original notification */\n  notification = { ...notification };\n\n  if (typeof notification.data === 'string') {\n    try {\n      notification.data = JSON.parse(notification.data);\n    } catch (e) {\n      // It's actually just a string, that's fine\n    }\n  }\n\n  _emitter.emit('notification', notification);\n}\n\nfunction _processNotification(notification) {\n  notification = Object.assign({}, notification);\n\n  if (!notification.data) {\n    notification.data = {};\n  }\n\n  if (notification.hasOwnProperty('count')) {\n    delete notification.count;\n  }\n\n  // Delete any Android properties on iOS and merge the iOS properties on root notification object\n  if (Platform.OS === 'ios') {\n    if (notification.android) {\n      delete notification.android;\n    }\n\n    if (notification.ios) {\n      notification = Object.assign(notification, notification.ios);\n      notification.data._displayInForeground = notification.ios._displayInForeground;\n      delete notification.ios;\n    }\n  }\n\n  // Delete any iOS properties on Android and merge the Android properties on root notification\n  // object\n  if (Platform.OS === 'android') {\n    if (notification.ios) {\n      delete notification.ios;\n    }\n\n    if (notification.android) {\n      notification = Object.assign(notification, notification.android);\n      delete notification.android;\n    }\n  }\n\n  return notification;\n}\n\nfunction _validateNotification(notification) {\n  if (Platform.OS === 'ios') {\n    invariant(\n      !!notification.title && !!notification.body,\n      'Local notifications on iOS require both a title and a body'\n    );\n  } else if (Platform.OS === 'android') {\n    invariant(!!notification.title, 'Local notifications on Android require a title');\n  }\n}\n\nlet ASYNC_STORAGE_PREFIX = '__expo_internal_channel_';\n// TODO: remove this before releasing\n// this will always be `true` for SDK 28+\nlet IS_USING_NEW_BINARY = typeof ExponentNotifications.createChannel === 'function';\n\nasync function _legacyReadChannel(id: string): Promise<Channel | null> {\n  try {\n    let channelString = await AsyncStorage.getItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n    if (channelString) {\n      return JSON.parse(channelString);\n    }\n  } catch (e) {}\n  return null;\n}\n\nfunction _legacyDeleteChannel(id: string): Promise<void> {\n  return AsyncStorage.removeItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n}\n\nif (Platform.OS === 'android') {\n  AsyncStorage.clear = async function(callback?: (error?: Error) => void): Promise<void> {\n    try {\n      let keys = await AsyncStorage.getAllKeys();\n      if (keys && keys.length) {\n        let filteredKeys = keys.filter(key => !key.startsWith(ASYNC_STORAGE_PREFIX));\n        await AsyncStorage.multiRemove(filteredKeys);\n      }\n      callback && callback();\n    } catch (e) {\n      callback && callback(e);\n      throw e;\n    }\n  };\n}\n\n// This codepath will never be triggered in SDK 28 and above\n// TODO: remove before releasing\nfunction _legacySaveChannel(id: string, channel: Channel): Promise<void> {\n  return AsyncStorage.setItem(`${ASYNC_STORAGE_PREFIX}${id}`, JSON.stringify(channel));\n}\n\nexport default {\n  /* Only used internally to initialize the notification from top level props */\n  _setInitialNotification(notification: Notification) {\n    _initialNotification = notification;\n  },\n\n  // User passes set of actions titles.\n  createCategoryAsync(categoryId: string, actions: ActionType[]): Promise<void> {\n    return ExponentNotifications.createCategoryAsync(categoryId, actions);\n  },\n\n  deleteCategoryAsync(categoryId: string): Promise<void> {\n    return ExponentNotifications.deleteCategoryAsync(categoryId);\n  },\n\n  /* Re-export */\n  getExpoPushTokenAsync(): Promise<string> {\n    if (!ExponentNotifications.getExponentPushTokenAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'getExpoPushTokenAsync');\n    }\n    if (!Constants.isDevice) {\n      throw new Error(`Must be on a physical device to get an Expo Push Token`);\n    }\n    return ExponentNotifications.getExponentPushTokenAsync();\n  },\n\n  getDevicePushTokenAsync: (config: {\n    gcmSenderId?: string;\n  }): Promise<{ type: string; data: string }> => {\n    if (!ExponentNotifications.getDevicePushTokenAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'getDevicePushTokenAsync');\n    }\n    return ExponentNotifications.getDevicePushTokenAsync(config || {});\n  },\n\n  createChannelAndroidAsync(id: string, channel: Channel): Promise<void> {\n    if (Platform.OS !== 'android') {\n      console.warn(`createChannelAndroidAsync(...) has no effect on ${Platform.OS}`);\n      return Promise.resolve();\n    }\n    // This codepath will never be triggered in SDK 28 and above\n    // TODO: remove before releasing\n    if (!IS_USING_NEW_BINARY) {\n      return _legacySaveChannel(id, channel);\n    }\n    return ExponentNotifications.createChannel(id, channel);\n  },\n\n  deleteChannelAndroidAsync(id: string): Promise<void> {\n    if (Platform.OS !== 'android') {\n      console.warn(`deleteChannelAndroidAsync(...) has no effect on ${Platform.OS}`);\n      return Promise.resolve();\n    }\n    // This codepath will never be triggered in SDK 28 and above\n    // TODO: remove before releasing\n    if (!IS_USING_NEW_BINARY) {\n      return Promise.resolve();\n    }\n    return ExponentNotifications.deleteChannel(id);\n  },\n\n  /* Shows a notification instantly */\n  async presentLocalNotificationAsync(\n    notification: LocalNotification\n  ): Promise<LocalNotificationId> {\n    _validateNotification(notification);\n    let nativeNotification = _processNotification(notification);\n\n    if (Platform.OS !== 'android') {\n      return await ExponentNotifications.presentLocalNotification(nativeNotification);\n    } else {\n      let _channel;\n      if (nativeNotification.channelId) {\n        _channel = await _legacyReadChannel(nativeNotification.channelId);\n      }\n\n      if (IS_USING_NEW_BINARY) {\n        // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n        _legacyDeleteChannel(nativeNotification.channelId);\n        return ExponentNotifications.presentLocalNotificationWithChannel(\n          nativeNotification,\n          _channel\n        );\n      } else {\n        // TODO: remove this codepath before releasing, it will never be triggered on SDK 28+\n        // channel does not actually exist, so add its settings to the individual notification\n        if (_channel) {\n          nativeNotification.sound = _channel.sound;\n          nativeNotification.priority = _channel.priority;\n          nativeNotification.vibrate = _channel.vibrate;\n        }\n        return ExponentNotifications.presentLocalNotification(nativeNotification);\n      }\n    }\n  },\n\n  /* Schedule a notification at a later date */\n  async scheduleLocalNotificationAsync(\n    notification: LocalNotification,\n    options: {\n      time?: Date | number;\n      repeat?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n      intervalMs?: number;\n    } = {}\n  ): Promise<LocalNotificationId> {\n    // set now at the beginning of the method, to prevent potential weird warnings when we validate\n    // options.time later on\n    const now = Date.now();\n\n    // Validate and process the notification data\n    _validateNotification(notification);\n    let nativeNotification = _processNotification(notification);\n\n    // Validate `options.time`\n    if (options.time) {\n      let timeAsDateObj: Date | null = null;\n      if (options.time && typeof options.time === 'number') {\n        timeAsDateObj = new Date(options.time);\n        if (timeAsDateObj.toString() === 'Invalid Date') {\n          timeAsDateObj = null;\n        }\n      } else if (options.time && options.time instanceof Date) {\n        timeAsDateObj = options.time;\n      }\n\n      // If we couldn't convert properly, throw an error\n      if (!timeAsDateObj) {\n        throw new Error(\n          `Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.`\n        );\n      }\n\n      // If someone passes in a value that is too small, say, by an order of 1000 (it's common to\n      // accidently pass seconds instead of ms), display a warning.\n      if (timeAsDateObj.getTime() < now) {\n        console.warn(\n          `Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?`\n        );\n      }\n\n      options = {\n        ...options,\n        time: timeAsDateObj.getTime(),\n      };\n    }\n\n    if (options.intervalMs != null && options.repeat != null) {\n      throw new Error(`Pass either the \"repeat\" option or \"intervalMs\" option, not both`);\n    }\n\n    // Validate options.repeat\n    if (options.repeat != null) {\n      const validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);\n      if (!validOptions.has(options.repeat)) {\n        throw new Error(\n          `Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option`\n        );\n      }\n    }\n\n    if (options.intervalMs != null) {\n      if (Platform.OS === 'ios') {\n        throw new Error(`The \"intervalMs\" option is not supported on iOS`);\n      }\n\n      if (options.intervalMs <= 0 || !Number.isInteger(options.intervalMs)) {\n        throw new Error(\n          `Pass an integer greater than zero as the value for the \"intervalMs\" option`\n        );\n      }\n    }\n\n    if (Platform.OS !== 'android') {\n      if (options.repeat) {\n        console.warn(\n          'Ability to schedule an automatically repeated notification is deprecated on iOS and will be removed in the next SDK release.'\n        );\n        return ExponentNotifications.legacyScheduleLocalRepeatingNotification(\n          nativeNotification,\n          options\n        );\n      }\n\n      return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n    } else {\n      let _channel;\n      if (nativeNotification.channelId) {\n        _channel = await _legacyReadChannel(nativeNotification.channelId);\n      }\n\n      if (IS_USING_NEW_BINARY) {\n        // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n        _legacyDeleteChannel(nativeNotification.channelId);\n        return ExponentNotifications.scheduleLocalNotificationWithChannel(\n          nativeNotification,\n          options,\n          _channel\n        );\n      } else {\n        // TODO: remove this codepath before releasing, it will never be triggered on SDK 28+\n        // channel does not actually exist, so add its settings to the individual notification\n        if (_channel) {\n          nativeNotification.sound = _channel.sound;\n          nativeNotification.priority = _channel.priority;\n          nativeNotification.vibrate = _channel.vibrate;\n        }\n        return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n      }\n    }\n  },\n\n  /* Dismiss currently shown notification with ID (Android only) */\n  async dismissNotificationAsync(notificationId: LocalNotificationId): Promise<void> {\n    if (!ExponentNotifications.dismissNotification) {\n      throw new UnavailabilityError('Expo.Notifications', 'dismissNotification');\n    }\n    return await ExponentNotifications.dismissNotification(notificationId);\n  },\n\n  /* Dismiss all currently shown notifications (Android only) */\n  async dismissAllNotificationsAsync(): Promise<void> {\n    if (!ExponentNotifications.dismissAllNotifications) {\n      throw new UnavailabilityError('Expo.Notifications', 'dismissAllNotifications');\n    }\n    return await ExponentNotifications.dismissAllNotifications();\n  },\n\n  /* Cancel scheduled notification notification with ID */\n  cancelScheduledNotificationAsync(notificationId: LocalNotificationId): Promise<void> {\n    if (Platform.OS === 'android' && typeof notificationId === 'string') {\n      return ExponentNotifications.cancelScheduledNotificationWithStringIdAsync(notificationId);\n    }\n    return ExponentNotifications.cancelScheduledNotificationAsync(notificationId);\n  },\n\n  /* Cancel all scheduled notifications */\n  cancelAllScheduledNotificationsAsync(): Promise<void> {\n    return ExponentNotifications.cancelAllScheduledNotificationsAsync();\n  },\n\n  /* Primary public api */\n  addListener(listener: (notification: Notification) => unknown): EventSubscription {\n    _maybeInitEmitter();\n\n    if (_initialNotification) {\n      const initialNotification = _initialNotification;\n      _initialNotification = null;\n      setTimeout(() => {\n        emitNotification(initialNotification);\n      }, 0);\n    }\n\n    return _emitter.addListener('notification', listener);\n  },\n\n  async getBadgeNumberAsync(): Promise<number> {\n    if (!ExponentNotifications.getBadgeNumberAsync) {\n      return 0;\n    }\n    return ExponentNotifications.getBadgeNumberAsync();\n  },\n\n  async setBadgeNumberAsync(number: number): Promise<void> {\n    if (!ExponentNotifications.setBadgeNumberAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'setBadgeNumberAsync');\n    }\n    return ExponentNotifications.setBadgeNumberAsync(number);\n  },\n\n  async scheduleNotificationWithCalendarAsync(\n    notification: LocalNotification,\n    options: {\n      year?: number;\n      month?: number;\n      hour?: number;\n      day?: number;\n      minute?: number;\n      second?: number;\n      weekDay?: number;\n      repeat?: boolean;\n    } = {}\n  ): Promise<string> {\n    const areOptionsValid: boolean =\n      (options.month == null || isInRangeInclusive(options.month, 1, 12)) &&\n      (options.day == null || isInRangeInclusive(options.day, 1, 31)) &&\n      (options.hour == null || isInRangeInclusive(options.hour, 0, 23)) &&\n      (options.minute == null || isInRangeInclusive(options.minute, 0, 59)) &&\n      (options.second == null || isInRangeInclusive(options.second, 0, 59)) &&\n      (options.weekDay == null || isInRangeInclusive(options.weekDay, 1, 7)) &&\n      (options.weekDay == null || options.day == null);\n\n    if (!areOptionsValid) {\n      throw new CodedError(\n        'WRONG_OPTIONS',\n        'Options in scheduleNotificationWithCalendarAsync call were incorrect!'\n      );\n    }\n\n    _validateNotification(notification);\n    let nativeNotification = _processNotification(notification);\n\n    return ExponentNotifications.scheduleNotificationWithCalendar(nativeNotification, options);\n  },\n\n  async scheduleNotificationWithTimerAsync(\n    notification: LocalNotification,\n    options: {\n      interval: number;\n      repeat?: boolean;\n    }\n  ): Promise<string> {\n    if (options.interval < 1) {\n      throw new CodedError('WRONG_OPTIONS', 'Interval must be not less then 1');\n    }\n\n    _validateNotification(notification);\n    let nativeNotification = _processNotification(notification);\n\n    return ExponentNotifications.scheduleNotificationWithTimer(nativeNotification, options);\n  },\n};\n\nfunction isInRangeInclusive(variable: number, min: number, max: number): boolean {\n  return variable >= min && variable <= max;\n}\n"],"sourceRoot":""}