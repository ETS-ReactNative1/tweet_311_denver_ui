66013f2d6d454e8de63c2c8c1b981175
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emitNotification = emitNotification;
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _expoConstants = _interopRequireDefault(require("expo-constants"));

var _fbemitter = require("fbemitter");

var _invariant = _interopRequireDefault(require("invariant"));

var _reactNative = require("react-native");

var _core = require("@unimodules/core");

var _ExponentNotifications = _interopRequireDefault(require("./ExponentNotifications"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _emitter;

var _initialNotification;

function _maybeInitEmitter() {
  if (!_emitter) {
    _emitter = new _fbemitter.EventEmitter();

    _core.RCTDeviceEventEmitter.addListener('Exponent.notification', emitNotification);
  }
}

function emitNotification(notification) {
  if (typeof notification === 'string') {
    notification = JSON.parse(notification);
  }

  notification = _objectSpread({}, notification);

  if (typeof notification.data === 'string') {
    try {
      notification.data = JSON.parse(notification.data);
    } catch (e) {}
  }

  _emitter.emit('notification', notification);
}

function _processNotification(notification) {
  notification = (0, _extends2.default)({}, notification);

  if (!notification.data) {
    notification.data = {};
  }

  if (notification.hasOwnProperty('count')) {
    delete notification.count;
  }

  if (_reactNative.Platform.OS === 'ios') {
    if (notification.android) {
      delete notification.android;
    }

    if (notification.ios) {
      notification = (0, _extends2.default)(notification, notification.ios);
      notification.data._displayInForeground = notification.ios._displayInForeground;
      delete notification.ios;
    }
  }

  if (_reactNative.Platform.OS === 'android') {
    if (notification.ios) {
      delete notification.ios;
    }

    if (notification.android) {
      notification = (0, _extends2.default)(notification, notification.android);
      delete notification.android;
    }
  }

  return notification;
}

function _validateNotification(notification) {
  if (_reactNative.Platform.OS === 'ios') {
    (0, _invariant.default)(!!notification.title && !!notification.body, 'Local notifications on iOS require both a title and a body');
  } else if (_reactNative.Platform.OS === 'android') {
    (0, _invariant.default)(!!notification.title, 'Local notifications on Android require a title');
  }
}

var ASYNC_STORAGE_PREFIX = '__expo_internal_channel_';
var IS_USING_NEW_BINARY = typeof _ExponentNotifications.default.createChannel === 'function';

function _legacyReadChannel(id) {
  var channelString;
  return _regenerator.default.async(function _legacyReadChannel$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem("" + ASYNC_STORAGE_PREFIX + id));

        case 3:
          channelString = _context.sent;

          if (!channelString) {
            _context.next = 6;
            break;
          }

          return _context.abrupt("return", JSON.parse(channelString));

        case 6:
          _context.next = 10;
          break;

        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](0);

        case 10:
          return _context.abrupt("return", null);

        case 11:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[0, 8]]);
}

function _legacyDeleteChannel(id) {
  return _reactNative.AsyncStorage.removeItem("" + ASYNC_STORAGE_PREFIX + id);
}

if (_reactNative.Platform.OS === 'android') {
  _reactNative.AsyncStorage.clear = function _callee(callback) {
    var keys, filteredKeys;
    return _regenerator.default.async(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getAllKeys());

          case 3:
            keys = _context2.sent;

            if (!(keys && keys.length)) {
              _context2.next = 8;
              break;
            }

            filteredKeys = keys.filter(function (key) {
              return !key.startsWith(ASYNC_STORAGE_PREFIX);
            });
            _context2.next = 8;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.multiRemove(filteredKeys));

          case 8:
            callback && callback();
            _context2.next = 15;
            break;

          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2["catch"](0);
            callback && callback(_context2.t0);
            throw _context2.t0;

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, [[0, 11]]);
  };
}

function _legacySaveChannel(id, channel) {
  return _reactNative.AsyncStorage.setItem("" + ASYNC_STORAGE_PREFIX + id, JSON.stringify(channel));
}

var _default = {
  _setInitialNotification: function _setInitialNotification(notification) {
    _initialNotification = notification;
  },
  createCategoryAsync: function createCategoryAsync(categoryId, actions) {
    return _ExponentNotifications.default.createCategoryAsync(categoryId, actions);
  },
  deleteCategoryAsync: function deleteCategoryAsync(categoryId) {
    return _ExponentNotifications.default.deleteCategoryAsync(categoryId);
  },
  getExpoPushTokenAsync: function getExpoPushTokenAsync() {
    if (!_ExponentNotifications.default.getExponentPushTokenAsync) {
      throw new _core.UnavailabilityError('Expo.Notifications', 'getExpoPushTokenAsync');
    }

    if (!_expoConstants.default.isDevice) {
      throw new Error("Must be on a physical device to get an Expo Push Token");
    }

    return _ExponentNotifications.default.getExponentPushTokenAsync();
  },
  getDevicePushTokenAsync: function getDevicePushTokenAsync(config) {
    if (!_ExponentNotifications.default.getDevicePushTokenAsync) {
      throw new _core.UnavailabilityError('Expo.Notifications', 'getDevicePushTokenAsync');
    }

    return _ExponentNotifications.default.getDevicePushTokenAsync(config || {});
  },
  createChannelAndroidAsync: function createChannelAndroidAsync(id, channel) {
    if (_reactNative.Platform.OS !== 'android') {
      console.warn("createChannelAndroidAsync(...) has no effect on " + _reactNative.Platform.OS);
      return Promise.resolve();
    }

    if (!IS_USING_NEW_BINARY) {
      return _legacySaveChannel(id, channel);
    }

    return _ExponentNotifications.default.createChannel(id, channel);
  },
  deleteChannelAndroidAsync: function deleteChannelAndroidAsync(id) {
    if (_reactNative.Platform.OS !== 'android') {
      console.warn("deleteChannelAndroidAsync(...) has no effect on " + _reactNative.Platform.OS);
      return Promise.resolve();
    }

    if (!IS_USING_NEW_BINARY) {
      return Promise.resolve();
    }

    return _ExponentNotifications.default.deleteChannel(id);
  },
  presentLocalNotificationAsync: function presentLocalNotificationAsync(notification) {
    var nativeNotification, _channel;

    return _regenerator.default.async(function presentLocalNotificationAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _validateNotification(notification);

            nativeNotification = _processNotification(notification);

            if (!(_reactNative.Platform.OS !== 'android')) {
              _context3.next = 8;
              break;
            }

            _context3.next = 5;
            return _regenerator.default.awrap(_ExponentNotifications.default.presentLocalNotification(nativeNotification));

          case 5:
            return _context3.abrupt("return", _context3.sent);

          case 8:
            if (!nativeNotification.channelId) {
              _context3.next = 12;
              break;
            }

            _context3.next = 11;
            return _regenerator.default.awrap(_legacyReadChannel(nativeNotification.channelId));

          case 11:
            _channel = _context3.sent;

          case 12:
            if (!IS_USING_NEW_BINARY) {
              _context3.next = 17;
              break;
            }

            _legacyDeleteChannel(nativeNotification.channelId);

            return _context3.abrupt("return", _ExponentNotifications.default.presentLocalNotificationWithChannel(nativeNotification, _channel));

          case 17:
            if (_channel) {
              nativeNotification.sound = _channel.sound;
              nativeNotification.priority = _channel.priority;
              nativeNotification.vibrate = _channel.vibrate;
            }

            return _context3.abrupt("return", _ExponentNotifications.default.presentLocalNotification(nativeNotification));

          case 19:
          case "end":
            return _context3.stop();
        }
      }
    });
  },
  scheduleLocalNotificationAsync: function scheduleLocalNotificationAsync(notification) {
    var options,
        now,
        nativeNotification,
        timeAsDateObj,
        validOptions,
        _channel,
        _args4 = arguments;

    return _regenerator.default.async(function scheduleLocalNotificationAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
            now = Date.now();

            _validateNotification(notification);

            nativeNotification = _processNotification(notification);

            if (!options.time) {
              _context4.next = 11;
              break;
            }

            timeAsDateObj = null;

            if (options.time && typeof options.time === 'number') {
              timeAsDateObj = new Date(options.time);

              if (timeAsDateObj.toString() === 'Invalid Date') {
                timeAsDateObj = null;
              }
            } else if (options.time && options.time instanceof Date) {
              timeAsDateObj = options.time;
            }

            if (timeAsDateObj) {
              _context4.next = 9;
              break;
            }

            throw new Error("Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.");

          case 9:
            if (timeAsDateObj.getTime() < now) {
              console.warn("Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?");
            }

            options = _objectSpread({}, options, {
              time: timeAsDateObj.getTime()
            });

          case 11:
            if (!(options.intervalMs != null && options.repeat != null)) {
              _context4.next = 13;
              break;
            }

            throw new Error("Pass either the \"repeat\" option or \"intervalMs\" option, not both");

          case 13:
            if (!(options.repeat != null)) {
              _context4.next = 17;
              break;
            }

            validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);

            if (validOptions.has(options.repeat)) {
              _context4.next = 17;
              break;
            }

            throw new Error("Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option");

          case 17:
            if (!(options.intervalMs != null)) {
              _context4.next = 22;
              break;
            }

            if (!(_reactNative.Platform.OS === 'ios')) {
              _context4.next = 20;
              break;
            }

            throw new Error("The \"intervalMs\" option is not supported on iOS");

          case 20:
            if (!(options.intervalMs <= 0 || !Number.isInteger(options.intervalMs))) {
              _context4.next = 22;
              break;
            }

            throw new Error("Pass an integer greater than zero as the value for the \"intervalMs\" option");

          case 22:
            if (!(_reactNative.Platform.OS !== 'android')) {
              _context4.next = 29;
              break;
            }

            if (!options.repeat) {
              _context4.next = 26;
              break;
            }

            console.warn('Ability to schedule an automatically repeated notification is deprecated on iOS and will be removed in the next SDK release.');
            return _context4.abrupt("return", _ExponentNotifications.default.legacyScheduleLocalRepeatingNotification(nativeNotification, options));

          case 26:
            return _context4.abrupt("return", _ExponentNotifications.default.scheduleLocalNotification(nativeNotification, options));

          case 29:
            if (!nativeNotification.channelId) {
              _context4.next = 33;
              break;
            }

            _context4.next = 32;
            return _regenerator.default.awrap(_legacyReadChannel(nativeNotification.channelId));

          case 32:
            _channel = _context4.sent;

          case 33:
            if (!IS_USING_NEW_BINARY) {
              _context4.next = 38;
              break;
            }

            _legacyDeleteChannel(nativeNotification.channelId);

            return _context4.abrupt("return", _ExponentNotifications.default.scheduleLocalNotificationWithChannel(nativeNotification, options, _channel));

          case 38:
            if (_channel) {
              nativeNotification.sound = _channel.sound;
              nativeNotification.priority = _channel.priority;
              nativeNotification.vibrate = _channel.vibrate;
            }

            return _context4.abrupt("return", _ExponentNotifications.default.scheduleLocalNotification(nativeNotification, options));

          case 40:
          case "end":
            return _context4.stop();
        }
      }
    });
  },
  dismissNotificationAsync: function dismissNotificationAsync(notificationId) {
    return _regenerator.default.async(function dismissNotificationAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (_ExponentNotifications.default.dismissNotification) {
              _context5.next = 2;
              break;
            }

            throw new _core.UnavailabilityError('Expo.Notifications', 'dismissNotification');

          case 2:
            _context5.next = 4;
            return _regenerator.default.awrap(_ExponentNotifications.default.dismissNotification(notificationId));

          case 4:
            return _context5.abrupt("return", _context5.sent);

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    });
  },
  dismissAllNotificationsAsync: function dismissAllNotificationsAsync() {
    return _regenerator.default.async(function dismissAllNotificationsAsync$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (_ExponentNotifications.default.dismissAllNotifications) {
              _context6.next = 2;
              break;
            }

            throw new _core.UnavailabilityError('Expo.Notifications', 'dismissAllNotifications');

          case 2:
            _context6.next = 4;
            return _regenerator.default.awrap(_ExponentNotifications.default.dismissAllNotifications());

          case 4:
            return _context6.abrupt("return", _context6.sent);

          case 5:
          case "end":
            return _context6.stop();
        }
      }
    });
  },
  cancelScheduledNotificationAsync: function cancelScheduledNotificationAsync(notificationId) {
    if (_reactNative.Platform.OS === 'android' && typeof notificationId === 'string') {
      return _ExponentNotifications.default.cancelScheduledNotificationWithStringIdAsync(notificationId);
    }

    return _ExponentNotifications.default.cancelScheduledNotificationAsync(notificationId);
  },
  cancelAllScheduledNotificationsAsync: function cancelAllScheduledNotificationsAsync() {
    return _ExponentNotifications.default.cancelAllScheduledNotificationsAsync();
  },
  addListener: function addListener(listener) {
    _maybeInitEmitter();

    if (_initialNotification) {
      var initialNotification = _initialNotification;
      _initialNotification = null;
      setTimeout(function () {
        emitNotification(initialNotification);
      }, 0);
    }

    return _emitter.addListener('notification', listener);
  },
  getBadgeNumberAsync: function getBadgeNumberAsync() {
    return _regenerator.default.async(function getBadgeNumberAsync$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (_ExponentNotifications.default.getBadgeNumberAsync) {
              _context7.next = 2;
              break;
            }

            return _context7.abrupt("return", 0);

          case 2:
            return _context7.abrupt("return", _ExponentNotifications.default.getBadgeNumberAsync());

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    });
  },
  setBadgeNumberAsync: function setBadgeNumberAsync(number) {
    return _regenerator.default.async(function setBadgeNumberAsync$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (_ExponentNotifications.default.setBadgeNumberAsync) {
              _context8.next = 2;
              break;
            }

            throw new _core.UnavailabilityError('Expo.Notifications', 'setBadgeNumberAsync');

          case 2:
            return _context8.abrupt("return", _ExponentNotifications.default.setBadgeNumberAsync(number));

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    });
  },
  scheduleNotificationWithCalendarAsync: function scheduleNotificationWithCalendarAsync(notification) {
    var options,
        areOptionsValid,
        nativeNotification,
        _args9 = arguments;
    return _regenerator.default.async(function scheduleNotificationWithCalendarAsync$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
            areOptionsValid = (options.month == null || isInRangeInclusive(options.month, 1, 12)) && (options.day == null || isInRangeInclusive(options.day, 1, 31)) && (options.hour == null || isInRangeInclusive(options.hour, 0, 23)) && (options.minute == null || isInRangeInclusive(options.minute, 0, 59)) && (options.second == null || isInRangeInclusive(options.second, 0, 59)) && (options.weekDay == null || isInRangeInclusive(options.weekDay, 1, 7)) && (options.weekDay == null || options.day == null);

            if (areOptionsValid) {
              _context9.next = 4;
              break;
            }

            throw new _core.CodedError('WRONG_OPTIONS', 'Options in scheduleNotificationWithCalendarAsync call were incorrect!');

          case 4:
            _validateNotification(notification);

            nativeNotification = _processNotification(notification);
            return _context9.abrupt("return", _ExponentNotifications.default.scheduleNotificationWithCalendar(nativeNotification, options));

          case 7:
          case "end":
            return _context9.stop();
        }
      }
    });
  },
  scheduleNotificationWithTimerAsync: function scheduleNotificationWithTimerAsync(notification, options) {
    var nativeNotification;
    return _regenerator.default.async(function scheduleNotificationWithTimerAsync$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (!(options.interval < 1)) {
              _context10.next = 2;
              break;
            }

            throw new _core.CodedError('WRONG_OPTIONS', 'Interval must be not less then 1');

          case 2:
            _validateNotification(notification);

            nativeNotification = _processNotification(notification);
            return _context10.abrupt("return", _ExponentNotifications.default.scheduleNotificationWithTimer(nativeNotification, options));

          case 5:
          case "end":
            return _context10.stop();
        }
      }
    });
  }
};
exports.default = _default;

function isInRangeInclusive(variable, min, max) {
  return variable >= min && variable <= max;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,