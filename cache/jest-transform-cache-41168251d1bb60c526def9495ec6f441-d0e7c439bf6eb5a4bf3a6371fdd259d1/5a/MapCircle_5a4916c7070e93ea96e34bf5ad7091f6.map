{"version":3,"sources":["MapCircle.js"],"names":["viewPropTypes","ViewPropTypes","View","propTypes","center","PropTypes","shape","latitude","number","isRequired","longitude","radius","onPress","func","strokeWidth","strokeColor","ColorPropType","fillColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","lineDashPhase","lineDashPattern","arrayOf","defaultProps","MapCircle","props","circle","setNativeProps","AIRMapCircle","getAirComponent","ref","React","Component","componentType","providers","google","ios","SUPPORTED","android","USES_DEFAULT_IMPLEMENTATION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAMA,IAAMA,aAAa,GAAGC,8BAAiBC,kBAAKC,SAA5C;;AAEA,IAAMA,SAAS,qBACVH,aADU;AAMbI,EAAAA,MAAM,EAAEC,mBAAUC,KAAV,CAAgB;AAItBC,IAAAA,QAAQ,EAAEF,mBAAUG,MAAV,CAAiBC,UAJL;AAKtBC,IAAAA,SAAS,EAAEL,mBAAUG,MAAV,CAAiBC;AALN,GAAhB,EAMLA,UAZU;AAiBbE,EAAAA,MAAM,EAAEN,mBAAUG,MAAV,CAAiBC,UAjBZ;AAsBbG,EAAAA,OAAO,EAAEP,mBAAUQ,IAtBN;AA2BbC,EAAAA,WAAW,EAAET,mBAAUG,MA3BV;AAgCbO,EAAAA,WAAW,EAAEC,0BAhCA;AAqCbC,EAAAA,SAAS,EAAED,0BArCE;AA8CbE,EAAAA,MAAM,EAAEb,mBAAUG,MA9CL;AAsDbW,EAAAA,OAAO,EAAEd,mBAAUe,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,CAAhB,CAtDI;AA8DbC,EAAAA,QAAQ,EAAEhB,mBAAUe,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAhB,CA9DG;AA0EbE,EAAAA,UAAU,EAAEjB,mBAAUG,MA1ET;AAuFbe,EAAAA,aAAa,EAAElB,mBAAUG,MAvFZ;AAqGbgB,EAAAA,eAAe,EAAEnB,mBAAUoB,OAAV,CAAkBpB,mBAAUG,MAA5B;AArGJ,EAAf;;AAwGA,IAAMkB,YAAY,GAAG;AACnBX,EAAAA,WAAW,EAAE,MADM;AAEnBD,EAAAA,WAAW,EAAE;AAFM,CAArB;;IAKMa,S;;;;;;;;;;mCACWC,K,EAAO;AACpB,WAAKC,MAAL,CAAYC,cAAZ,CAA2BF,KAA3B;AACD;;;6BAEQ;AAAA;;AACP,UAAMG,YAAY,GAAG,KAAKC,eAAL,EAArB;AACA,aACE,6BAAC,YAAD,6BACM,KAAKJ,KADX;AAEE,QAAA,GAAG,EAAE,aAAAK,IAAG,EAAI;AACV,UAAA,KAAI,CAACJ,MAAL,GAAcI,IAAd;AACD;AAJH,SADF;AAQD;;;EAfqBC,eAAMC,S;;AAkB9BR,SAAS,CAACxB,SAAV,GAAsBA,SAAtB;AACAwB,SAAS,CAACD,YAAV,GAAyBA,YAAzB;;eAEe,mCAAqBC,SAArB,EAAgC;AAC7CS,EAAAA,aAAa,EAAE,QAD8B;AAE7CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEC,+BADC;AAENC,MAAAA,OAAO,EAAEC;AAFH;AADC;AAFkC,CAAhC,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ColorPropType, ViewPropTypes, View } from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  /**\n   * The coordinate of the center of the circle\n   */\n  center: PropTypes.shape({\n    /**\n     * Coordinates for the center of the circle.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  }).isRequired,\n\n  /**\n   * The radius of the circle to be drawn (in meters)\n   */\n  radius: PropTypes.number.isRequired,\n\n  /**\n   * Callback that is called when the user presses on the circle\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n};\n\nclass MapCircle extends React.Component {\n  setNativeProps(props) {\n    this.circle.setNativeProps(props);\n  }\n\n  render() {\n    const AIRMapCircle = this.getAirComponent();\n    return (\n      <AIRMapCircle\n        {...this.props}\n        ref={ref => {\n          this.circle = ref;\n        }}\n      />\n    );\n  }\n}\n\nMapCircle.propTypes = propTypes;\nMapCircle.defaultProps = defaultProps;\n\nexport default decorateMapComponent(MapCircle, {\n  componentType: 'Circle',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]}