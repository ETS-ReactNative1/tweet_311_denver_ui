30815ca8f930b7be00908e8e984398db
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVersion = getVersion;
exports.isAvailable = isAvailable;
exports.getUnavailabilityReason = getUnavailabilityReason;
exports.onFrameDidUpdate = onFrameDidUpdate;
exports.onDidFailWithError = onDidFailWithError;
exports.onAnchorsDidUpdate = onAnchorsDidUpdate;
exports.onCameraDidChangeTrackingState = onCameraDidChangeTrackingState;
exports.onSessionWasInterrupted = onSessionWasInterrupted;
exports.onSessionInterruptionEnded = onSessionInterruptionEnded;
exports.removeAllListeners = removeAllListeners;
exports.performHitTest = performHitTest;
exports.setDetectionImagesAsync = setDetectionImagesAsync;
exports.getCurrentFrame = getCurrentFrame;
exports.getARMatrices = getARMatrices;
exports.stopAsync = stopAsync;
exports.startAsync = startAsync;
exports.reset = reset;
exports.resume = resume;
exports.pause = pause;
exports.setConfigurationAsync = setConfigurationAsync;
exports.getProvidesAudioData = getProvidesAudioData;
exports.setProvidesAudioData = setProvidesAudioData;
exports.setPlaneDetection = setPlaneDetection;
exports.getPlaneDetection = getPlaneDetection;
exports.getCameraTexture = getCameraTexture;
exports.setWorldOriginAsync = setWorldOriginAsync;
exports.setLightEstimationEnabled = setLightEstimationEnabled;
exports.getLightEstimationEnabled = getLightEstimationEnabled;
exports.setAutoFocusEnabled = setAutoFocusEnabled;
exports.getAutoFocusEnabled = getAutoFocusEnabled;
exports.setWorldAlignment = setWorldAlignment;
exports.getWorldAlignment = getWorldAlignment;
exports.isConfigurationAvailable = isConfigurationAvailable;
exports.getSupportedVideoFormats = getSupportedVideoFormats;
exports.isFrontCameraAvailable = isFrontCameraAvailable;
exports.isRearCameraAvailable = isRearCameraAvailable;
exports.TrackingConfigurations = exports.TrackingStateReasons = exports.TrackingStates = exports.FrameAttributes = exports.AnchorEventTypes = exports.AnchorTypes = exports.EventTypes = exports.WorldAlignmentTypes = exports.PlaneDetectionTypes = exports.TrackingStateReason = exports.TrackingState = exports.FrameAttribute = exports.AnchorEventType = exports.AnchorType = exports.EventType = exports.WorldAlignment = exports.HitTestResultTypes = exports.PlaneDetection = exports.FaceAnchorProp = exports.BlendShape = exports.DepthDataAccuracy = exports.DepthDataQuality = exports.TrackingConfiguration = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _expoConstants = _interopRequireDefault(require("expo-constants"));

var _reactNative = require("react-native");

var ExponentAR = _reactNative.NativeModules.ExponentAR || {};
var emitter = new _reactNative.NativeEventEmitter(ExponentAR);
var TrackingConfiguration;
exports.TrackingConfiguration = TrackingConfiguration;

(function (TrackingConfiguration) {
  TrackingConfiguration["World"] = "ARWorldTrackingConfiguration";
  TrackingConfiguration["Orientation"] = "AROrientationTrackingConfiguration";
  TrackingConfiguration["Face"] = "ARFaceTrackingConfiguration";
})(TrackingConfiguration || (exports.TrackingConfiguration = TrackingConfiguration = {}));

var DepthDataQuality;
exports.DepthDataQuality = DepthDataQuality;

(function (DepthDataQuality) {
  DepthDataQuality["Low"] = "AVDepthDataQualityLow";
  DepthDataQuality["High"] = "AVDepthDataQualityHigh";
})(DepthDataQuality || (exports.DepthDataQuality = DepthDataQuality = {}));

var DepthDataAccuracy;
exports.DepthDataAccuracy = DepthDataAccuracy;

(function (DepthDataAccuracy) {
  DepthDataAccuracy["Absolute"] = "AVDepthDataAccuracyAbsolute";
  DepthDataAccuracy["Relative"] = "AVDepthDataAccuracyRelative";
})(DepthDataAccuracy || (exports.DepthDataAccuracy = DepthDataAccuracy = {}));

var BlendShape;
exports.BlendShape = BlendShape;

(function (BlendShape) {
  BlendShape["BrowDownL"] = "browDown_L";
  BlendShape["BrowDownR"] = "browDown_R";
  BlendShape["BrowInnerUp"] = "browInnerUp";
  BlendShape["BrowOuterUpL"] = "browOuterUp_L";
  BlendShape["BrowOuterUpR"] = "browOuterUp_R";
  BlendShape["CheekPuff"] = "cheekPuff";
  BlendShape["CheekSquintL"] = "cheekSquint_L";
  BlendShape["CheekSquintR"] = "cheekSquint_R";
  BlendShape["EyeBlinkL"] = "eyeBlink_L";
  BlendShape["EyeBlinkR"] = "eyeBlink_R";
  BlendShape["EyeLookDownL"] = "eyeLookDown_L";
  BlendShape["EyeLookDownR"] = "eyeLookDown_R";
  BlendShape["EyeLookInL"] = "eyeLookIn_L";
  BlendShape["EyeLookInR"] = "eyeLookIn_R";
  BlendShape["EyeLookOutL"] = "eyeLookOut_L";
  BlendShape["EyeLookOutR"] = "eyeLookOut_R";
  BlendShape["EyeLookUpL"] = "eyeLookUp_L";
  BlendShape["EyeLookUpR"] = "eyeLookUp_R";
  BlendShape["EyeSquintL"] = "eyeSquint_L";
  BlendShape["EyeSquintR"] = "eyeSquint_R";
  BlendShape["EyeWideL"] = "eyeWide_L";
  BlendShape["EyeWideR"] = "eyeWide_R";
  BlendShape["JawForward"] = "jawForward";
  BlendShape["JawLeft"] = "jawLeft";
  BlendShape["JawOpen"] = "jawOpen";
  BlendShape["JawRight"] = "jawRight";
  BlendShape["MouthClose"] = "mouthClose";
  BlendShape["MouthDimpleL"] = "mouthDimple_L";
  BlendShape["MouthDimpleR"] = "mouthDimple_R";
  BlendShape["MouthFrownL"] = "mouthFrown_L";
  BlendShape["MouthFrownR"] = "mouthFrown_R";
  BlendShape["MouthFunnel"] = "mouthFunnel";
  BlendShape["MouthLeft"] = "mouthLeft";
  BlendShape["MouthLowerDownL"] = "mouthLowerDown_L";
  BlendShape["MouthLowerDownR"] = "mouthLowerDown_R";
  BlendShape["MouthPressL"] = "mouthPress_L";
  BlendShape["MouthPressR"] = "mouthPress_R";
  BlendShape["MouthPucker"] = "mouthPucker";
  BlendShape["MouthRight"] = "mouthRight";
  BlendShape["MouthRollLower"] = "mouthRollLower";
  BlendShape["MouthRollUpper"] = "mouthRollUpper";
  BlendShape["MouthShrugLower"] = "mouthShrugLower";
  BlendShape["MouthShrugUpper"] = "mouthShrugUpper";
  BlendShape["MouthSmileL"] = "mouthSmile_L";
  BlendShape["MouthSmileR"] = "mouthSmile_R";
  BlendShape["MouthStretchL"] = "mouthStretch_L";
  BlendShape["MouthStretchR"] = "mouthStretch_R";
  BlendShape["MouthUpperUpL"] = "mouthUpperUp_L";
  BlendShape["MouthUpperUpR"] = "mouthUpperUp_R";
  BlendShape["NoseSneerL"] = "noseSneer_L";
  BlendShape["NoseSneerR"] = "noseSneer_R";
})(BlendShape || (exports.BlendShape = BlendShape = {}));

var FaceAnchorProp;
exports.FaceAnchorProp = FaceAnchorProp;

(function (FaceAnchorProp) {
  FaceAnchorProp["Geometry"] = "geometry";
  FaceAnchorProp["BlendShapes"] = "blendShapes";
})(FaceAnchorProp || (exports.FaceAnchorProp = FaceAnchorProp = {}));

var PlaneDetection;
exports.PlaneDetection = PlaneDetection;

(function (PlaneDetection) {
  PlaneDetection["None"] = "none";
  PlaneDetection["Horizontal"] = "horizontal";
  PlaneDetection["Vertical"] = "vertical";
})(PlaneDetection || (exports.PlaneDetection = PlaneDetection = {}));

var HitTestResultTypes;
exports.HitTestResultTypes = HitTestResultTypes;

(function (HitTestResultTypes) {
  HitTestResultTypes["FeaturePoint"] = "featurePoint";
  HitTestResultTypes["HorizontalPlane"] = "horizontalPlane";
  HitTestResultTypes["VerticalPlane"] = "verticalPlane";
  HitTestResultTypes["ExistingPlane"] = "existingPlane";
  HitTestResultTypes["ExistingPlaneUsingExtent"] = "existingPlaneUsingExtent";
  HitTestResultTypes["ExistingPlaneUsingGeometry"] = "existingPlaneUsingGeometry";
})(HitTestResultTypes || (exports.HitTestResultTypes = HitTestResultTypes = {}));

var WorldAlignment;
exports.WorldAlignment = WorldAlignment;

(function (WorldAlignment) {
  WorldAlignment["Gravity"] = "gravity";
  WorldAlignment["GravityAndHeading"] = "gravityAndHeading";
  WorldAlignment["AlignmentCamera"] = "alignmentCamera";
})(WorldAlignment || (exports.WorldAlignment = WorldAlignment = {}));

var EventType;
exports.EventType = EventType;

(function (EventType) {
  EventType[EventType["FrameDidUpdate"] = ExponentAR.frameDidUpdate] = "FrameDidUpdate";
  EventType[EventType["DidFailWithError"] = ExponentAR.didFailWithError] = "DidFailWithError";
  EventType[EventType["AnchorsDidUpdate"] = ExponentAR.anchorsDidUpdate] = "AnchorsDidUpdate";
  EventType[EventType["CameraDidChangeTrackingState"] = ExponentAR.cameraDidChangeTrackingState] = "CameraDidChangeTrackingState";
  EventType[EventType["SessionWasInterrupted"] = ExponentAR.sessionWasInterrupted] = "SessionWasInterrupted";
  EventType[EventType["SessionInterruptionEnded"] = ExponentAR.sessionInterruptionEnded] = "SessionInterruptionEnded";
})(EventType || (exports.EventType = EventType = {}));

var AnchorType;
exports.AnchorType = AnchorType;

(function (AnchorType) {
  AnchorType["Face"] = "ARFaceAnchor";
  AnchorType["Image"] = "ARImageAnchor";
  AnchorType["Plane"] = "ARPlaneAnchor";
  AnchorType["Anchor"] = "ARAnchor";
})(AnchorType || (exports.AnchorType = AnchorType = {}));

var AnchorEventType;
exports.AnchorEventType = AnchorEventType;

(function (AnchorEventType) {
  AnchorEventType["Add"] = "add";
  AnchorEventType["Update"] = "update";
  AnchorEventType["Remove"] = "remove";
})(AnchorEventType || (exports.AnchorEventType = AnchorEventType = {}));

var FrameAttribute;
exports.FrameAttribute = FrameAttribute;

(function (FrameAttribute) {
  FrameAttribute["Anchors"] = "anchors";
  FrameAttribute["RawFeaturePoints"] = "rawFeaturePoints";
  FrameAttribute["LightEstimation"] = "lightEstimation";
  FrameAttribute["CapturedDepthData"] = "capturedDepthData";
})(FrameAttribute || (exports.FrameAttribute = FrameAttribute = {}));

var TrackingState;
exports.TrackingState = TrackingState;

(function (TrackingState) {
  TrackingState["NotAvailable"] = "ARTrackingStateNotAvailable";
  TrackingState["Limited"] = "ARTrackingStateLimited";
  TrackingState["Normal"] = "ARTrackingStateNormal";
})(TrackingState || (exports.TrackingState = TrackingState = {}));

var TrackingStateReason;
exports.TrackingStateReason = TrackingStateReason;

(function (TrackingStateReason) {
  TrackingStateReason["None"] = "ARTrackingStateReasonNone";
  TrackingStateReason["Initializing"] = "ARTrackingStateReasonInitializing";
  TrackingStateReason["ExcessiveMotion"] = "ARTrackingStateReasonExcessiveMotion";
  TrackingStateReason["InsufficientFeatures"] = "ARTrackingStateReasonInsufficientFeatures";
  TrackingStateReason["Relocalizing"] = "ARTrackingStateReasonRelocalizing";
})(TrackingStateReason || (exports.TrackingStateReason = TrackingStateReason = {}));

function getVersion() {
  return ExponentAR.ARKitVersion;
}

var AvailabilityErrorMessages = {
  Simulator: "Cannot run EXGL in a simulator",
  ANineChip: "ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a",
  ARKitOnlyOnIOS: "ARKit can only run on an iOS device! This is a"
};

function isAvailable() {
  var hasA9Chip = _expoConstants.default.deviceYearClass && _expoConstants.default.deviceYearClass > 2014;

  if (!_expoConstants.default.isDevice || _reactNative.Platform.isTVOS || _reactNative.Platform.OS !== 'ios' || !hasA9Chip || !ExponentAR.isSupported || !ExponentAR.startAsync) {
      return false;
    }

  return true;
}

function getUnavailabilityReason() {
  if (!_expoConstants.default.isDevice) {
    return AvailabilityErrorMessages.Simulator;
  } else if (_reactNative.Platform.OS !== 'ios') {
    return AvailabilityErrorMessages.ARKitOnlyOnIOS + " " + _reactNative.Platform.OS + " device";
  } else if (_expoConstants.default.deviceYearClass == null || _expoConstants.default.deviceYearClass < 2015) {
    return AvailabilityErrorMessages.ANineChip + " " + _expoConstants.default.deviceYearClass + " device";
  }

  return 'Unknown Reason';
}

function onFrameDidUpdate(listener) {
  return _addListener(EventType.FrameDidUpdate, listener);
}

function onDidFailWithError(listener) {
  return _addListener(EventType.DidFailWithError, listener);
}

function onAnchorsDidUpdate(listener) {
  return _addListener(EventType.AnchorsDidUpdate, listener);
}

function onCameraDidChangeTrackingState(listener) {
  return _addListener(EventType.CameraDidChangeTrackingState, listener);
}

function onSessionWasInterrupted(listener) {
  return _addListener(EventType.SessionWasInterrupted, listener);
}

function onSessionInterruptionEnded(listener) {
  return _addListener(EventType.SessionInterruptionEnded, listener);
}

function _addListener(eventType, event) {
  return emitter.addListener(eventType, event);
}

function removeAllListeners(eventType) {
  emitter.removeAllListeners(eventType);
}

function performHitTest(point, types) {
  if (ExponentAR.performHitTest) {
    return ExponentAR.performHitTest(point, types);
  }

  throw new Error("AR hit testing is not supported on this device");
}

function setDetectionImagesAsync(images) {
  return _regenerator.default.async(function setDetectionImagesAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!ExponentAR.setDetectionImagesAsync) {
            _context.next = 3;
            break;
          }

          _context.next = 3;
          return _regenerator.default.awrap(ExponentAR.setDetectionImagesAsync(images));

        case 3:
        case "end":
          return _context.stop();
      }
    }
  });
}

function getCurrentFrame(attributes) {
  if (ExponentAR.getCurrentFrame) {
    return ExponentAR.getCurrentFrame(attributes);
  }

  throw new Error("AR is not supported on this device");
}

function getARMatrices(near, far) {
  if (ExponentAR.getARMatrices) {
    return ExponentAR.getARMatrices(near, far);
  }

  throw new Error("AR is not supported on this device");
}

function stopAsync() {
  return _regenerator.default.async(function stopAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!ExponentAR.stopAsync) {
            _context2.next = 3;
            break;
          }

          _context2.next = 3;
          return _regenerator.default.awrap(ExponentAR.stopAsync());

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function startAsync(node, configuration) {
  var handle;
  return _regenerator.default.async(function startAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          handle = typeof node === 'number' ? node : _getNodeHandle(node);

          if (!ExponentAR.startAsync) {
            _context3.next = 5;
            break;
          }

          _context3.next = 4;
          return _regenerator.default.awrap(ExponentAR.startAsync(handle, configuration));

        case 4:
          return _context3.abrupt("return", _context3.sent);

        case 5:
          throw new Error("AR is not supported on this device");

        case 6:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function _getNodeHandle(component) {
  var handle = (0, _reactNative.findNodeHandle)(component);

  if (handle === null) {
    throw new Error("Could not find the React node handle for the AR component: " + component);
  }

  return handle;
}

function reset() {
  if (ExponentAR.reset) {
    ExponentAR.reset();
  }
}

function resume() {
  if (ExponentAR.resume) {
    ExponentAR.resume();
  }
}

function pause() {
  if (ExponentAR.pause) {
    ExponentAR.pause();
  }
}

function setConfigurationAsync(configuration) {
  return _regenerator.default.async(function setConfigurationAsync$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          if (!ExponentAR.setConfigurationAsync) {
            _context4.next = 3;
            break;
          }

          _context4.next = 3;
          return _regenerator.default.awrap(ExponentAR.setConfigurationAsync(configuration));

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  });
}

function getProvidesAudioData() {
  if (ExponentAR.getProvidesAudioData) {
    return ExponentAR.getProvidesAudioData();
  }

  return false;
}

function setProvidesAudioData(providesAudioData) {
  if (ExponentAR.setProvidesAudioData) {
    ExponentAR.setProvidesAudioData(providesAudioData);
  }
}

function setPlaneDetection(planeDetection) {
  if (ExponentAR.setPlaneDetection) {
    ExponentAR.setPlaneDetection(planeDetection);
  }
}

function getPlaneDetection() {
  if (ExponentAR.getPlaneDetection) {
    return ExponentAR.getPlaneDetection();
  }

  throw new Error("AR plane detection is not supported on this device");
}

function getCameraTexture() {
  if (ExponentAR.getCameraTexture) {
    return ExponentAR.getCameraTexture();
  }

  throw new Error("AR camera textures are not supported on this device");
}

function setWorldOriginAsync(matrix_float4x4) {
  return _regenerator.default.async(function setWorldOriginAsync$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          if (!ExponentAR.setWorldOriginAsync) {
            _context5.next = 3;
            break;
          }

          _context5.next = 3;
          return _regenerator.default.awrap(ExponentAR.setWorldOriginAsync(matrix_float4x4));

        case 3:
        case "end":
          return _context5.stop();
      }
    }
  });
}

function setLightEstimationEnabled(isLightEstimationEnabled) {
  if (ExponentAR.setLightEstimationEnabled) {
    ExponentAR.setLightEstimationEnabled(isLightEstimationEnabled);
  }
}

function getLightEstimationEnabled() {
  if (ExponentAR.getLightEstimationEnabled) {
    return ExponentAR.getLightEstimationEnabled();
  }

  return false;
}

function setAutoFocusEnabled(isAutoFocusEnabled) {
  if (ExponentAR.setAutoFocusEnabled) {
    ExponentAR.setAutoFocusEnabled(isAutoFocusEnabled);
  }
}

function getAutoFocusEnabled() {
  if (ExponentAR.getAutoFocusEnabled) {
    return ExponentAR.getAutoFocusEnabled();
  }

  return false;
}

function setWorldAlignment(worldAlignment) {
  if (ExponentAR.setWorldAlignment) {
    ExponentAR.setWorldAlignment(worldAlignment);
  }
}

function getWorldAlignment() {
  if (ExponentAR.getWorldAlignment) {
    return ExponentAR.getWorldAlignment();
  }

  throw new Error("AR world alignment is not supported on this device");
}

function isConfigurationAvailable(configuration) {
  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width,
      height = _Dimensions$get.height;

  var isX = (width === 812 || height === 812) && !_reactNative.Platform.isTVOS && !_reactNative.Platform.isPad;

  if (configuration === TrackingConfiguration.Face && isX && isAvailable()) {
    return true;
  }

  return !!ExponentAR[configuration];
}

function getSupportedVideoFormats(configuration) {
  var _videoFormats;

  var videoFormats = (_videoFormats = {}, (0, _defineProperty2.default)(_videoFormats, TrackingConfiguration.World, 'WorldTrackingVideoFormats'), (0, _defineProperty2.default)(_videoFormats, TrackingConfiguration.Orientation, 'OrientationTrackingVideoFormats'), (0, _defineProperty2.default)(_videoFormats, TrackingConfiguration.Face, 'FaceTrackingVideoFormats'), _videoFormats);
  var videoFormat = videoFormats[configuration];
  return ExponentAR[videoFormat] || [];
}

function isFrontCameraAvailable() {
  return isConfigurationAvailable(TrackingConfiguration.Face);
}

function isRearCameraAvailable() {
  return isConfigurationAvailable(TrackingConfiguration.World);
}

var PlaneDetectionTypes = PlaneDetection;
exports.PlaneDetectionTypes = PlaneDetectionTypes;
var WorldAlignmentTypes = WorldAlignment;
exports.WorldAlignmentTypes = WorldAlignmentTypes;
var EventTypes = EventType;
exports.EventTypes = EventTypes;
var AnchorTypes = AnchorType;
exports.AnchorTypes = AnchorTypes;
var AnchorEventTypes = AnchorEventType;
exports.AnchorEventTypes = AnchorEventTypes;
var FrameAttributes = FrameAttribute;
exports.FrameAttributes = FrameAttributes;
var TrackingStates = TrackingState;
exports.TrackingStates = TrackingStates;
var TrackingStateReasons = TrackingStateReason;
exports.TrackingStateReasons = TrackingStateReasons;
var TrackingConfigurations = TrackingConfiguration;
exports.TrackingConfigurations = TrackingConfigurations;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,