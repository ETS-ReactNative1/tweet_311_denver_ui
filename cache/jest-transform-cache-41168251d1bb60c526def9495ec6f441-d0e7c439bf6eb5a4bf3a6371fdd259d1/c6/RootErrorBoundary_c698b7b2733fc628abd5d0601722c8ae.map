{"version":3,"sources":["../../src/launch/RootErrorBoundary.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;IAEQ,yB,GAA8B,0B,CAA9B,yB;;AAER,SAAe,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA,gBACM,yBAAyB,IAAI,yBAAyB,CAAC,aAD7D;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAEiB,yBAAyB,CAAC,aAA1B,EAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;IAcqB,iB;;;AACnB,6BAAY,KAAZ,EAAwB;AAAA;;AAAA;AACtB,uHAAM,KAAN;AAkBF,UAAA,oBAAA,GAAuB,KAAvB;;AAEA,UAAA,wBAAA,GAA2B,YAAK;AAC9B,YAAK,oBAAL,GAA4B,IAA5B;AAGA,UAAI,UAAU,GAAG,MAAM,CAAC,UAAxB;AAEA,UAAI,CAAC,UAAL,EAAiB;AAEjB,UAAI,oBAAoB,GAAG,UAAU,CAAC,gBAAX,EAA3B;AAEA,MAAA,UAAU,CAAC,gBAAX,CAA4B,UAAC,KAAD,EAAQ,OAAR,EAAmB;AAC7C,YAAI,MAAK,oBAAT,EAA+B;AAC7B,UAAA,aAAa;;AAEb,cAAI,OAAJ,EAAa;AACX,kBAAK,QAAL,CAAc;AAAE,cAAA,KAAK,EAAL;AAAF,aAAd;AACD;AACF;;AAED,QAAA,oBAAoB,CAAC,KAAD,EAAQ,OAAR,CAApB;AACD,OAVD;AAWD,KArBD;;AAuBA,UAAA,4BAAA,GAA+B,YAAK;AAIlC,YAAK,oBAAL,GAA4B,KAA5B;AACD,KALD;;AAtCE,QAAI,OAAJ,EAAa;AACX,uDAAgC,IAAhC,CAAqC,mBAArC,EAA0D,MAAK,wBAA/D;AACA,uDAAgC,IAAhC,CACE,sBADF,EAEE,MAAK,4BAFP;AAID;;AAED,UAAK,KAAL,GAAa;AACX,MAAA,KAAK,EAAE;AADI,KAAb;AAdsB;AAiBvB;;;;sCAmCiB,K,EAAY;AAC5B,UAAI,KAAK,oBAAT,EAA+B;AAC7B,QAAA,aAAa;AAEb,aAAK,QAAL,CAAc;AAAE,UAAA,KAAK,EAAL;AAAF,SAAd;AACD;;AAED,MAAA,OAAO,CAAC,KAAR,CAAc,KAAd;AACD;;;6BAEK;AACJ,UAAI,KAAK,KAAL,CAAW,KAAf,EAAsB;AACpB,eACE,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAE,MAAM,CAAC;AAApB,WACE,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAE,MAAM,CAAC;AAApB,0BADF,EAEE,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAE,CAAC,MAAM,CAAC,SAAR,EAAmB;AAAE,YAAA,KAAK,EAAE;AAAT,WAAnB;AAAb,+EAFF,EAKE,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAE,MAAM,CAAC;AAApB,2JALF,CADF;AAYD,OAbD,MAaO;AACL,eAAO,KAAK,KAAL,CAAW,QAAlB;AACD;AACF;;;EAhF4C,eAAM,S;;;;AAmFrD,IAAM,MAAM,GAAG,wBAAW,MAAX,CAAkB;AAC/B,EAAA,SAAS,EAAE;AACT,IAAA,IAAI,EAAE,CADG;AAET,IAAA,UAAU,EAAE,QAFH;AAGT,IAAA,cAAc,EAAE;AAHP,GADoB;AAM/B,EAAA,SAAS,EAAE;AACT,IAAA,YAAY,EAAE,EADL;AAET,IAAA,SAAS,EAAE,QAFF;AAGT,IAAA,gBAAgB,EAAE,EAHT;AAIT,IAAA,QAAQ,EAAE,GAJD;AAKT,IAAA,QAAQ,EAAE,EALD;AAMT,IAAA,KAAK,EAAE;AANE,GANoB;AAc/B,EAAA,WAAW,EAAE;AACX,IAAA,QAAQ,EAAE,EADC;AAEX,IAAA,YAAY,EAAE;AAFH;AAdkB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { NativeModules, StyleSheet, Text, View } from 'react-native';\n\nimport { getAppLoadingLifecycleEmitter } from './AppLoading';\n\nconst { ExponentAppLoadingManager } = NativeModules;\n\nasync function finishedAsync(): Promise<any> {\n  if (ExponentAppLoadingManager && ExponentAppLoadingManager.finishedAsync) {\n    return await ExponentAppLoadingManager.finishedAsync();\n  }\n}\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype State = {\n  error: Error | null;\n};\n\nexport default class RootErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    // In production the app will just hard crash on errors, unless the developer decides to handle\n    // them by overriding the global error handler and swallowing the error, in which case they are\n    // responsible for determining how to recover from this state.\n    if (__DEV__) {\n      getAppLoadingLifecycleEmitter().once('componentDidMount', this._subscribeToGlobalErrors);\n      getAppLoadingLifecycleEmitter().once(\n        'componentWillUnmount',\n        this._unsubscribeFromGlobalErrors\n      );\n    }\n\n    this.state = {\n      error: null,\n    };\n  }\n\n  _appLoadingIsMounted = false;\n\n  _subscribeToGlobalErrors = () => {\n    this._appLoadingIsMounted = true;\n\n    // Bacon: This isn't supported in RNWeb yet\n    let ErrorUtils = global.ErrorUtils;\n\n    if (!ErrorUtils) return;\n\n    let originalErrorHandler = ErrorUtils.getGlobalHandler();\n\n    ErrorUtils.setGlobalHandler((error, isFatal) => {\n      if (this._appLoadingIsMounted) {\n        finishedAsync();\n\n        if (isFatal) {\n          this.setState({ error });\n        }\n      }\n\n      originalErrorHandler(error, isFatal);\n    });\n  };\n\n  _unsubscribeFromGlobalErrors = () => {\n    // We don't remove the global error handler that we set here because it is conceivable that the\n    // user may add error handlers *after* we subscribe, and we don't want to override those, so\n    // instead we just gate the call\n    this._appLoadingIsMounted = false;\n  };\n\n  // Test this by adding `throw new Error('example')` to your root component\n  componentDidCatch(error: Error) {\n    if (this._appLoadingIsMounted) {\n      finishedAsync();\n\n      this.setState({ error });\n    }\n\n    console.error(error);\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <View style={styles.container}>\n          <Text style={styles.warningIcon}>⚠️</Text>\n          <Text style={[styles.paragraph, { color: '#000' }]}>\n            A fatal error was encountered while rendering the root component.\n          </Text>\n          <Text style={styles.paragraph}>\n            Review your application logs for more information, and reload the app when the issue is\n            resolved. In production, your app would have crashed.\n          </Text>\n        </View>\n      );\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paragraph: {\n    marginBottom: 10,\n    textAlign: 'center',\n    marginHorizontal: 30,\n    maxWidth: 350,\n    fontSize: 15,\n    color: '#888',\n  },\n  warningIcon: {\n    fontSize: 40,\n    marginBottom: 20,\n  },\n});\n"],"sourceRoot":""}