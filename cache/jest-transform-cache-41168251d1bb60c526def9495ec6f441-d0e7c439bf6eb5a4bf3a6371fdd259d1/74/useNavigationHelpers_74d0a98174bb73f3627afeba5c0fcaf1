c083cdbcaf95840a724a9cbb20c3e5ae
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useNavigationHelpers;

var React = _interopRequireWildcard(require("react"));

var _routers = require("@react-navigation/routers");

var _NavigationContext = _interopRequireDefault(require("./NavigationContext"));

var _BaseNavigationContainer = require("./BaseNavigationContainer");

var _types = require("./types");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

_types.PrivateValueStore;

function useNavigationHelpers(_ref) {
  var onAction = _ref.onAction,
      getState = _ref.getState,
      emitter = _ref.emitter,
      router = _ref.router;
  var parentNavigationHelpers = React.useContext(_NavigationContext.default);

  var _React$useContext = React.useContext(_BaseNavigationContainer.NavigationStateContext),
      performTransaction = _React$useContext.performTransaction;

  return React.useMemo(function () {
    var dispatch = function dispatch(action) {
      performTransaction(function () {
        var payload = typeof action === 'function' ? action(getState()) : action;
        var handled = onAction(payload);

        if (!handled && process.env.NODE_ENV !== 'production') {
          console.error("The action '".concat(payload.type, "' with payload '").concat(JSON.stringify(payload.payload), "' was not handled by any navigator. If you are trying to navigate to a screen, check if the screen exists in your navigator. If you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/en/nesting-navigators.html#navigating-to-a-screen-in-a-nested-navigator."));
        }
      });
    };

    var actions = _objectSpread({}, router.actionCreators, {}, _routers.CommonActions);

    var helpers = Object.keys(actions).reduce(function (acc, name) {
      acc[name] = function () {
        return dispatch(actions[name].apply(actions, arguments));
      };

      return acc;
    }, {});
    return _objectSpread({}, parentNavigationHelpers, {}, helpers, {
      dispatch: dispatch,
      emit: emitter.emit,
      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : function () {
        return true;
      },
      canGoBack: function canGoBack() {
        var state = getState();
        return router.getStateForAction(state, _routers.CommonActions.goBack(), {
          routeNames: state.routeNames,
          routeParamList: {}
        }) !== null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;
      }
    });
  }, [router, getState, parentNavigationHelpers, emitter.emit, performTransaction, onAction]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,