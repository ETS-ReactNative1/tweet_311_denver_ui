ab9f0855c58e52b35e142f902520c954
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _expoConstants = _interopRequireDefault(require("expo-constants"));

var _qs = _interopRequireDefault(require("qs"));

var _expoWebBrowser = require("expo-web-browser");

var _Linking = _interopRequireDefault(require("./Linking/Linking"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var BASE_URL = "https://auth.expo.io";
var _authLock = false;

function startAsync(options) {
  var returnUrl, authUrl, startUrl, result, _parseUrl, params, errorCode;

  return _regenerator.default.async(function startAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          returnUrl = options.returnUrl || getDefaultReturnUrl();
          authUrl = options.authUrl;
          startUrl = getStartUrl(authUrl, returnUrl);

          if (authUrl) {
            _context.next = 5;
            break;
          }

          throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');

        case 5:
          if (!_authLock) {
            _context.next = 8;
            break;
          }

          if (__DEV__) {
            console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');
          }

          return _context.abrupt("return", {
            type: 'locked'
          });

        case 8:
          _authLock = true;
          _context.prev = 9;
          _context.next = 12;
          return _regenerator.default.awrap(_openWebBrowserAsync(startUrl, returnUrl));

        case 12:
          result = _context.sent;

        case 13:
          _context.prev = 13;
          _authLock = false;
          return _context.finish(13);

        case 16:
          if (result) {
            _context.next = 18;
            break;
          }

          throw new Error('Unexpected missing AuthSession result');

        case 18:
          if (result.url) {
            _context.next = 24;
            break;
          }

          if (!result.type) {
            _context.next = 23;
            break;
          }

          return _context.abrupt("return", result);

        case 23:
          throw new Error('Unexpected AuthSession result with missing type');

        case 24:
          _parseUrl = parseUrl(result.url), params = _parseUrl.params, errorCode = _parseUrl.errorCode;
          return _context.abrupt("return", {
            type: errorCode ? 'error' : 'success',
            params: params,
            errorCode: errorCode,
            url: result.url
          });

        case 26:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[9,, 13, 16]]);
}

function dismiss() {
  (0, _expoWebBrowser.dismissAuthSession)();
}

function _openWebBrowserAsync(startUrl, returnUrl) {
  var result;
  return _regenerator.default.async(function _openWebBrowserAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return _regenerator.default.awrap((0, _expoWebBrowser.openAuthSessionAsync)(startUrl, returnUrl));

        case 2:
          result = _context2.sent;

          if (!(result.type === 'cancel' || result.type === 'dismiss')) {
            _context2.next = 5;
            break;
          }

          return _context2.abrupt("return", {
            type: result.type
          });

        case 5:
          return _context2.abrupt("return", result);

        case 6:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function getStartUrl(authUrl, returnUrl) {
  var queryString = _qs.default.stringify({
    authUrl: authUrl,
    returnUrl: returnUrl
  });

  return getRedirectUrl() + "/start?" + queryString;
}

function getRedirectUrl() {
  var redirectUrl = BASE_URL + "/" + _expoConstants.default.manifest.id;

  if (__DEV__) {
    _warnIfAnonymous(_expoConstants.default.manifest.id, redirectUrl);
  }

  return redirectUrl;
}

function getDefaultReturnUrl() {
  return _Linking.default.makeUrl('expo-auth-session');
}

function parseUrl(url) {
  var parts = url.split('#');
  var hash = parts[1];
  var partsWithoutHash = parts[0].split('?');
  var queryString = partsWithoutHash[partsWithoutHash.length - 1];

  var parsedSearch = _qs.default.parse(queryString);

  var errorCode = parsedSearch.errorCode;
  delete parsedSearch.errorCode;
  var parsedHash = {};

  if (parts[1]) {
    parsedHash = _qs.default.parse(hash);
  }

  var params = _objectSpread({}, parsedSearch, {}, parsedHash);

  return {
    errorCode: errorCode,
    params: params
  };
}

function _warnIfAnonymous(id, url) {
  if (id.startsWith('@anonymous/')) {
    console.warn("You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"" + url + "\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.");
  }
}

var _default = {
  dismiss: dismiss,
  getRedirectUrl: getRedirectUrl,
  getStartUrl: getStartUrl,
  getDefaultReturnUrl: getDefaultReturnUrl,

  get getRedirectUri() {
    console.warn('Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)');
    return getRedirectUrl;
  },

  startAsync: startAsync
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,